// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-xros1.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FioriCharts
import Combine
import CoreGraphics
import FioriThemeManager
import Foundation
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct AnyShapeStyle {
  public let base: Any
  public init(_ base: some ShapeStyle)
}
public enum ChartAxisId : Swift.String {
  case x
  case y
  case radius
  case dual
  case category
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class ChartAxisAttributes : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying, Swift.CustomStringConvertible {
  @Combine.Published @_projectedValueProperty($axisId) public var axisId: FioriCharts.ChartAxisId? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $axisId: Combine.Published<FioriCharts.ChartAxisId?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($baseline) public var baseline: FioriCharts.ChartBaselineAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $baseline: Combine.Published<FioriCharts.ChartBaselineAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($gridlines) public var gridlines: FioriCharts.ChartGridlineAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $gridlines: Combine.Published<FioriCharts.ChartGridlineAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($labels) public var labels: FioriCharts.ChartLabelAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $labels: Combine.Published<FioriCharts.ChartLabelAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($titleLabel) public var titleLabel: FioriCharts.ChartLabelAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $titleLabel: Combine.Published<FioriCharts.ChartLabelAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($title) public var title: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $title: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let id: Foundation.UUID
  public init(axisId: FioriCharts.ChartAxisId? = nil, baseline: FioriCharts.ChartBaselineAttributes? = nil, gridlines: FioriCharts.ChartGridlineAttributes? = nil, labels: FioriCharts.ChartLabelAttributes? = nil, titleLabel: FioriCharts.ChartLabelAttributes? = nil, title: Swift.String? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public var description: Swift.String {
    get
  }
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class ChartNumericAxisAttributes : FioriCharts.ChartAxisAttributes {
  public init(axisId: FioriCharts.ChartAxisId? = nil, baseline: FioriCharts.ChartBaselineAttributes? = nil, gridlines: FioriCharts.ChartGridlineAttributes? = nil, labels: FioriCharts.ChartLabelAttributes? = nil, titleLabel: FioriCharts.ChartLabelAttributes? = nil, title: Swift.String? = nil, isZeroBased: Swift.Bool = true, allowLooseLabels: Swift.Bool = false, fudgeAxisRange: Swift.Bool = false, adjustToNiceValues: Swift.Bool = true, abbreviatesLabels: Swift.Bool = false, isMagnitudedDisplayed: Swift.Bool = true, explicitMin: Swift.Double? = nil, explicitMax: Swift.Double? = nil, formatter: Foundation.NumberFormatter?, abbreviatedFormatter: Foundation.NumberFormatter?)
  convenience public init()
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public var description: Swift.String {
    get
  }
  @Combine.Published @_projectedValueProperty($isZeroBased) public var isZeroBased: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isZeroBased: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($formatter) public var formatter: Foundation.NumberFormatter {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $formatter: Combine.Published<Foundation.NumberFormatter>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($abbreviatesLabels) public var abbreviatesLabels: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $abbreviatesLabels: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isMagnitudedDisplayed) public var isMagnitudedDisplayed: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isMagnitudedDisplayed: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($abbreviatedFormatter) public var abbreviatedFormatter: Foundation.NumberFormatter {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $abbreviatedFormatter: Combine.Published<Foundation.NumberFormatter>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($explicitMin) public var explicitMin: CoreFoundation.CGFloat? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $explicitMin: Combine.Published<CoreFoundation.CGFloat?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($explicitMax) public var explicitMax: CoreFoundation.CGFloat? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $explicitMax: Combine.Published<CoreFoundation.CGFloat?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc deinit
}
public enum ChartCategoryAxisLabelLayoutStyle : Swift.CustomStringConvertible {
  case allOrNothing
  case range
  public var description: Swift.String {
    get
  }
  public static func == (a: FioriCharts.ChartCategoryAxisLabelLayoutStyle, b: FioriCharts.ChartCategoryAxisLabelLayoutStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ChartCategoryAxisAttributes : FioriCharts.ChartNumericAxisAttributes {
  public init(axisId: FioriCharts.ChartAxisId? = nil, baseline: FioriCharts.ChartBaselineAttributes? = nil, gridlines: FioriCharts.ChartGridlineAttributes? = nil, labels: FioriCharts.ChartLabelAttributes? = nil, titleLabel: FioriCharts.ChartLabelAttributes? = nil, title: Swift.String? = nil, isZeroBased: Swift.Bool = true, allowLooseLabels: Swift.Bool = false, fudgeAxisRange: Swift.Bool = false, adjustToNiceValues: Swift.Bool = true, abbreviatesLabels: Swift.Bool = true, isMagnitudedDisplayed: Swift.Bool = true, explicitMin: Swift.Double? = nil, explicitMax: Swift.Double? = nil, formatter: Foundation.NumberFormatter?, abbreviatedFormatter: Foundation.NumberFormatter?, labelLayoutStyle: FioriCharts.ChartCategoryAxisLabelLayoutStyle)
  convenience public init(labelLayoutStyle: FioriCharts.ChartCategoryAxisLabelLayoutStyle)
  convenience public init()
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public var description: Swift.String {
    get
  }
  @Combine.Published @_projectedValueProperty($labelLayoutStyle) public var labelLayoutStyle: FioriCharts.ChartCategoryAxisLabelLayoutStyle {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $labelLayoutStyle: Combine.Published<FioriCharts.ChartCategoryAxisLabelLayoutStyle>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc deinit
}
extension FioriCharts.ChartAxisAttributes : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartAxisAttributes, rhs: FioriCharts.ChartAxisAttributes) -> Swift.Bool
}
extension FioriCharts.ChartNumericAxisAttributes {
  public static func == (lhs: FioriCharts.ChartNumericAxisAttributes, rhs: FioriCharts.ChartNumericAxisAttributes) -> Swift.Bool
}
extension FioriCharts.ChartCategoryAxisAttributes {
  public static func == (lhs: FioriCharts.ChartCategoryAxisAttributes, rhs: FioriCharts.ChartCategoryAxisAttributes) -> Swift.Bool
}
public class ChartLabelAttributes : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying {
  @Combine.Published @_projectedValueProperty($color) public var color: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $color: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($fontSize) public var fontSize: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $fontSize: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($offset) public var offset: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $offset: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @Combine.Published @_projectedValueProperty($isHidden) public var isHidden: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isHidden: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($font) public var font: SwiftUI.Font? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $font: Combine.Published<SwiftUI.Font?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($backgroundColor) public var backgroundColor: SwiftUI.Color? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $backgroundColor: Combine.Published<SwiftUI.Color?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let id: Foundation.UUID
  public init(color: SwiftUI.Color = .preferredColor(.tertiaryLabel), fontSize: Swift.Double = 12, offset: Swift.Double = 0, isHidden: Swift.Bool = false, backgroundColor: SwiftUI.Color? = nil)
  public init(color: SwiftUI.Color = .preferredColor(.tertiaryLabel), font: SwiftUI.Font?, offset: Swift.Double = 0, isHidden: Swift.Bool = false, backgroundColor: SwiftUI.Color? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FioriCharts.ChartLabelAttributes : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartLabelAttributes, rhs: FioriCharts.ChartLabelAttributes) -> Swift.Bool
}
extension FioriCharts.ChartLabelAttributes : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public class ChartGridlineAttributes : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying, Swift.CustomStringConvertible {
  public init(width: Swift.Double = 1, color: SwiftUI.Color = .preferredColor(.secondaryFill), dashPatternLength: Swift.Double = 1, dashPatternGap: Swift.Double = 3, isHidden: Swift.Bool = false)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public var description: Swift.String {
    get
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($width) public var width: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $width: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @Combine.Published @_projectedValueProperty($color) public var color: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $color: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($dashPatternLength) public var dashPatternLength: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $dashPatternLength: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($dashPatternGap) public var dashPatternGap: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $dashPatternGap: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @Combine.Published @_projectedValueProperty($isHidden) public var isHidden: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isHidden: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let id: Foundation.UUID
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class ChartBaselineAttributes : FioriCharts.ChartGridlineAttributes {
  public init(width: Swift.Double = 1, color: SwiftUI.Color = .preferredColor(.secondaryFill), dashPatternLength: Swift.Double = 1, dashPatternGap: Swift.Double = 0, isHidden: Swift.Bool = false, value: Swift.Double? = nil, position: Swift.Double? = nil)
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  override public var description: Swift.String {
    get
  }
  @Combine.Published @_projectedValueProperty($value) public var value: CoreFoundation.CGFloat? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $value: Combine.Published<CoreFoundation.CGFloat?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($position) public var position: CoreFoundation.CGFloat? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $position: Combine.Published<CoreFoundation.CGFloat?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc deinit
}
extension FioriCharts.ChartGridlineAttributes : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartGridlineAttributes, rhs: FioriCharts.ChartGridlineAttributes) -> Swift.Bool
}
extension FioriCharts.ChartBaselineAttributes {
  public static func == (lhs: FioriCharts.ChartBaselineAttributes, rhs: FioriCharts.ChartBaselineAttributes) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class ChartModel : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying {
  public enum DimensionData<T> : Swift.CustomStringConvertible, Swift.Equatable where T : Swift.Equatable {
    case single(T)
    case array([T])
    public var description: Swift.String {
      get
    }
    public static func == (lhs: FioriCharts.ChartModel.DimensionData<T>, rhs: FioriCharts.ChartModel.DimensionData<T>) -> Swift.Bool
  }
  @Combine.Published @_projectedValueProperty($chartType) public var chartType: FioriCharts.ChartType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $chartType: Combine.Published<FioriCharts.ChartType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var seriesAttributes: [FioriCharts.ChartSeriesAttributes] {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($categoryAxis) public var categoryAxis: FioriCharts.ChartCategoryAxisAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $categoryAxis: Combine.Published<FioriCharts.ChartCategoryAxisAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($numericAxis) public var numericAxis: FioriCharts.ChartNumericAxisAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $numericAxis: Combine.Published<FioriCharts.ChartNumericAxisAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($secondaryNumericAxis) public var secondaryNumericAxis: FioriCharts.ChartNumericAxisAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $secondaryNumericAxis: Combine.Published<FioriCharts.ChartNumericAxisAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($colorsForCategory) public var colorsForCategory: [Swift.Int : [Swift.Int : SwiftUI.Color]] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $colorsForCategory: Combine.Published<[Swift.Int : [Swift.Int : SwiftUI.Color]]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($titlesForAxis) public var titlesForAxis: [FioriCharts.ChartAxisId : Swift.String]? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $titlesForAxis: Combine.Published<[FioriCharts.ChartAxisId : Swift.String]?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var numericAxisLabelFormatHandler: FioriCharts.NumericAxisLabelFormatHandler?
  @Combine.Published @_projectedValueProperty($userInteractionEnabled) public var userInteractionEnabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $userInteractionEnabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($snapToPoint) public var snapToPoint: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $snapToPoint: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($numberOfGridlines) public var numberOfGridlines: Swift.Int {
    get
    set
  }
  public var $numberOfGridlines: Combine.AnyPublisher<Swift.Int, Swift.Never> {
    get
  }
  @Combine.Published @_projectedValueProperty($xAxisLabelsPosition) public var xAxisLabelsPosition: FioriCharts.XAxisLabelsPosition {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $xAxisLabelsPosition: Combine.Published<FioriCharts.XAxisLabelsPosition>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var indexOfStockSeries: Swift.Int {
    get
    set
  }
  public var indexesOfColumnSeries: Foundation.IndexSet {
    get
    set
  }
  public var indexesOfTotalsCategories: Foundation.IndexSet {
    get
    set
  }
  public var indexesOfSecondaryValueAxis: Foundation.IndexSet {
    get
    set
  }
  public var selectionMode: FioriCharts.ChartSelectionMode {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($selectionRequired) public var selectionRequired: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectionRequired: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var selections: [Swift.Int : [Swift.Int]]? {
    get
    set
  }
  public var selectionDidChangePublisher: Combine.AnyPublisher<[Swift.Int : [Swift.Int]]?, Swift.Never> {
    get
  }
  @Combine.Published @_projectedValueProperty($centerPosition) public var centerPosition: CoreFoundation.CGPoint? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $centerPosition: Combine.Published<CoreFoundation.CGPoint?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var scaleX: CoreFoundation.CGFloat {
    get
    set
  }
  public var scaleY: CoreFoundation.CGFloat {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($scaleXEnabled) public var scaleXEnabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $scaleXEnabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($scaleYEnabled) public var scaleYEnabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $scaleYEnabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($readableScaleEnabled) public var readableScaleEnabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $readableScaleEnabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($selectionEnabled) public var selectionEnabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectionEnabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let id: Foundation.UUID
  convenience public init(chartType: FioriCharts.ChartType, data: [[Swift.Double?]], titlesForCategory: [[Swift.String?]]? = nil, colorsForCategory: [Swift.Int : [Swift.Int : SwiftUI.Color]]? = nil, titlesForAxis: [FioriCharts.ChartAxisId : Swift.String]? = nil, labelsForDimension: [[Swift.String?]]? = nil, numberOfGridlines: Swift.Int = 3, selectionRequired: Swift.Bool = false, selectionMode: FioriCharts.ChartSelectionMode = .single, selections: [Swift.Int : [Swift.Int]]? = nil, userInteractionEnabled: Swift.Bool = false, selectionEnabled: Swift.Bool = false, centerPosition: CoreFoundation.CGPoint? = nil, scaleX: CoreFoundation.CGFloat = 1.0, scaleY: CoreFoundation.CGFloat = 1.0, scaleXEnabled: Swift.Bool = false, scaleYEnabled: Swift.Bool = false, readableScaleEnabled: Swift.Bool = true, snapToPoint: Swift.Bool = false, seriesAttributes: [FioriCharts.ChartSeriesAttributes]? = nil, categoryAxis: FioriCharts.ChartCategoryAxisAttributes? = nil, numericAxis: FioriCharts.ChartNumericAxisAttributes? = nil, secondaryNumericAxis: FioriCharts.ChartNumericAxisAttributes? = nil, xAxisLabelsPosition: FioriCharts.XAxisLabelsPosition = .fixedBottom, indexOfStockSeries: Swift.Int = 0, indexesOfSecondaryValueAxis: [Swift.Int]? = nil, indexesOfColumnSeries: [Swift.Int]? = nil, indexesOfTotalsCategories: [Swift.Int]? = nil, numericAxisLabelFormatHandler: FioriCharts.NumericAxisLabelFormatHandler? = nil)
  convenience public init(chartType: FioriCharts.ChartType, data3d: [[[Swift.Double?]]], titlesForCategory: [[Swift.String?]]? = nil, colorsForCategory: [Swift.Int : [Swift.Int : SwiftUI.Color]]? = nil, titlesForAxis: [FioriCharts.ChartAxisId : Swift.String]? = nil, labelsForDimension: [[[Swift.String?]]]? = nil, numberOfGridlines: Swift.Int = 3, selectionMode: FioriCharts.ChartSelectionMode = .single, selections: [Swift.Int : [Swift.Int]]? = nil, userInteractionEnabled: Swift.Bool = false, selectionEnabled: Swift.Bool = false, centerPosition: CoreFoundation.CGPoint? = nil, scaleX: CoreFoundation.CGFloat = 1.0, scaleY: CoreFoundation.CGFloat = 1.0, scaleXEnabled: Swift.Bool = false, scaleYEnabled: Swift.Bool = false, readableScaleEnabled: Swift.Bool = true, snapToPoint: Swift.Bool = false, seriesAttributes: [FioriCharts.ChartSeriesAttributes]? = nil, categoryAxis: FioriCharts.ChartCategoryAxisAttributes? = nil, numericAxis: FioriCharts.ChartNumericAxisAttributes? = nil, secondaryNumericAxis: FioriCharts.ChartNumericAxisAttributes? = nil, xAxisLabelsPosition: FioriCharts.XAxisLabelsPosition = .fixedBottom, indexOfStockSeries: Swift.Int = 0, indexesOfSecondaryValueAxis: [Swift.Int]? = nil, indexesOfColumnSeries: [Swift.Int]? = nil, indexesOfTotalsCategories: [Swift.Int]? = nil, numericAxisLabelFormatHandler: FioriCharts.NumericAxisLabelFormatHandler? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func numOfSeries() -> Swift.Int
  public func numOfCategories() -> Swift.Int
  public func numOfCategories(in seriesId: Swift.Int) -> Swift.Int
  public func plotItemValue(at series: Swift.Int, category: Swift.Int, dimension: Swift.Int) -> Swift.Double?
  public func categoryTitles(at series: Swift.Int, category: Swift.Int) -> Swift.String?
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FioriCharts.ChartModel : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartModel, rhs: FioriCharts.ChartModel) -> Swift.Bool
}
extension FioriCharts.ChartModel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum XAxisLabelsPosition : Swift.String {
  case dynamic
  case fixedBottom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChartSelectionMode : Swift.String {
  case single
  case all
  case multiple
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias NumericAxisLabelFormatHandler = (Swift.Double, FioriCharts.ChartAxisId) -> Swift.String?
public class ChartPointAttributes : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying {
  @Combine.Published @_projectedValueProperty($isHidden) public var isHidden: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isHidden: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($diameter) public var diameter: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $diameter: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($gap) public var gap: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $gap: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @Combine.Published @_projectedValueProperty($strokeColor) public var strokeColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $strokeColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let id: Foundation.UUID
  public init(isHidden: Swift.Bool = false, diameter: Swift.Double = 7, strokeColor: SwiftUI.Color = .preferredColor(.secondaryLabel), gap: Swift.Double = 2)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FioriCharts.ChartPointAttributes : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FioriCharts.ChartPointAttributes : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartPointAttributes, rhs: FioriCharts.ChartPointAttributes) -> Swift.Bool
}
extension FioriCharts.ChartPointAttributes : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ChartSeriesAttributes : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying {
  @Combine.Published @_projectedValueProperty($palette) public var palette: FioriCharts.ChartSeriesPalette {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $palette: Combine.Published<FioriCharts.ChartSeriesPalette>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($point) public var point: FioriCharts.ChartPointAttributes {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $point: Combine.Published<FioriCharts.ChartPointAttributes>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($lineWidth) public var lineWidth: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $lineWidth: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($firstLineCapDiameter) public var firstLineCapDiameter: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $firstLineCapDiameter: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @FioriCharts.PublishedConstrainedValue @_projectedValueProperty($lastLineCapDiameter) public var lastLineCapDiameter: CoreFoundation.CGFloat {
    get
    set
    _modify
  }
  public var $lastLineCapDiameter: Combine.AnyPublisher<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  final public let id: Foundation.UUID
  public init(palette: FioriCharts.ChartSeriesPalette? = nil, lineWidth: Swift.Double = 1, point: FioriCharts.ChartPointAttributes? = nil, firstLineCapDiameter: Swift.Double = 0, lastLineCapDiameter: Swift.Double = 0)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FioriCharts.ChartSeriesAttributes : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartSeriesAttributes, rhs: FioriCharts.ChartSeriesAttributes) -> Swift.Bool
}
extension FioriCharts.ChartSeriesAttributes : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FioriCharts.ChartSeriesAttributes : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ChartSeriesPalette : Combine.ObservableObject, Swift.Identifiable, Foundation.NSCopying {
  public init(colors: [SwiftUI.Color], fillColor: SwiftUI.Color? = nil, labelColor: SwiftUI.Color, positiveMaxColor: SwiftUI.Color, positiveMinColor: SwiftUI.Color, negativeMaxColor: SwiftUI.Color, negativeMinColor: SwiftUI.Color)
  convenience public init(colors: [SwiftUI.Color], labelColor: SwiftUI.Color)
  convenience public init(colors: [SwiftUI.Color], fillColor: SwiftUI.Color)
  convenience public init(colors: [SwiftUI.Color])
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @Combine.Published @_projectedValueProperty($colors) public var colors: [SwiftUI.Color] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $colors: Combine.Published<[SwiftUI.Color]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var fillColor: SwiftUI.Color {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($labelColor) public var labelColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $labelColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($positiveMaxColor) public var positiveMaxColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $positiveMaxColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($positiveMinColor) public var positiveMinColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $positiveMinColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($negativeMaxColor) public var negativeMaxColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $negativeMaxColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($negativeMinColor) public var negativeMinColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $negativeMinColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let id: Foundation.UUID
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension FioriCharts.ChartSeriesPalette : Swift.Equatable {
  public static func == (lhs: FioriCharts.ChartSeriesPalette, rhs: FioriCharts.ChartSeriesPalette) -> Swift.Bool
}
extension FioriCharts.ChartSeriesPalette : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum ChartType : Swift.String {
  case line
  case column
  case combo
  case bar
  case stackedColumn
  case waterfall
  case area
  case scatter
  case bubble
  case micro_area
  case micro_bullet
  case micro_column
  case micro_harvey_ball
  case micro_radial
  case stock
  case donut
  case stackedBar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct ChartView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ chartModel: FioriCharts.ChartModel, noDataView: FioriCharts.NoDataView<Content>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11FioriCharts9ChartViewV4bodyQrvp", 0) __<Content>
}
extension FioriCharts.ChartView where Content == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(_ chartModel: FioriCharts.ChartModel)
}
extension SwiftUI.View {
  public func chartSeriesShapeStyle(_ value: [Swift.Int : FioriCharts.AnyShapeStyle]) -> some SwiftUI.View
  
  public func chartCategoryShapeStyle(_ value: [Swift.Int : [Swift.Int : FioriCharts.AnyShapeStyle]]) -> some SwiftUI.View
  
}
public struct NoDataView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s11FioriCharts10NoDataViewV4bodyQrvp", 0) __<Content>
}
extension FioriCharts.NoDataView where Content == SwiftUI.EmptyView {
  public init()
}
@propertyWrapper public struct PublishedConstrainedValue<Value> where Value : Swift.Strideable {
  public var projectedValue: Combine.AnyPublisher<Value, Swift.Never> {
    get
  }
  @available(*, unavailable, message: "@PublishedConstrainedValue is only available on properties of classes")
  public var wrappedValue: Value {
    get
    set
  }
  public static subscript<EnclosingSelf>(_enclosingInstance object: EnclosingSelf, wrapped wrappedKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, Value>, storage storageKeyPath: Swift.ReferenceWritableKeyPath<EnclosingSelf, FioriCharts.PublishedConstrainedValue<Value>>) -> Value where EnclosingSelf : Combine.ObservableObject, EnclosingSelf.ObjectWillChangePublisher == Combine.ObservableObjectPublisher {
    get
    set
  }
}
public enum Tests {
  public static let lineModels: [FioriCharts.ChartModel]
  public static let lineModelsDesc: [Swift.String]
  public static let waterfallModels: [FioriCharts.ChartModel]
  public static let waterfallModelsDesc: [Swift.String]
  public static let bubbleModels: [FioriCharts.ChartModel]
  public static let bubbleModelsDesc: [Swift.String]
  public static let scatterModels: [FioriCharts.ChartModel]
  public static let scatterModelsDesc: [Swift.String]
  public static let comboModels: [FioriCharts.ChartModel]
  public static let comboModelsDesc: [Swift.String]
  public static let bulletModles: [FioriCharts.ChartModel]
  public static let bulletModlesDesc: [Swift.String]
  public static let columnModels: [FioriCharts.ChartModel]
  public static let columnModelsDesc: [Swift.String]
  public static let harveyBallModels: [FioriCharts.ChartModel]
  public static let harveyBallModelsDesc: [Swift.String]
  public static let donutModels: [FioriCharts.ChartModel]
  public static let donutModelsDesc: [Swift.String]
  public static let radialModels: [FioriCharts.ChartModel]
  public static let radialModelsDesc: [Swift.String]
  public static let stockModels: [FioriCharts.ChartModel]
  public static let stockModelsDesc: [Swift.String]
  public static let allCases: [FioriCharts.ChartModel]
}
extension SwiftUI.View {
  public func ifApply(_ condition: Swift.Bool, content: (Self) -> some View) -> some SwiftUI.View
  
}
extension FioriCharts.ChartAxisId : Swift.Equatable {}
extension FioriCharts.ChartAxisId : Swift.Hashable {}
extension FioriCharts.ChartAxisId : Swift.RawRepresentable {}
extension FioriCharts.ChartCategoryAxisLabelLayoutStyle : Swift.Equatable {}
extension FioriCharts.ChartCategoryAxisLabelLayoutStyle : Swift.Hashable {}
extension FioriCharts.XAxisLabelsPosition : Swift.Equatable {}
extension FioriCharts.XAxisLabelsPosition : Swift.Hashable {}
extension FioriCharts.XAxisLabelsPosition : Swift.RawRepresentable {}
extension FioriCharts.ChartSelectionMode : Swift.Equatable {}
extension FioriCharts.ChartSelectionMode : Swift.Hashable {}
extension FioriCharts.ChartSelectionMode : Swift.RawRepresentable {}
extension FioriCharts.ChartType : Swift.Equatable {}
extension FioriCharts.ChartType : Swift.Hashable {}
extension FioriCharts.ChartType : Swift.RawRepresentable {}
