// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios16.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FioriSwiftUICore
import AppKit
import Combine
import Contacts
import DeveloperToolsSupport
import FioriCharts
import FioriThemeManager
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _MapKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public struct AccessoryIcon {
  public init(@SwiftUI.ViewBuilder accessoryIcon: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.AccessoryIcon {
  public init(accessoryIcon: SwiftUI.Image? = nil)
}
extension FioriSwiftUICore.AccessoryIcon {
  public init(_ configuration: FioriSwiftUICore.AccessoryIconConfiguration)
}
extension FioriSwiftUICore.AccessoryIcon : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13AccessoryIconV4bodyQrvp", 0) __
}
public struct AccessoryIconBaseStyle : FioriSwiftUICore.AccessoryIconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AccessoryIconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22AccessoryIconBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct AccessoryIconFioriStyle : FioriSwiftUICore.AccessoryIconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AccessoryIconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013AccessoryIconA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol AccessoryIconStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.AccessoryIconConfiguration) -> Self.Body
}
public struct AccessoryIconConfiguration {
  public let accessoryIcon: FioriSwiftUICore.AccessoryIconConfiguration.AccessoryIcon
  public typealias AccessoryIcon = FioriSwiftUICore.ConfigurationViewWrapper
}
public enum AccessoryType : Swift.Int, Swift.CaseIterable {
  case none, disclosure, checkmark, detail
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FioriSwiftUICore.AccessoryType]
  public typealias RawValue = Swift.Int
  public static var allCases: [FioriSwiftUICore.AccessoryType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct Action {
  public init(@SwiftUI.ViewBuilder action: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Action {
  public init(action: FioriSwiftUICore.FioriButton? = nil)
}
extension FioriSwiftUICore.Action {
  public init(_ configuration: FioriSwiftUICore.ActionConfiguration)
}
extension FioriSwiftUICore.Action : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore6ActionV4bodyQrvp", 0) __
}
public struct ActionBaseStyle : FioriSwiftUICore.ActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15ActionBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct ActionFioriStyle : FioriSwiftUICore.ActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore06ActionA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol ActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.ActionConfiguration) -> Self.Body
}
public struct ActionConfiguration {
  public let action: FioriSwiftUICore.ActionConfiguration.Action
  public typealias Action = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct ActivationScreen<Title, DescriptionText, Footnote, ActionView, SecondaryActionView, TextInputView> where Title : SwiftUI.View, DescriptionText : SwiftUI.View, Footnote : SwiftUI.View, ActionView : SwiftUI.View, SecondaryActionView : SwiftUI.View, TextInputView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where Title == SwiftUI.Text, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, SecondaryActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, TextInputView == SwiftUI._ConditionalContent<FioriSwiftUICore.TextInput, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.ActivationScreenModel)
  public init(title: Swift.String, descriptionText: Swift.String? = nil, footnote: Swift.String? = nil, action: FioriSwiftUICore._Action? = nil, secondaryAction: FioriSwiftUICore._Action? = nil, textInput: FioriSwiftUICore.TextInput? = nil)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where ActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.ActivationScreen where ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ActivationScreen where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ActivationScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.ActivationScreen : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16ActivationScreenV4bodyQrvp", 0) __<Title, DescriptionText, Footnote, ActionView, SecondaryActionView, TextInputView>
}
extension FioriSwiftUICore.ActivationScreenModel {
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var secondaryAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var textInput: (any FioriSwiftUICore.TextInputModel)? {
    get
  }
}
public struct ActivityButtonView : SwiftUI.View {
  public var image: SwiftUI.Image
  public var handle: () -> Swift.Void
  public init(image: SwiftUI.Image, handle: @escaping () -> Swift.Void)
  public init(_ activity: FioriSwiftUICore.ActivityItemDataType, handle: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18ActivityButtonViewV4bodyQrvp", 0) __
}
public struct ActivityButtonStyle : SwiftUI.ButtonStyle {
  public func makeBody(configuration: FioriSwiftUICore.ActivityButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19ActivityButtonStyleV8makeBody13configurationQr0B2UI0eF13ConfigurationV_tF", 0) __
}
public struct ActivityControlLayoutContainer<Data, ID, Content> : SwiftUI.View where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30ActivityControlLayoutContainerV4bodyQrvp", 0) __<Data, ID, Content>
}
extension FioriSwiftUICore.ActivityControlLayoutContainer {
  public init(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, content: @escaping (Data.Element) -> Content)
}
extension FioriSwiftUICore.ActivityControlLayoutContainer where ID == Data.Element.ID, Data.Element : Swift.Identifiable {
  public init(_ data: Data, content: @escaping (Data.Element) -> Content)
}
public struct ActivityItem<Icon, Subtitle> where Icon : SwiftUI.View, Subtitle : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.ActivityItem where Icon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.ActivityItemModel)
  public init(icon: SwiftUI.Image? = nil, subtitle: Swift.String? = nil)
}
public enum ActivityItemType {
  case phone
  case email
  case message
  case videoCall
  case detail
  case custom(SwiftUI.Image)
  public var icon: SwiftUI.Image {
    get
  }
}
extension FioriSwiftUICore.ActivityItemType : Swift.Equatable {
  public static func == (lhs: FioriSwiftUICore.ActivityItemType, rhs: FioriSwiftUICore.ActivityItemType) -> Swift.Bool
}
public struct ActivityItemDataType : Swift.Identifiable {
  public var type: FioriSwiftUICore.ActivityItemType {
    get
  }
  public var data: Swift.String? {
    get
  }
  public var id: Foundation.UUID {
    get
  }
  public var icon: SwiftUI.Image {
    get
  }
  public init(type: FioriSwiftUICore.ActivityItemType, data: Swift.String? = nil)
  public typealias ID = Foundation.UUID
}
extension FioriSwiftUICore.ActivityItem where Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.ActivityItem where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.ActivityItem where Icon == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView {
  public init()
}
extension FioriSwiftUICore.ActivityItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12ActivityItemV4bodyQrvp", 0) __<Icon, Subtitle>
}
public struct ActivityItems {
  public init(model: any FioriSwiftUICore.ActivityItemsModel)
  public init(actionItems: [FioriSwiftUICore.ActivityItemDataType]? = nil, didSelectActivityItem: ((FioriSwiftUICore.ActivityItemDataType) -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.ActivityItems : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ActivityItemsV4bodyQrvp", 0) __
}
public struct AlertConfiguration {
  @available(iOS 15, macOS 12, *)
  public init(title: SwiftUI.Text, @SwiftUI.ViewBuilder message: () -> some View, action: FioriSwiftUICore.AlertConfiguration.Action, secondaryAction: FioriSwiftUICore.AlertConfiguration.Action)
  @available(iOS, deprecated: 15)
  @available(macOS, deprecated: 12)
  public init(title: SwiftUI.Text, message: SwiftUI.Text?, action: FioriSwiftUICore.AlertConfiguration.Action, secondaryAction: FioriSwiftUICore.AlertConfiguration.Action)
  public init(title: Swift.String, message: Swift.String? = nil, action: FioriSwiftUICore.AlertConfiguration.Action, secondaryAction: FioriSwiftUICore.AlertConfiguration.Action)
}
extension FioriSwiftUICore.AlertConfiguration {
  public init(title: SwiftUI.Text, action: FioriSwiftUICore.AlertConfiguration.Action, secondaryAction: FioriSwiftUICore.AlertConfiguration.Action)
}
extension FioriSwiftUICore.AlertConfiguration {
  public struct Action {
    @available(iOS 15, macOS 12, *)
    public init(@SwiftUI.ViewBuilder label: () -> some View, didSelect: (() -> Swift.Void)? = nil)
    @available(iOS, deprecated: 15)
    @available(macOS, deprecated: 12)
    public init(label: SwiftUI.Text, didSelect: (() -> Swift.Void)? = nil)
    public init(label: Swift.String, didSelect: (() -> Swift.Void)? = nil)
  }
}
public struct AnyViewModifier : SwiftUI.ViewModifier {
  public init(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> some View)
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.AnyViewModifier.Content) -> SwiftUI.AnyView
  public typealias Body = SwiftUI.AnyView
}
public struct Attribute {
  public init(@SwiftUI.ViewBuilder attribute: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Attribute {
  public init(attribute: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Attribute {
  public init(_ configuration: FioriSwiftUICore.AttributeConfiguration)
}
extension FioriSwiftUICore.Attribute : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9AttributeV4bodyQrvp", 0) __
}
public struct AttributeBaseStyle : FioriSwiftUICore.AttributeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AttributeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18AttributeBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct AttributeFioriStyle : FioriSwiftUICore.AttributeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AttributeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore09AttributeA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol AttributeStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.AttributeConfiguration) -> Self.Body
}
public struct AttributeConfiguration {
  public let attribute: FioriSwiftUICore.AttributeConfiguration.Attribute
  public typealias Attribute = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct AttributedText : SwiftUI.View {
  public init(attributedText: Foundation.NSAttributedString?, configuration: ((UIKit.UITextView) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14AttributedTextV4bodyQrvp", 0) __
}
public struct AvatarStack {
  public init(model: any FioriSwiftUICore.AvatarStackModel)
  public init(avatars: [FioriSwiftUICore.TextOrIcon]? = nil)
}
public struct Avatars {
  public init(@FioriSwiftUICore.AvatarsBuilder avatars: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Avatars {
  public init(avatars: [FioriSwiftUICore.TextOrIcon] = [])
}
extension FioriSwiftUICore.Avatars {
  public init(_ configuration: FioriSwiftUICore.AvatarsConfiguration)
}
extension FioriSwiftUICore.Avatars : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7AvatarsV4bodyQrvp", 0) __
}
public protocol AvatarList : FioriSwiftUICore._ViewEmptyChecking, SwiftUI.View {
  associatedtype V : SwiftUI.View
  var count: Swift.Int { get }
  func view(at index: Swift.Int) -> Self.V
  var borderColor: SwiftUI.Color { get }
  var borderWidth: CoreFoundation.CGFloat { get }
  var isCircular: Swift.Bool { get }
  var size: CoreFoundation.CGSize { get }
}
extension FioriSwiftUICore.AvatarList {
  public func buildAvatar(_ avatar: Self.V) -> some SwiftUI.View
  
  public var body: some SwiftUI.View {
    get
  }
}
extension FioriSwiftUICore.AvatarList {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct SingleAvatar<Content> : FioriSwiftUICore.AvatarList where Content : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var borderColor: SwiftUI.Color {
    get
  }
  public var borderWidth: CoreFoundation.CGFloat {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10AvatarListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.SingleAvatar<Content>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12SingleAvatarV4view2atQrSi_tF", 0) __<Content>
}
public struct ConditionalSingleAvatar<TrueContent, FalseContent> : FioriSwiftUICore.AvatarList where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var borderColor: SwiftUI.Color {
    get
  }
  public var borderWidth: CoreFoundation.CGFloat {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10AvatarListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.ConditionalSingleAvatar<TrueContent, FalseContent>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23ConditionalSingleAvatarV4view2atQrSi_tF", 0) __<TrueContent, FalseContent>
}
public struct PairAvatar<First, Second> : FioriSwiftUICore.AvatarList where First : SwiftUI.View, Second : FioriSwiftUICore.AvatarList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var borderColor: SwiftUI.Color {
    get
  }
  public var borderWidth: CoreFoundation.CGFloat {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10AvatarListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.PairAvatar<First, Second>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10PairAvatarV4view2atQrSi_tF", 0) __<First, Second>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public enum AvatarsBuilder {
  public static func buildBlock() -> SwiftUI.EmptyView
  public static func buildBlock(_ content: some View) -> some FioriSwiftUICore.AvatarList
  
  public static func buildBlock(_ c0: some View, _ c1: some View) -> some FioriSwiftUICore.AvatarList
  
  public static func buildIf(_ content: (some View)?) -> some FioriSwiftUICore.AvatarList
  
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> FioriSwiftUICore.ConditionalSingleAvatar<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> FioriSwiftUICore.ConditionalSingleAvatar<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
}
extension FioriSwiftUICore.AvatarStack : FioriSwiftUICore.AvatarList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var borderColor: SwiftUI.Color {
    get
  }
  public var borderWidth: CoreFoundation.CGFloat {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10AvatarListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.AvatarStack>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11AvatarStackV4view2atQrSi_tF", 0) __
}
extension SwiftUI.EnvironmentValues {
  public var avatarBorderColor: SwiftUI.Color {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var avatarBorderWidth: CoreFoundation.CGFloat {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var isAvatarCircular: Swift.Bool {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var avatarSize: CoreFoundation.CGSize {
    get
    set
  }
}
extension SwiftUI.View {
  public func avatarBorderColor(_ color: SwiftUI.Color) -> some SwiftUI.View
  
  public func avatarSize(_ size: CoreFoundation.CGSize) -> some SwiftUI.View
  
  public func isAvatarCircular(_ isCircular: Swift.Bool) -> some SwiftUI.View
  
  public func avatarBorderWidth(_ borderWidth: CoreFoundation.CGFloat) -> some SwiftUI.View
  
}
public struct AvatarsBaseStyle : FioriSwiftUICore.AvatarsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AvatarsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16AvatarsBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct AvatarsFioriStyle : FioriSwiftUICore.AvatarsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AvatarsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore07AvatarsA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol AvatarsStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.AvatarsConfiguration) -> Self.Body
}
public struct AvatarsConfiguration {
  public let avatars: FioriSwiftUICore.AvatarsConfiguration.Avatars
  public typealias Avatars = FioriSwiftUICore.ConfigurationViewWrapper
}
extension FioriSwiftUICore.TagStack {
  public init(_ tags: [Foundation.AttributedString])
}
extension FioriSwiftUICore.FootnoteIconStack {
  public init(_ footnoteIcons: [FioriSwiftUICore.TextOrIcon])
}
public struct BannerMessage {
  public init(@SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder closeAction: () -> any SwiftUI.View = { FioriButton { _ in Image(systemName: "xmark") } }, @SwiftUI.ViewBuilder topDivider: () -> any SwiftUI.View = { Rectangle().fill(Color.clear) }, bannerTapAction: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.BannerMessage {
  public init(icon: SwiftUI.Image? = nil, title: Foundation.AttributedString, closeAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in Image(systemName: "xmark") }, @SwiftUI.ViewBuilder topDivider: () -> any SwiftUI.View = { Rectangle().fill(Color.clear) }, bannerTapAction: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.BannerMessage {
  public init(_ configuration: FioriSwiftUICore.BannerMessageConfiguration)
}
extension FioriSwiftUICore.BannerMessage : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13BannerMessageV4bodyQrvp", 0) __
}
public struct BannerMessageBaseStyle : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22BannerMessageBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension SwiftUI.View {
  public func bannerMessageView(isPresented: SwiftUI.Binding<Swift.Bool>, pushContentDown: SwiftUI.Binding<Swift.Bool> = .constant(false), @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, title: Foundation.AttributedString, bannerTapped: (() -> Swift.Void)? = nil) -> some SwiftUI.View
  
  public func bannerMessageView(isPresented: SwiftUI.Binding<Swift.Bool>, pushContentDown: SwiftUI.Binding<Swift.Bool> = .constant(false), @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, title: Swift.String, bannerTapped: (() -> Swift.Void)? = nil) -> some SwiftUI.View
  
  public func bannerMessageView(isPresented: SwiftUI.Binding<Swift.Bool>, pushContentDown: SwiftUI.Binding<Swift.Bool> = .constant(false), @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, bannerTapped: (() -> Swift.Void)? = nil) -> some SwiftUI.View
  
}
public protocol BannerMessageStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> Self.Body
}
public struct BannerMessageConfiguration {
  public let icon: FioriSwiftUICore.BannerMessageConfiguration.Icon
  public let title: FioriSwiftUICore.BannerMessageConfiguration.Title
  public let closeAction: FioriSwiftUICore.BannerMessageConfiguration.CloseAction
  public let topDivider: FioriSwiftUICore.BannerMessageConfiguration.TopDivider
  public let bannerTapAction: (() -> Swift.Void)?
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias CloseAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias TopDivider = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct BannerMessageFioriStyle : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013BannerMessageA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}

public struct Card {
  public init(@SwiftUI.ViewBuilder mediaImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.IconBuilder icons: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder headerAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder counter: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder kpi: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder kpiCaption: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder cardBody: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder action: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder secondaryAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder tertiaryAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder overflowAction: () -> any SwiftUI.View = { FioriButton { _ in Image(systemName: "ellipsis") } })
}
extension FioriSwiftUICore.Card {
  public init(mediaImage: SwiftUI.Image? = nil, description: Foundation.AttributedString? = nil, title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, icons: [FioriSwiftUICore.TextOrIcon] = [], detailImage: SwiftUI.Image? = nil, headerAction: FioriSwiftUICore.FioriButton? = nil, counter: Foundation.AttributedString? = nil, @SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() }, kpi: FioriSwiftUICore.KPIItemData? = nil, kpiCaption: Foundation.AttributedString? = nil, @SwiftUI.ViewBuilder cardBody: () -> any SwiftUI.View = { EmptyView() }, action: FioriSwiftUICore.FioriButton? = nil, secondaryAction: FioriSwiftUICore.FioriButton? = nil, tertiaryAction: FioriSwiftUICore.FioriButton? = nil, overflowAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in Image(systemName: "ellipsis") })
}
extension FioriSwiftUICore.Card {
  public init(_ configuration: FioriSwiftUICore.CardConfiguration)
}
extension FioriSwiftUICore.Card : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4CardV4bodyQrvp", 0) __
}
public struct CardBody {
  public init(@SwiftUI.ViewBuilder cardBody: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.CardBody {
  public init(_ configuration: FioriSwiftUICore.CardBodyConfiguration)
}
extension FioriSwiftUICore.CardBody : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8CardBodyV4bodyQrvp", 0) __
}
public struct CardBodyBaseStyle : FioriSwiftUICore.CardBodyStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardBodyConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17CardBodyBaseStyleV04makeE0yQrAA0dE13ConfigurationVF", 0) __
}
public struct CardBodyFioriStyle : FioriSwiftUICore.CardBodyStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardBodyConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08CardBodyA5StyleV04makeE0yQrAA0dE13ConfigurationVF", 0) __
}

public protocol CardBodyStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardBodyConfiguration) -> Self.Body
}
public struct CardBodyConfiguration {
  public let cardBody: FioriSwiftUICore.CardBodyConfiguration.CardBody
  public typealias CardBody = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardExtHeader {
  public init(@SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder kpi: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder kpiCaption: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.CardExtHeader {
  public init(@SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() }, kpi: FioriSwiftUICore.KPIItemData? = nil, kpiCaption: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.CardExtHeader {
  public init(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration)
}
extension FioriSwiftUICore.CardExtHeader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13CardExtHeaderV4bodyQrvp", 0) __
}
public struct CardExtHeaderBaseStyle : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22CardExtHeaderBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}






public protocol CardExtHeaderStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> Self.Body
}
public struct CardExtHeaderConfiguration {
  public let row1: FioriSwiftUICore.CardExtHeaderConfiguration.Row1
  public let row2: FioriSwiftUICore.CardExtHeaderConfiguration.Row2
  public let row3: FioriSwiftUICore.CardExtHeaderConfiguration.Row3
  public let kpi: FioriSwiftUICore.CardExtHeaderConfiguration.Kpi
  public let kpiCaption: FioriSwiftUICore.CardExtHeaderConfiguration.KpiCaption
  public typealias Row1 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row2 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row3 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Kpi = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias KpiCaption = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardExtHeaderFioriStyle : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013CardExtHeaderA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct CardFooter {
  public init(@SwiftUI.ViewBuilder action: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder secondaryAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder tertiaryAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder overflowAction: () -> any SwiftUI.View = { FioriButton { _ in Image(systemName: "ellipsis") } })
}
extension FioriSwiftUICore.CardFooter {
  public init(action: FioriSwiftUICore.FioriButton? = nil, secondaryAction: FioriSwiftUICore.FioriButton? = nil, tertiaryAction: FioriSwiftUICore.FioriButton? = nil, overflowAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in Image(systemName: "ellipsis") })
}
extension FioriSwiftUICore.CardFooter {
  public init(_ configuration: FioriSwiftUICore.CardFooterConfiguration)
}
extension FioriSwiftUICore.CardFooter : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10CardFooterV4bodyQrvp", 0) __
}
public struct CardFooterBaseStyle : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardFooterBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}


















public protocol CardFooterStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> Self.Body
}
public struct CardFooterConfiguration {
  public let action: FioriSwiftUICore.CardFooterConfiguration.Action
  public let secondaryAction: FioriSwiftUICore.CardFooterConfiguration.SecondaryAction
  public let tertiaryAction: FioriSwiftUICore.CardFooterConfiguration.TertiaryAction
  public let overflowAction: FioriSwiftUICore.CardFooterConfiguration.OverflowAction
  public typealias Action = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias SecondaryAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias TertiaryAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias OverflowAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardFooterFioriStyle : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010CardFooterA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct CardHeader {
  public init(@SwiftUI.ViewBuilder mediaImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.IconBuilder icons: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder headerAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder counter: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder kpi: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder kpiCaption: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.CardHeader {
  public init(mediaImage: SwiftUI.Image? = nil, description: Foundation.AttributedString? = nil, title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, icons: [FioriSwiftUICore.TextOrIcon] = [], detailImage: SwiftUI.Image? = nil, headerAction: FioriSwiftUICore.FioriButton? = nil, counter: Foundation.AttributedString? = nil, @SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() }, kpi: FioriSwiftUICore.KPIItemData? = nil, kpiCaption: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.CardHeader {
  public init(_ configuration: FioriSwiftUICore.CardHeaderConfiguration)
}
extension FioriSwiftUICore.CardHeader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10CardHeaderV4bodyQrvp", 0) __
}
public struct CardHeaderBaseStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardHeaderBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}






public protocol CardHeaderStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> Self.Body
}
public struct CardHeaderConfiguration {
  public let mediaImage: FioriSwiftUICore.CardHeaderConfiguration.MediaImage
  public let description: FioriSwiftUICore.CardHeaderConfiguration.Description
  public let title: FioriSwiftUICore.CardHeaderConfiguration.Title
  public let subtitle: FioriSwiftUICore.CardHeaderConfiguration.Subtitle
  public let icons: FioriSwiftUICore.CardHeaderConfiguration.Icons
  public let detailImage: FioriSwiftUICore.CardHeaderConfiguration.DetailImage
  public let headerAction: FioriSwiftUICore.CardHeaderConfiguration.HeaderAction
  public let counter: FioriSwiftUICore.CardHeaderConfiguration.Counter
  public let row1: FioriSwiftUICore.CardHeaderConfiguration.Row1
  public let row2: FioriSwiftUICore.CardHeaderConfiguration.Row2
  public let row3: FioriSwiftUICore.CardHeaderConfiguration.Row3
  public let kpi: FioriSwiftUICore.CardHeaderConfiguration.Kpi
  public let kpiCaption: FioriSwiftUICore.CardHeaderConfiguration.KpiCaption
  public typealias MediaImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icons = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias HeaderAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Counter = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row1 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row2 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row3 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Kpi = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias KpiCaption = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardHeaderFioriStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010CardHeaderA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct CardMainHeader {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.IconBuilder icons: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder headerAction: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder counter: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.CardMainHeader {
  public init(title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, icons: [FioriSwiftUICore.TextOrIcon] = [], detailImage: SwiftUI.Image? = nil, headerAction: FioriSwiftUICore.FioriButton? = nil, counter: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.CardMainHeader {
  public init(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration)
}
extension FioriSwiftUICore.CardMainHeader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14CardMainHeaderV4bodyQrvp", 0) __
}
public struct CardMainHeaderBaseStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23CardMainHeaderBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}










public protocol CardMainHeaderStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> Self.Body
}
public struct CardMainHeaderConfiguration {
  public let title: FioriSwiftUICore.CardMainHeaderConfiguration.Title
  public let subtitle: FioriSwiftUICore.CardMainHeaderConfiguration.Subtitle
  public let icons: FioriSwiftUICore.CardMainHeaderConfiguration.Icons
  public let detailImage: FioriSwiftUICore.CardMainHeaderConfiguration.DetailImage
  public let headerAction: FioriSwiftUICore.CardMainHeaderConfiguration.HeaderAction
  public let counter: FioriSwiftUICore.CardMainHeaderConfiguration.Counter
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icons = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias HeaderAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Counter = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardMainHeaderFioriStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014CardMainHeaderA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct CardMedia {
  public init(@SwiftUI.ViewBuilder mediaImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.CardMedia {
  public init(mediaImage: SwiftUI.Image? = nil, description: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.CardMedia {
  public init(_ configuration: FioriSwiftUICore.CardMediaConfiguration)
}
extension FioriSwiftUICore.CardMedia : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9CardMediaV4bodyQrvp", 0) __
}
public struct CardMediaBaseStyle : FioriSwiftUICore.CardMediaStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMediaConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18CardMediaBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}









public protocol CardMediaStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardMediaConfiguration) -> Self.Body
}
public struct CardMediaConfiguration {
  public let mediaImage: FioriSwiftUICore.CardMediaConfiguration.MediaImage
  public let description: FioriSwiftUICore.CardMediaConfiguration.Description
  public typealias MediaImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardMediaFioriStyle : FioriSwiftUICore.CardMediaStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMediaConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore09CardMediaA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct CardBaseStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13CardBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct CardCardStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04CardD5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardCardStyle {
  public static var card: FioriSwiftUICore.CardCardStyle {
    get
  }
}
public enum CardTests {
  public static let cardSamples: [FioriSwiftUICore.Card]
  public static let cardFooterSamples: [FioriSwiftUICore.Card]
}
public protocol CardStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> Self.Body
}
public struct CardConfiguration {
  public let mediaImage: FioriSwiftUICore.CardConfiguration.MediaImage
  public let description: FioriSwiftUICore.CardConfiguration.Description
  public let title: FioriSwiftUICore.CardConfiguration.Title
  public let subtitle: FioriSwiftUICore.CardConfiguration.Subtitle
  public let icons: FioriSwiftUICore.CardConfiguration.Icons
  public let detailImage: FioriSwiftUICore.CardConfiguration.DetailImage
  public let headerAction: FioriSwiftUICore.CardConfiguration.HeaderAction
  public let counter: FioriSwiftUICore.CardConfiguration.Counter
  public let row1: FioriSwiftUICore.CardConfiguration.Row1
  public let row2: FioriSwiftUICore.CardConfiguration.Row2
  public let row3: FioriSwiftUICore.CardConfiguration.Row3
  public let kpi: FioriSwiftUICore.CardConfiguration.Kpi
  public let kpiCaption: FioriSwiftUICore.CardConfiguration.KpiCaption
  public let cardBody: FioriSwiftUICore.CardConfiguration.CardBody
  public let action: FioriSwiftUICore.CardConfiguration.Action
  public let secondaryAction: FioriSwiftUICore.CardConfiguration.SecondaryAction
  public let tertiaryAction: FioriSwiftUICore.CardConfiguration.TertiaryAction
  public let overflowAction: FioriSwiftUICore.CardConfiguration.OverflowAction
  public typealias MediaImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icons = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias HeaderAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Counter = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row1 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row2 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Row3 = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Kpi = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias KpiCaption = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias CardBody = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Action = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias SecondaryAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias TertiaryAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias OverflowAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct CardFioriStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04CardA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct Carousel<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(numberOfColumns: Swift.Int = 1, spacing: CoreFoundation.CGFloat = 8, alignment: SwiftUI.VerticalAlignment = .top, isSnapping: Swift.Bool = true, @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8CarouselV4bodyQrvp", 0) __<Content>
}



public struct CloseAction {
  public init(@SwiftUI.ViewBuilder closeAction: () -> any SwiftUI.View = { FioriButton { _ in Image(systemName: "xmark") } })
}
extension FioriSwiftUICore.CloseAction {
  public init(closeAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in Image(systemName: "xmark") })
}
extension FioriSwiftUICore.CloseAction {
  public init(_ configuration: FioriSwiftUICore.CloseActionConfiguration)
}
extension FioriSwiftUICore.CloseAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11CloseActionV4bodyQrvp", 0) __
}
public struct CloseActionBaseStyle : FioriSwiftUICore.CloseActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CloseActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20CloseActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct CloseActionFioriStyle : FioriSwiftUICore.CloseActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CloseActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore011CloseActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol CloseActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CloseActionConfiguration) -> Self.Body
}
public struct CloseActionConfiguration {
  public let closeAction: FioriSwiftUICore.CloseActionConfiguration.CloseAction
  public typealias CloseAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct ColumnAttribute {
  public enum Width {
    case fixed(CoreFoundation.CGFloat)
    case flexible
    case infinity
  }
  public var textAlignment: SwiftUI.TextAlignment
  public var width: FioriSwiftUICore.ColumnAttribute.Width
  public var isReadonly: Swift.Bool?
  public var dateFormatter: Foundation.DateFormatter?
  public var durationTextFormat: Swift.String {
    get
    set
  }
  public func dateFormatter(for dataItemType: FioriSwiftUICore.DataItemType) -> Foundation.DateFormatter
  public init(textAlignment: SwiftUI.TextAlignment = .leading, width: FioriSwiftUICore.ColumnAttribute.Width = .flexible, isReadonly: Swift.Bool? = nil)
}
public protocol TitleComponent {
  var title: Swift.String { get }
}
public protocol SubtitleComponent {
  var subtitle: Swift.String? { get }
}
public protocol TagsComponent {
  var tags: [Swift.String]? { get }
}
public protocol FootnoteComponent {
  var footnote: Swift.String? { get }
}
public protocol DescriptionTextComponent {
  var descriptionText: Swift.String? { get }
}
public protocol DetailImageComponent {
  var detailImage: SwiftUI.Image? { get }
}
public protocol AttributeComponent {
  var attribute: Swift.String? { get }
}
public protocol SecondaryAttributeComponent {
  var secondaryAttribute: Swift.String? { get }
}
public protocol TimestampComponent {
  var timestamp: Swift.String? { get }
}
public protocol SecondaryTimestampComponent {
  var secondaryTimestamp: Swift.String? { get }
}
public protocol TrendComponent {
  var trend: Swift.String? { get }
}
public protocol TrendImageComponent {
  var trendImage: SwiftUI.Image? { get }
}
public protocol StatusComponent {
  var status: FioriSwiftUICore.TextOrIcon? { get }
}
public protocol SubstatusComponent {
  var substatus: FioriSwiftUICore.TextOrIcon? { get }
}
public protocol BodyTextComponent {
  var bodyText: Swift.String? { get }
}
public protocol BodyAttributedTextComponent {
  var bodyAttributedText: Foundation.NSAttributedString? { get }
}
public protocol IconComponent {
  var icon: SwiftUI.Image? { get }
}
public protocol AccessoryIconComponent {
  var accessoryIcon: SwiftUI.Image? { get }
}
public protocol IconsComponent {
  var icons: [FioriSwiftUICore.TextOrIcon]? { get }
}
public protocol ActionTitleComponent {
  var actionTitle: Swift.String? { get }
}
public protocol FirstActionTitleComponent {
  var firstActionTitle: Swift.String? { get }
}
public protocol SecondActionTitleComponent {
  var secondActionTitle: Swift.String? { get }
}
public protocol SeriesTitlesComponent {
  var seriesTitles: [Swift.String] { get }
}
public protocol KeyComponent {
  var key: Swift.String { get }
}
public protocol ValueComponent {
  var value: Swift.String? { get }
}
public protocol ValuesComponent {
  var values: [Swift.String] { get }
}
public protocol ValueAxisTitleComponent {
  var valueAxisTitle: Swift.String? { get }
}
public protocol SecondaryValuesAxisTitleComponent {
  var secondaryValuesAxisTitle: Swift.String? { get }
}
public protocol CategoryAxisTitleComponent {
  var categoryAxisTitle: Swift.String? { get }
}
public protocol EmptyTextComponent {
  var emptyText: Swift.String? { get }
}
public protocol KpiComponent {
  var kpi: Swift.String? { get }
}
public protocol PlaceholderComponent {
  var placeholder: Swift.String? { get }
}
public protocol LowerBoundTitleComponent {
  var lowerBoundTitle: Swift.String? { get }
}
public protocol UpperBoundTitleComponent {
  var upperBoundTitle: Swift.String? { get }
}
public protocol AvatarsComponent {
  var avatars: [FioriSwiftUICore.TextOrIcon]? { get }
}
public protocol FootnoteIconsComponent {
  var footnoteIcons: [FioriSwiftUICore.TextOrIcon]? { get }
}
public protocol LeftIconComponent {
  var leftIcon: SwiftUI.Image? { get }
}
public protocol RightIconComponent {
  var rightIcon: SwiftUI.Image? { get }
}
public protocol ActionItemsComponent {
  var actionItems: [FioriSwiftUICore.ActivityItemDataType]? { get }
  var didSelectActivityItem: ((FioriSwiftUICore.ActivityItemDataType) -> Swift.Void)? { get }
}
public protocol DurationPickerComponent : AnyObject {
  var selection: Swift.Int { get set }
  var maximumMinutes: Swift.Int { get set }
  var minimumMinutes: Swift.Int { get set }
  var minuteInterval: Swift.Int { get set }
  var measurementFormatter: Foundation.MeasurementFormatter { get set }
}
public protocol KpiProgressComponent : FioriSwiftUICore.KpiComponent {
  var fraction: Swift.Double? { get }
}
public protocol OptionListPickerComponent : AnyObject {
  var value: [Swift.Int] { get set }
  var valueOptions: [Swift.String] { get }
  var hint: Swift.String? { get }
}
public protocol ProgressIndicatorComponent {
  var progressIndicatorText: Swift.String? { get }
}
public protocol SliderPickerComponent : AnyObject {
  var value: Swift.Int? { get set }
  var formatter: Swift.String? { get }
  var minimumValue: Swift.Int { get }
  var maximumValue: Swift.Int { get }
  var hint: Swift.String? { get }
}
public protocol SwitchPickerComponent : AnyObject {
  var value: Swift.Bool? { get set }
  var name: Swift.String? { get }
  var hint: Swift.String? { get }
}
public protocol TextInputComponent : AnyObject {
  var textInputValue: Swift.String { get set }
  var onCommit: (() -> Swift.Void)? { get }
}
public protocol ActionComponent {
  var actionText: Swift.String? { get }
  var didSelectAction: (() -> Swift.Void)? { get }
}
extension FioriSwiftUICore.AccessoryIconComponent {
  public var accessoryIcon: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.ActionComponent {
  public var actionText: Swift.String? {
    get
  }
  public var didSelectAction: (() -> Swift.Void)? {
    get
  }
}
extension FioriSwiftUICore.ActionItemsComponent {
  public var actionItems: [FioriSwiftUICore.ActivityItemDataType]? {
    get
  }
  public var didSelectActivityItem: ((FioriSwiftUICore.ActivityItemDataType) -> Swift.Void)? {
    get
  }
}
extension FioriSwiftUICore.ActionTitleComponent {
  public var actionTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.AttributeComponent {
  public var attribute: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.AvatarsComponent {
  public var avatars: [FioriSwiftUICore.TextOrIcon]? {
    get
  }
}
extension FioriSwiftUICore.BodyAttributedTextComponent {
  public var bodyAttributedText: Foundation.NSAttributedString? {
    get
  }
}
extension FioriSwiftUICore.BodyTextComponent {
  public var bodyText: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.CategoryAxisTitleComponent {
  public var categoryAxisTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.DescriptionTextComponent {
  public var descriptionText: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.DetailImageComponent {
  public var detailImage: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.DurationPickerComponent {
  public var maximumMinutes: Swift.Int {
    get
  }
  public var minimumMinutes: Swift.Int {
    get
  }
  public var minuteInterval: Swift.Int {
    get
  }
  public var measurementFormatter: Foundation.MeasurementFormatter {
    get
  }
}
extension FioriSwiftUICore.EmptyTextComponent {
  public var emptyText: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.FirstActionTitleComponent {
  public var firstActionTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.FootnoteComponent {
  public var footnote: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.FootnoteIconsComponent {
  public var footnoteIcons: [FioriSwiftUICore.TextOrIcon]? {
    get
  }
}
extension FioriSwiftUICore.IconComponent {
  public var icon: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.IconsComponent {
  public var icons: [FioriSwiftUICore.TextOrIcon]? {
    get
  }
}
extension FioriSwiftUICore.KpiComponent {
  public var kpi: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.KpiProgressComponent {
  public var fraction: Swift.Double? {
    get
  }
}
extension FioriSwiftUICore.LeftIconComponent {
  public var leftIcon: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.LowerBoundTitleComponent {
  public var lowerBoundTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.OptionListPickerComponent {
  public var hint: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.PlaceholderComponent {
  public var placeholder: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.ProgressIndicatorComponent {
  public var progressIndicatorText: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.RightIconComponent {
  public var rightIcon: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.SecondActionTitleComponent {
  public var secondActionTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.SecondaryAttributeComponent {
  public var secondaryAttribute: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.SecondaryTimestampComponent {
  public var secondaryTimestamp: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.SecondaryValuesAxisTitleComponent {
  public var secondaryValuesAxisTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.SliderPickerComponent {
  public var formatter: Swift.String? {
    get
  }
  public var minimumValue: Swift.Int {
    get
  }
  public var maximumValue: Swift.Int {
    get
  }
  public var hint: Swift.String? {
    get
  }
  public var value: Swift.Int? {
    get
  }
}
extension FioriSwiftUICore.StatusComponent {
  public var status: FioriSwiftUICore.TextOrIcon? {
    get
  }
}
extension FioriSwiftUICore.SubstatusComponent {
  public var substatus: FioriSwiftUICore.TextOrIcon? {
    get
  }
}
extension FioriSwiftUICore.SubtitleComponent {
  public var subtitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.SwitchPickerComponent {
  public var name: Swift.String? {
    get
  }
  public var hint: Swift.String? {
    get
  }
  public var value: Swift.Bool? {
    get
  }
}
extension FioriSwiftUICore.TagsComponent {
  public var tags: [Swift.String]? {
    get
  }
}
extension FioriSwiftUICore.TextInputComponent {
  public var onCommit: (() -> Swift.Void)? {
    get
  }
}
extension FioriSwiftUICore.TimestampComponent {
  public var timestamp: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.TrendComponent {
  public var trend: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.TrendImageComponent {
  public var trendImage: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.UpperBoundTitleComponent {
  public var upperBoundTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.ValueAxisTitleComponent {
  public var valueAxisTitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.ValueComponent {
  public var value: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.AccessoryIconStyle where Self == FioriSwiftUICore.AccessoryIconBaseStyle {
  public static var base: FioriSwiftUICore.AccessoryIconBaseStyle {
    get
  }
}
extension FioriSwiftUICore.AccessoryIconStyle where Self == FioriSwiftUICore.AccessoryIconFioriStyle {
  public static var fiori: FioriSwiftUICore.AccessoryIconFioriStyle {
    get
  }
}
extension FioriSwiftUICore.ActionStyle where Self == FioriSwiftUICore.ActionBaseStyle {
  public static var base: FioriSwiftUICore.ActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.ActionStyle where Self == FioriSwiftUICore.ActionFioriStyle {
  public static var fiori: FioriSwiftUICore.ActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.AttributeStyle where Self == FioriSwiftUICore.AttributeBaseStyle {
  public static var base: FioriSwiftUICore.AttributeBaseStyle {
    get
  }
}
extension FioriSwiftUICore.AttributeStyle where Self == FioriSwiftUICore.AttributeFioriStyle {
  public static var fiori: FioriSwiftUICore.AttributeFioriStyle {
    get
  }
}
extension FioriSwiftUICore.AvatarsStyle where Self == FioriSwiftUICore.AvatarsBaseStyle {
  public static var base: FioriSwiftUICore.AvatarsBaseStyle {
    get
  }
}
extension FioriSwiftUICore.AvatarsStyle where Self == FioriSwiftUICore.AvatarsFioriStyle {
  public static var fiori: FioriSwiftUICore.AvatarsFioriStyle {
    get
  }
}
extension FioriSwiftUICore.BannerMessageStyle where Self == FioriSwiftUICore.BannerMessageBaseStyle {
  public static var base: FioriSwiftUICore.BannerMessageBaseStyle {
    get
  }
}
extension FioriSwiftUICore.BannerMessageStyle where Self == FioriSwiftUICore.BannerMessageFioriStyle {
  public static var fiori: FioriSwiftUICore.BannerMessageFioriStyle {
    get
  }
}
public struct BannerMessageIconStyle : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22BannerMessageIconStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.BannerMessageStyle where Self == FioriSwiftUICore.BannerMessageIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.BannerMessageIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.BannerMessageIconStyle
}
public struct BannerMessageTitleStyle : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23BannerMessageTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.BannerMessageStyle where Self == FioriSwiftUICore.BannerMessageTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.BannerMessageTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.BannerMessageTitleStyle
}
public struct BannerMessageCloseActionStyle : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29BannerMessageCloseActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.BannerMessageStyle where Self == FioriSwiftUICore.BannerMessageCloseActionStyle {
  public static func closeActionStyle(_ style: some CloseActionStyle) -> FioriSwiftUICore.BannerMessageCloseActionStyle
  public static func closeActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CloseActionConfiguration) -> some View) -> FioriSwiftUICore.BannerMessageCloseActionStyle
}
public struct BannerMessageTopDividerStyle : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28BannerMessageTopDividerStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.BannerMessageStyle where Self == FioriSwiftUICore.BannerMessageTopDividerStyle {
  public static func topDividerStyle(_ style: some TopDividerStyle) -> FioriSwiftUICore.BannerMessageTopDividerStyle
  public static func topDividerStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TopDividerConfiguration) -> some View) -> FioriSwiftUICore.BannerMessageTopDividerStyle
}
extension FioriSwiftUICore.CardBodyStyle where Self == FioriSwiftUICore.CardBodyBaseStyle {
  public static var base: FioriSwiftUICore.CardBodyBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardBodyStyle where Self == FioriSwiftUICore.CardBodyFioriStyle {
  public static var fiori: FioriSwiftUICore.CardBodyFioriStyle {
    get
  }
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardBaseStyle {
  public static var base: FioriSwiftUICore.CardBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardFioriStyle {
  public static var fiori: FioriSwiftUICore.CardFioriStyle {
    get
  }
}
public struct CardMediaImageStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardMediaImageStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardMediaImageStyle {
  public static func mediaImageStyle(_ style: some MediaImageStyle) -> FioriSwiftUICore.CardMediaImageStyle
  public static func mediaImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MediaImageConfiguration) -> some View) -> FioriSwiftUICore.CardMediaImageStyle
}
public struct CardDescriptionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20CardDescriptionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.CardDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.CardDescriptionStyle
}
public struct CardTitleStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14CardTitleStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.CardTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.CardTitleStyle
}
public struct CardSubtitleStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17CardSubtitleStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.CardSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.CardSubtitleStyle
}
public struct CardIconsStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14CardIconsStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardIconsStyle {
  public static func iconsStyle(_ style: some IconsStyle) -> FioriSwiftUICore.CardIconsStyle
  public static func iconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconsConfiguration) -> some View) -> FioriSwiftUICore.CardIconsStyle
}
public struct CardDetailImageStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20CardDetailImageStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardDetailImageStyle {
  public static func detailImageStyle(_ style: some DetailImageStyle) -> FioriSwiftUICore.CardDetailImageStyle
  public static func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> FioriSwiftUICore.CardDetailImageStyle
}
public struct CardHeaderActionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21CardHeaderActionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardHeaderActionStyle {
  public static func headerActionStyle(_ style: some HeaderActionStyle) -> FioriSwiftUICore.CardHeaderActionStyle
  public static func headerActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.HeaderActionConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderActionStyle
}
public struct CardCounterStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16CardCounterStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardCounterStyle {
  public static func counterStyle(_ style: some CounterStyle) -> FioriSwiftUICore.CardCounterStyle
  public static func counterStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CounterConfiguration) -> some View) -> FioriSwiftUICore.CardCounterStyle
}
public struct CardRow1Style : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13CardRow1StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardRow1Style {
  public static func row1Style(_ style: some Row1Style) -> FioriSwiftUICore.CardRow1Style
  public static func row1Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row1Configuration) -> some View) -> FioriSwiftUICore.CardRow1Style
}
public struct CardRow2Style : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13CardRow2StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardRow2Style {
  public static func row2Style(_ style: some Row2Style) -> FioriSwiftUICore.CardRow2Style
  public static func row2Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row2Configuration) -> some View) -> FioriSwiftUICore.CardRow2Style
}
public struct CardRow3Style : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13CardRow3StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardRow3Style {
  public static func row3Style(_ style: some Row3Style) -> FioriSwiftUICore.CardRow3Style
  public static func row3Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row3Configuration) -> some View) -> FioriSwiftUICore.CardRow3Style
}
public struct CardKpiStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12CardKpiStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardKpiStyle {
  public static func kpiStyle(_ style: some KpiStyle) -> FioriSwiftUICore.CardKpiStyle
  public static func kpiStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiConfiguration) -> some View) -> FioriSwiftUICore.CardKpiStyle
}
public struct CardKpiCaptionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardKpiCaptionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardKpiCaptionStyle {
  public static func kpiCaptionStyle(_ style: some KpiCaptionStyle) -> FioriSwiftUICore.CardKpiCaptionStyle
  public static func kpiCaptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiCaptionConfiguration) -> some View) -> FioriSwiftUICore.CardKpiCaptionStyle
}
public struct CardCardBodyStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04CardD9BodyStyleV04makeE0yQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardCardBodyStyle {
  public static func cardBodyStyle(_ style: some CardBodyStyle) -> FioriSwiftUICore.CardCardBodyStyle
  public static func cardBodyStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardBodyConfiguration) -> some View) -> FioriSwiftUICore.CardCardBodyStyle
}
public struct CardActionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15CardActionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardActionStyle {
  public static func actionStyle(_ style: some ActionStyle) -> FioriSwiftUICore.CardActionStyle
  public static func actionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ActionConfiguration) -> some View) -> FioriSwiftUICore.CardActionStyle
}
public struct CardSecondaryActionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24CardSecondaryActionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardSecondaryActionStyle {
  public static func secondaryActionStyle(_ style: some SecondaryActionStyle) -> FioriSwiftUICore.CardSecondaryActionStyle
  public static func secondaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryActionConfiguration) -> some View) -> FioriSwiftUICore.CardSecondaryActionStyle
}
public struct CardTertiaryActionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23CardTertiaryActionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardTertiaryActionStyle {
  public static func tertiaryActionStyle(_ style: some TertiaryActionStyle) -> FioriSwiftUICore.CardTertiaryActionStyle
  public static func tertiaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TertiaryActionConfiguration) -> some View) -> FioriSwiftUICore.CardTertiaryActionStyle
}
public struct CardOverflowActionStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23CardOverflowActionStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardOverflowActionStyle {
  public static func overflowActionStyle(_ style: some OverflowActionStyle) -> FioriSwiftUICore.CardOverflowActionStyle
  public static func overflowActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.OverflowActionConfiguration) -> some View) -> FioriSwiftUICore.CardOverflowActionStyle
}
public struct CardCardHeaderStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04CardD11HeaderStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardCardHeaderStyle {
  public static func cardHeaderStyle(_ style: some CardHeaderStyle) -> FioriSwiftUICore.CardCardHeaderStyle
  public static func cardHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardHeaderConfiguration) -> some View) -> FioriSwiftUICore.CardCardHeaderStyle
}
public struct CardCardFooterStyle : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04CardD11FooterStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardStyle where Self == FioriSwiftUICore.CardCardFooterStyle {
  public static func cardFooterStyle(_ style: some CardFooterStyle) -> FioriSwiftUICore.CardCardFooterStyle
  public static func cardFooterStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardFooterConfiguration) -> some View) -> FioriSwiftUICore.CardCardFooterStyle
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderBaseStyle {
  public static var base: FioriSwiftUICore.CardExtHeaderBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderFioriStyle {
  public static var fiori: FioriSwiftUICore.CardExtHeaderFioriStyle {
    get
  }
}
public struct CardExtHeaderRow1Style : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22CardExtHeaderRow1StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderRow1Style {
  public static func row1Style(_ style: some Row1Style) -> FioriSwiftUICore.CardExtHeaderRow1Style
  public static func row1Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row1Configuration) -> some View) -> FioriSwiftUICore.CardExtHeaderRow1Style
}
public struct CardExtHeaderRow2Style : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22CardExtHeaderRow2StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderRow2Style {
  public static func row2Style(_ style: some Row2Style) -> FioriSwiftUICore.CardExtHeaderRow2Style
  public static func row2Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row2Configuration) -> some View) -> FioriSwiftUICore.CardExtHeaderRow2Style
}
public struct CardExtHeaderRow3Style : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22CardExtHeaderRow3StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderRow3Style {
  public static func row3Style(_ style: some Row3Style) -> FioriSwiftUICore.CardExtHeaderRow3Style
  public static func row3Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row3Configuration) -> some View) -> FioriSwiftUICore.CardExtHeaderRow3Style
}
public struct CardExtHeaderKpiStyle : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21CardExtHeaderKpiStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderKpiStyle {
  public static func kpiStyle(_ style: some KpiStyle) -> FioriSwiftUICore.CardExtHeaderKpiStyle
  public static func kpiStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiConfiguration) -> some View) -> FioriSwiftUICore.CardExtHeaderKpiStyle
}
public struct CardExtHeaderKpiCaptionStyle : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28CardExtHeaderKpiCaptionStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardExtHeaderStyle where Self == FioriSwiftUICore.CardExtHeaderKpiCaptionStyle {
  public static func kpiCaptionStyle(_ style: some KpiCaptionStyle) -> FioriSwiftUICore.CardExtHeaderKpiCaptionStyle
  public static func kpiCaptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiCaptionConfiguration) -> some View) -> FioriSwiftUICore.CardExtHeaderKpiCaptionStyle
}
extension FioriSwiftUICore.CardFooterStyle where Self == FioriSwiftUICore.CardFooterBaseStyle {
  public static var base: FioriSwiftUICore.CardFooterBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardFooterStyle where Self == FioriSwiftUICore.CardFooterFioriStyle {
  public static var fiori: FioriSwiftUICore.CardFooterFioriStyle {
    get
  }
}
public struct CardFooterActionStyle : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21CardFooterActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardFooterStyle where Self == FioriSwiftUICore.CardFooterActionStyle {
  public static func actionStyle(_ style: some ActionStyle) -> FioriSwiftUICore.CardFooterActionStyle
  public static func actionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ActionConfiguration) -> some View) -> FioriSwiftUICore.CardFooterActionStyle
}
public struct CardFooterSecondaryActionStyle : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30CardFooterSecondaryActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardFooterStyle where Self == FioriSwiftUICore.CardFooterSecondaryActionStyle {
  public static func secondaryActionStyle(_ style: some SecondaryActionStyle) -> FioriSwiftUICore.CardFooterSecondaryActionStyle
  public static func secondaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryActionConfiguration) -> some View) -> FioriSwiftUICore.CardFooterSecondaryActionStyle
}
public struct CardFooterTertiaryActionStyle : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29CardFooterTertiaryActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardFooterStyle where Self == FioriSwiftUICore.CardFooterTertiaryActionStyle {
  public static func tertiaryActionStyle(_ style: some TertiaryActionStyle) -> FioriSwiftUICore.CardFooterTertiaryActionStyle
  public static func tertiaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TertiaryActionConfiguration) -> some View) -> FioriSwiftUICore.CardFooterTertiaryActionStyle
}
public struct CardFooterOverflowActionStyle : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29CardFooterOverflowActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardFooterStyle where Self == FioriSwiftUICore.CardFooterOverflowActionStyle {
  public static func overflowActionStyle(_ style: some OverflowActionStyle) -> FioriSwiftUICore.CardFooterOverflowActionStyle
  public static func overflowActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.OverflowActionConfiguration) -> some View) -> FioriSwiftUICore.CardFooterOverflowActionStyle
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderBaseStyle {
  public static var base: FioriSwiftUICore.CardHeaderBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderFioriStyle {
  public static var fiori: FioriSwiftUICore.CardHeaderFioriStyle {
    get
  }
}
public struct CardHeaderMediaImageStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25CardHeaderMediaImageStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderMediaImageStyle {
  public static func mediaImageStyle(_ style: some MediaImageStyle) -> FioriSwiftUICore.CardHeaderMediaImageStyle
  public static func mediaImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MediaImageConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderMediaImageStyle
}
public struct CardHeaderDescriptionStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26CardHeaderDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.CardHeaderDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderDescriptionStyle
}
public struct CardHeaderTitleStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20CardHeaderTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.CardHeaderTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderTitleStyle
}
public struct CardHeaderSubtitleStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23CardHeaderSubtitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.CardHeaderSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderSubtitleStyle
}
public struct CardHeaderIconsStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20CardHeaderIconsStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderIconsStyle {
  public static func iconsStyle(_ style: some IconsStyle) -> FioriSwiftUICore.CardHeaderIconsStyle
  public static func iconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconsConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderIconsStyle
}
public struct CardHeaderDetailImageStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26CardHeaderDetailImageStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderDetailImageStyle {
  public static func detailImageStyle(_ style: some DetailImageStyle) -> FioriSwiftUICore.CardHeaderDetailImageStyle
  public static func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderDetailImageStyle
}
public struct CardHeaderHeaderActionStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010CardHeaderE11ActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderHeaderActionStyle {
  public static func headerActionStyle(_ style: some HeaderActionStyle) -> FioriSwiftUICore.CardHeaderHeaderActionStyle
  public static func headerActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.HeaderActionConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderHeaderActionStyle
}
public struct CardHeaderCounterStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22CardHeaderCounterStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderCounterStyle {
  public static func counterStyle(_ style: some CounterStyle) -> FioriSwiftUICore.CardHeaderCounterStyle
  public static func counterStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CounterConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderCounterStyle
}
public struct CardHeaderRow1Style : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardHeaderRow1StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderRow1Style {
  public static func row1Style(_ style: some Row1Style) -> FioriSwiftUICore.CardHeaderRow1Style
  public static func row1Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row1Configuration) -> some View) -> FioriSwiftUICore.CardHeaderRow1Style
}
public struct CardHeaderRow2Style : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardHeaderRow2StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderRow2Style {
  public static func row2Style(_ style: some Row2Style) -> FioriSwiftUICore.CardHeaderRow2Style
  public static func row2Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row2Configuration) -> some View) -> FioriSwiftUICore.CardHeaderRow2Style
}
public struct CardHeaderRow3Style : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19CardHeaderRow3StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderRow3Style {
  public static func row3Style(_ style: some Row3Style) -> FioriSwiftUICore.CardHeaderRow3Style
  public static func row3Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row3Configuration) -> some View) -> FioriSwiftUICore.CardHeaderRow3Style
}
public struct CardHeaderKpiStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18CardHeaderKpiStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderKpiStyle {
  public static func kpiStyle(_ style: some KpiStyle) -> FioriSwiftUICore.CardHeaderKpiStyle
  public static func kpiStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderKpiStyle
}
public struct CardHeaderKpiCaptionStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25CardHeaderKpiCaptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderKpiCaptionStyle {
  public static func kpiCaptionStyle(_ style: some KpiCaptionStyle) -> FioriSwiftUICore.CardHeaderKpiCaptionStyle
  public static func kpiCaptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiCaptionConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderKpiCaptionStyle
}
public struct CardHeaderCardMediaStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010CardHeaderD10MediaStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderCardMediaStyle {
  public static func cardMediaStyle(_ style: some CardMediaStyle) -> FioriSwiftUICore.CardHeaderCardMediaStyle
  public static func cardMediaStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardMediaConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderCardMediaStyle
}
public struct CardHeaderCardMainHeaderStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010CardHeaderd4MainE5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderCardMainHeaderStyle {
  public static func cardMainHeaderStyle(_ style: some CardMainHeaderStyle) -> FioriSwiftUICore.CardHeaderCardMainHeaderStyle
  public static func cardMainHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardMainHeaderConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderCardMainHeaderStyle
}
public struct CardHeaderCardExtHeaderStyle : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010CardHeaderd3ExtE5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardHeaderStyle where Self == FioriSwiftUICore.CardHeaderCardExtHeaderStyle {
  public static func cardExtHeaderStyle(_ style: some CardExtHeaderStyle) -> FioriSwiftUICore.CardHeaderCardExtHeaderStyle
  public static func cardExtHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardExtHeaderConfiguration) -> some View) -> FioriSwiftUICore.CardHeaderCardExtHeaderStyle
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderBaseStyle {
  public static var base: FioriSwiftUICore.CardMainHeaderBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderFioriStyle {
  public static var fiori: FioriSwiftUICore.CardMainHeaderFioriStyle {
    get
  }
}
public struct CardMainHeaderTitleStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24CardMainHeaderTitleStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.CardMainHeaderTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.CardMainHeaderTitleStyle
}
public struct CardMainHeaderSubtitleStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27CardMainHeaderSubtitleStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.CardMainHeaderSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.CardMainHeaderSubtitleStyle
}
public struct CardMainHeaderIconsStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24CardMainHeaderIconsStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderIconsStyle {
  public static func iconsStyle(_ style: some IconsStyle) -> FioriSwiftUICore.CardMainHeaderIconsStyle
  public static func iconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconsConfiguration) -> some View) -> FioriSwiftUICore.CardMainHeaderIconsStyle
}
public struct CardMainHeaderDetailImageStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30CardMainHeaderDetailImageStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderDetailImageStyle {
  public static func detailImageStyle(_ style: some DetailImageStyle) -> FioriSwiftUICore.CardMainHeaderDetailImageStyle
  public static func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> FioriSwiftUICore.CardMainHeaderDetailImageStyle
}
public struct CardMainHeaderHeaderActionStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014CardMainHeaderF11ActionStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderHeaderActionStyle {
  public static func headerActionStyle(_ style: some HeaderActionStyle) -> FioriSwiftUICore.CardMainHeaderHeaderActionStyle
  public static func headerActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.HeaderActionConfiguration) -> some View) -> FioriSwiftUICore.CardMainHeaderHeaderActionStyle
}
public struct CardMainHeaderCounterStyle : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26CardMainHeaderCounterStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMainHeaderStyle where Self == FioriSwiftUICore.CardMainHeaderCounterStyle {
  public static func counterStyle(_ style: some CounterStyle) -> FioriSwiftUICore.CardMainHeaderCounterStyle
  public static func counterStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CounterConfiguration) -> some View) -> FioriSwiftUICore.CardMainHeaderCounterStyle
}
extension FioriSwiftUICore.CardMediaStyle where Self == FioriSwiftUICore.CardMediaBaseStyle {
  public static var base: FioriSwiftUICore.CardMediaBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CardMediaStyle where Self == FioriSwiftUICore.CardMediaFioriStyle {
  public static var fiori: FioriSwiftUICore.CardMediaFioriStyle {
    get
  }
}
public struct CardMediaMediaImageStyle : FioriSwiftUICore.CardMediaStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMediaConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore09CardMediaE10ImageStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMediaStyle where Self == FioriSwiftUICore.CardMediaMediaImageStyle {
  public static func mediaImageStyle(_ style: some MediaImageStyle) -> FioriSwiftUICore.CardMediaMediaImageStyle
  public static func mediaImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MediaImageConfiguration) -> some View) -> FioriSwiftUICore.CardMediaMediaImageStyle
}
public struct CardMediaDescriptionStyle : FioriSwiftUICore.CardMediaStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMediaConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25CardMediaDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.CardMediaStyle where Self == FioriSwiftUICore.CardMediaDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.CardMediaDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.CardMediaDescriptionStyle
}
extension FioriSwiftUICore.CloseActionStyle where Self == FioriSwiftUICore.CloseActionBaseStyle {
  public static var base: FioriSwiftUICore.CloseActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CloseActionStyle where Self == FioriSwiftUICore.CloseActionFioriStyle {
  public static var fiori: FioriSwiftUICore.CloseActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.CounterStyle where Self == FioriSwiftUICore.CounterBaseStyle {
  public static var base: FioriSwiftUICore.CounterBaseStyle {
    get
  }
}
extension FioriSwiftUICore.CounterStyle where Self == FioriSwiftUICore.CounterFioriStyle {
  public static var fiori: FioriSwiftUICore.CounterFioriStyle {
    get
  }
}
extension FioriSwiftUICore.DecrementActionStyle where Self == FioriSwiftUICore.DecrementActionBaseStyle {
  public static var base: FioriSwiftUICore.DecrementActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.DecrementActionStyle where Self == FioriSwiftUICore.DecrementActionFioriStyle {
  public static var fiori: FioriSwiftUICore.DecrementActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.DescriptionStyle where Self == FioriSwiftUICore.DescriptionBaseStyle {
  public static var base: FioriSwiftUICore.DescriptionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.DescriptionStyle where Self == FioriSwiftUICore.DescriptionFioriStyle {
  public static var fiori: FioriSwiftUICore.DescriptionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.DetailImageStyle where Self == FioriSwiftUICore.DetailImageBaseStyle {
  public static var base: FioriSwiftUICore.DetailImageBaseStyle {
    get
  }
}
extension FioriSwiftUICore.DetailImageStyle where Self == FioriSwiftUICore.DetailImageFioriStyle {
  public static var fiori: FioriSwiftUICore.DetailImageFioriStyle {
    get
  }
}
extension FioriSwiftUICore.FilledIconStyle where Self == FioriSwiftUICore.FilledIconBaseStyle {
  public static var base: FioriSwiftUICore.FilledIconBaseStyle {
    get
  }
}
extension FioriSwiftUICore.FilledIconStyle where Self == FioriSwiftUICore.FilledIconFioriStyle {
  public static var fiori: FioriSwiftUICore.FilledIconFioriStyle {
    get
  }
}
extension FioriSwiftUICore.FootnoteStyle where Self == FioriSwiftUICore.FootnoteBaseStyle {
  public static var base: FioriSwiftUICore.FootnoteBaseStyle {
    get
  }
}
extension FioriSwiftUICore.FootnoteStyle where Self == FioriSwiftUICore.FootnoteFioriStyle {
  public static var fiori: FioriSwiftUICore.FootnoteFioriStyle {
    get
  }
}
extension FioriSwiftUICore.FootnoteIconsStyle where Self == FioriSwiftUICore.FootnoteIconsBaseStyle {
  public static var base: FioriSwiftUICore.FootnoteIconsBaseStyle {
    get
  }
}
extension FioriSwiftUICore.FootnoteIconsStyle where Self == FioriSwiftUICore.FootnoteIconsFioriStyle {
  public static var fiori: FioriSwiftUICore.FootnoteIconsFioriStyle {
    get
  }
}
extension FioriSwiftUICore.FormViewStyle where Self == FioriSwiftUICore.FormViewBaseStyle {
  public static var base: FioriSwiftUICore.FormViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.FormViewStyle where Self == FioriSwiftUICore.FormViewFioriStyle {
  public static var fiori: FioriSwiftUICore.FormViewFioriStyle {
    get
  }
}
extension FioriSwiftUICore.GreetingTextStyle where Self == FioriSwiftUICore.GreetingTextBaseStyle {
  public static var base: FioriSwiftUICore.GreetingTextBaseStyle {
    get
  }
}
extension FioriSwiftUICore.GreetingTextStyle where Self == FioriSwiftUICore.GreetingTextFioriStyle {
  public static var fiori: FioriSwiftUICore.GreetingTextFioriStyle {
    get
  }
}
extension FioriSwiftUICore.HeaderActionStyle where Self == FioriSwiftUICore.HeaderActionBaseStyle {
  public static var base: FioriSwiftUICore.HeaderActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.HeaderActionStyle where Self == FioriSwiftUICore.HeaderActionFioriStyle {
  public static var fiori: FioriSwiftUICore.HeaderActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.HelperTextStyle where Self == FioriSwiftUICore.HelperTextBaseStyle {
  public static var base: FioriSwiftUICore.HelperTextBaseStyle {
    get
  }
}
extension FioriSwiftUICore.HelperTextStyle where Self == FioriSwiftUICore.HelperTextFioriStyle {
  public static var fiori: FioriSwiftUICore.HelperTextFioriStyle {
    get
  }
}
extension FioriSwiftUICore.IconStyle where Self == FioriSwiftUICore.IconBaseStyle {
  public static var base: FioriSwiftUICore.IconBaseStyle {
    get
  }
}
extension FioriSwiftUICore.IconStyle where Self == FioriSwiftUICore.IconFioriStyle {
  public static var fiori: FioriSwiftUICore.IconFioriStyle {
    get
  }
}
extension FioriSwiftUICore.IconsStyle where Self == FioriSwiftUICore.IconsBaseStyle {
  public static var base: FioriSwiftUICore.IconsBaseStyle {
    get
  }
}
extension FioriSwiftUICore.IconsStyle where Self == FioriSwiftUICore.IconsFioriStyle {
  public static var fiori: FioriSwiftUICore.IconsFioriStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageBaseStyle {
  public static var base: FioriSwiftUICore.IllustratedMessageBaseStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageFioriStyle {
  public static var fiori: FioriSwiftUICore.IllustratedMessageFioriStyle {
    get
  }
}
public struct IllustratedMessageDetailImageStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34IllustratedMessageDetailImageStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageDetailImageStyle {
  public static func detailImageStyle(_ style: some DetailImageStyle) -> FioriSwiftUICore.IllustratedMessageDetailImageStyle
  public static func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> FioriSwiftUICore.IllustratedMessageDetailImageStyle
}
public struct IllustratedMessageTitleStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28IllustratedMessageTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.IllustratedMessageTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.IllustratedMessageTitleStyle
}
public struct IllustratedMessageDescriptionStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34IllustratedMessageDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.IllustratedMessageDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.IllustratedMessageDescriptionStyle
}
public struct IllustratedMessageActionStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29IllustratedMessageActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageActionStyle {
  public static func actionStyle(_ style: some ActionStyle) -> FioriSwiftUICore.IllustratedMessageActionStyle
  public static func actionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ActionConfiguration) -> some View) -> FioriSwiftUICore.IllustratedMessageActionStyle
}
public struct IllustratedMessageSecondaryActionStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore38IllustratedMessageSecondaryActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageSecondaryActionStyle {
  public static func secondaryActionStyle(_ style: some SecondaryActionStyle) -> FioriSwiftUICore.IllustratedMessageSecondaryActionStyle
  public static func secondaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryActionConfiguration) -> some View) -> FioriSwiftUICore.IllustratedMessageSecondaryActionStyle
}
extension FioriSwiftUICore.IncrementActionStyle where Self == FioriSwiftUICore.IncrementActionBaseStyle {
  public static var base: FioriSwiftUICore.IncrementActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.IncrementActionStyle where Self == FioriSwiftUICore.IncrementActionFioriStyle {
  public static var fiori: FioriSwiftUICore.IncrementActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewBaseStyle {
  public static var base: FioriSwiftUICore.InformationViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewFioriStyle {
  public static var fiori: FioriSwiftUICore.InformationViewFioriStyle {
    get
  }
}
public struct InformationViewIconStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24InformationViewIconStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.InformationViewIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.InformationViewIconStyle
}
public struct InformationViewDescriptionStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31InformationViewDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.InformationViewDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.InformationViewDescriptionStyle
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenBaseStyle {
  public static var base: FioriSwiftUICore.JouleWelcomeScreenBaseStyle {
    get
  }
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenFioriStyle {
  public static var fiori: FioriSwiftUICore.JouleWelcomeScreenFioriStyle {
    get
  }
}
public struct JouleWelcomeScreenMediaImageStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33JouleWelcomeScreenMediaImageStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenMediaImageStyle {
  public static func mediaImageStyle(_ style: some MediaImageStyle) -> FioriSwiftUICore.JouleWelcomeScreenMediaImageStyle
  public static func mediaImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MediaImageConfiguration) -> some View) -> FioriSwiftUICore.JouleWelcomeScreenMediaImageStyle
}
public struct JouleWelcomeScreenGreetingTextStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore35JouleWelcomeScreenGreetingTextStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenGreetingTextStyle {
  public static func greetingTextStyle(_ style: some GreetingTextStyle) -> FioriSwiftUICore.JouleWelcomeScreenGreetingTextStyle
  public static func greetingTextStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.GreetingTextConfiguration) -> some View) -> FioriSwiftUICore.JouleWelcomeScreenGreetingTextStyle
}
public struct JouleWelcomeScreenTitleStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28JouleWelcomeScreenTitleStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.JouleWelcomeScreenTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.JouleWelcomeScreenTitleStyle
}
public struct JouleWelcomeScreenFootnoteStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31JouleWelcomeScreenFootnoteStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenFootnoteStyle {
  public static func footnoteStyle(_ style: some FootnoteStyle) -> FioriSwiftUICore.JouleWelcomeScreenFootnoteStyle
  public static func footnoteStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FootnoteConfiguration) -> some View) -> FioriSwiftUICore.JouleWelcomeScreenFootnoteStyle
}
public struct JouleWelcomeScreenMessageContentStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore37JouleWelcomeScreenMessageContentStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle where Self == FioriSwiftUICore.JouleWelcomeScreenMessageContentStyle {
  public static func messageContentStyle(_ style: some MessageContentStyle) -> FioriSwiftUICore.JouleWelcomeScreenMessageContentStyle
  public static func messageContentStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MessageContentConfiguration) -> some View) -> FioriSwiftUICore.JouleWelcomeScreenMessageContentStyle
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewBaseStyle {
  public static var base: FioriSwiftUICore.KeyValueFormViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewFioriStyle {
  public static var fiori: FioriSwiftUICore.KeyValueFormViewFioriStyle {
    get
  }
}
public struct KeyValueFormViewTitleStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26KeyValueFormViewTitleStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.KeyValueFormViewTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.KeyValueFormViewTitleStyle
}
public struct KeyValueFormViewTextViewStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020KeyValueFormViewTextG5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewTextViewStyle {
  public static func textViewStyle(_ style: some TextViewStyle) -> FioriSwiftUICore.KeyValueFormViewTextViewStyle
  public static func textViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextViewConfiguration) -> some View) -> FioriSwiftUICore.KeyValueFormViewTextViewStyle
}
public struct KeyValueFormViewPlaceholderStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore32KeyValueFormViewPlaceholderStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewPlaceholderStyle {
  public static func placeholderStyle(_ style: some PlaceholderStyle) -> FioriSwiftUICore.KeyValueFormViewPlaceholderStyle
  public static func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> FioriSwiftUICore.KeyValueFormViewPlaceholderStyle
}
public struct KeyValueFormViewMandatoryFieldIndicatorStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore44KeyValueFormViewMandatoryFieldIndicatorStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewMandatoryFieldIndicatorStyle {
  public static func mandatoryFieldIndicatorStyle(_ style: some MandatoryFieldIndicatorStyle) -> FioriSwiftUICore.KeyValueFormViewMandatoryFieldIndicatorStyle
  public static func mandatoryFieldIndicatorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> some View) -> FioriSwiftUICore.KeyValueFormViewMandatoryFieldIndicatorStyle
}
public struct KeyValueFormViewNoteFormViewStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020KeyValueFormViewNotefG5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.KeyValueFormViewStyle where Self == FioriSwiftUICore.KeyValueFormViewNoteFormViewStyle {
  public static func noteFormViewStyle(_ style: some NoteFormViewStyle) -> FioriSwiftUICore.KeyValueFormViewNoteFormViewStyle
  public static func noteFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.NoteFormViewConfiguration) -> some View) -> FioriSwiftUICore.KeyValueFormViewNoteFormViewStyle
}
extension FioriSwiftUICore.KpiCaptionStyle where Self == FioriSwiftUICore.KpiCaptionBaseStyle {
  public static var base: FioriSwiftUICore.KpiCaptionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.KpiCaptionStyle where Self == FioriSwiftUICore.KpiCaptionFioriStyle {
  public static var fiori: FioriSwiftUICore.KpiCaptionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.KpiStyle where Self == FioriSwiftUICore.KpiBaseStyle {
  public static var base: FioriSwiftUICore.KpiBaseStyle {
    get
  }
}
extension FioriSwiftUICore.KpiStyle where Self == FioriSwiftUICore.KpiFioriStyle {
  public static var fiori: FioriSwiftUICore.KpiFioriStyle {
    get
  }
}
extension FioriSwiftUICore.LabelItemStyle where Self == FioriSwiftUICore.LabelItemBaseStyle {
  public static var base: FioriSwiftUICore.LabelItemBaseStyle {
    get
  }
}
extension FioriSwiftUICore.LabelItemStyle where Self == FioriSwiftUICore.LabelItemFioriStyle {
  public static var fiori: FioriSwiftUICore.LabelItemFioriStyle {
    get
  }
}
public struct LabelItemIconStyle : FioriSwiftUICore.LabelItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LabelItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18LabelItemIconStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LabelItemStyle where Self == FioriSwiftUICore.LabelItemIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.LabelItemIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.LabelItemIconStyle
}
public struct LabelItemTitleStyle : FioriSwiftUICore.LabelItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LabelItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19LabelItemTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LabelItemStyle where Self == FioriSwiftUICore.LabelItemTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.LabelItemTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.LabelItemTitleStyle
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle where Self == FioriSwiftUICore.LinearProgressIndicatorBaseStyle {
  public static var base: FioriSwiftUICore.LinearProgressIndicatorBaseStyle {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle where Self == FioriSwiftUICore.LinearProgressIndicatorFioriStyle {
  public static var fiori: FioriSwiftUICore.LinearProgressIndicatorFioriStyle {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewBaseStyle {
  public static var base: FioriSwiftUICore.LinearProgressIndicatorViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewFioriStyle {
  public static var fiori: FioriSwiftUICore.LinearProgressIndicatorViewFioriStyle {
    get
  }
}
public struct LinearProgressIndicatorViewLinearProgressIndicatorStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore027LinearProgressIndicatorViewdeF5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewLinearProgressIndicatorStyle {
  public static func linearProgressIndicatorStyle(_ style: some LinearProgressIndicatorStyle) -> FioriSwiftUICore.LinearProgressIndicatorViewLinearProgressIndicatorStyle
  public static func linearProgressIndicatorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some View) -> FioriSwiftUICore.LinearProgressIndicatorViewLinearProgressIndicatorStyle
}
public struct LinearProgressIndicatorViewIconStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore36LinearProgressIndicatorViewIconStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.LinearProgressIndicatorViewIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.LinearProgressIndicatorViewIconStyle
}
public struct LinearProgressIndicatorViewDescriptionStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore43LinearProgressIndicatorViewDescriptionStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.LinearProgressIndicatorViewDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.LinearProgressIndicatorViewDescriptionStyle
}
extension FioriSwiftUICore.MandatoryFieldIndicatorStyle where Self == FioriSwiftUICore.MandatoryFieldIndicatorBaseStyle {
  public static var base: FioriSwiftUICore.MandatoryFieldIndicatorBaseStyle {
    get
  }
}
extension FioriSwiftUICore.MandatoryFieldIndicatorStyle where Self == FioriSwiftUICore.MandatoryFieldIndicatorFioriStyle {
  public static var fiori: FioriSwiftUICore.MandatoryFieldIndicatorFioriStyle {
    get
  }
}
extension FioriSwiftUICore.MediaImageStyle where Self == FioriSwiftUICore.MediaImageBaseStyle {
  public static var base: FioriSwiftUICore.MediaImageBaseStyle {
    get
  }
}
extension FioriSwiftUICore.MediaImageStyle where Self == FioriSwiftUICore.MediaImageFioriStyle {
  public static var fiori: FioriSwiftUICore.MediaImageFioriStyle {
    get
  }
}
extension FioriSwiftUICore.MenuSelectionStyle where Self == FioriSwiftUICore.MenuSelectionBaseStyle {
  public static var base: FioriSwiftUICore.MenuSelectionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.MenuSelectionStyle where Self == FioriSwiftUICore.MenuSelectionFioriStyle {
  public static var fiori: FioriSwiftUICore.MenuSelectionFioriStyle {
    get
  }
}
public struct MenuSelectionActionStyle : FioriSwiftUICore.MenuSelectionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24MenuSelectionActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.MenuSelectionStyle where Self == FioriSwiftUICore.MenuSelectionActionStyle {
  public static func actionStyle(_ style: some ActionStyle) -> FioriSwiftUICore.MenuSelectionActionStyle
  public static func actionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ActionConfiguration) -> some View) -> FioriSwiftUICore.MenuSelectionActionStyle
}
extension FioriSwiftUICore.MenuSelectionItemStyle where Self == FioriSwiftUICore.MenuSelectionItemBaseStyle {
  public static var base: FioriSwiftUICore.MenuSelectionItemBaseStyle {
    get
  }
}
extension FioriSwiftUICore.MenuSelectionItemStyle where Self == FioriSwiftUICore.MenuSelectionItemFioriStyle {
  public static var fiori: FioriSwiftUICore.MenuSelectionItemFioriStyle {
    get
  }
}
public struct MenuSelectionItemIconStyle : FioriSwiftUICore.MenuSelectionItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26MenuSelectionItemIconStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.MenuSelectionItemStyle where Self == FioriSwiftUICore.MenuSelectionItemIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.MenuSelectionItemIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.MenuSelectionItemIconStyle
}
public struct MenuSelectionItemTitleStyle : FioriSwiftUICore.MenuSelectionItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27MenuSelectionItemTitleStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.MenuSelectionItemStyle where Self == FioriSwiftUICore.MenuSelectionItemTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.MenuSelectionItemTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.MenuSelectionItemTitleStyle
}
extension FioriSwiftUICore.MessageContentStyle where Self == FioriSwiftUICore.MessageContentBaseStyle {
  public static var base: FioriSwiftUICore.MessageContentBaseStyle {
    get
  }
}
extension FioriSwiftUICore.MessageContentStyle where Self == FioriSwiftUICore.MessageContentFioriStyle {
  public static var fiori: FioriSwiftUICore.MessageContentFioriStyle {
    get
  }
}
extension FioriSwiftUICore.MoreActionOverflowStyle where Self == FioriSwiftUICore.MoreActionOverflowBaseStyle {
  public static var base: FioriSwiftUICore.MoreActionOverflowBaseStyle {
    get
  }
}
extension FioriSwiftUICore.MoreActionOverflowStyle where Self == FioriSwiftUICore.MoreActionOverflowFioriStyle {
  public static var fiori: FioriSwiftUICore.MoreActionOverflowFioriStyle {
    get
  }
}
extension FioriSwiftUICore.NoteFormViewStyle where Self == FioriSwiftUICore.NoteFormViewBaseStyle {
  public static var base: FioriSwiftUICore.NoteFormViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.NoteFormViewStyle where Self == FioriSwiftUICore.NoteFormViewFioriStyle {
  public static var fiori: FioriSwiftUICore.NoteFormViewFioriStyle {
    get
  }
}
public struct NoteFormViewTextViewStyle : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore016NoteFormViewTextF5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.NoteFormViewStyle where Self == FioriSwiftUICore.NoteFormViewTextViewStyle {
  public static func textViewStyle(_ style: some TextViewStyle) -> FioriSwiftUICore.NoteFormViewTextViewStyle
  public static func textViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextViewConfiguration) -> some View) -> FioriSwiftUICore.NoteFormViewTextViewStyle
}
public struct NoteFormViewPlaceholderStyle : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28NoteFormViewPlaceholderStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.NoteFormViewStyle where Self == FioriSwiftUICore.NoteFormViewPlaceholderStyle {
  public static func placeholderStyle(_ style: some PlaceholderStyle) -> FioriSwiftUICore.NoteFormViewPlaceholderStyle
  public static func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> FioriSwiftUICore.NoteFormViewPlaceholderStyle
}
public struct NoteFormViewPlaceholderTextEditorStyle : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore38NoteFormViewPlaceholderTextEditorStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.NoteFormViewStyle where Self == FioriSwiftUICore.NoteFormViewPlaceholderTextEditorStyle {
  public static func placeholderTextEditorStyle(_ style: some PlaceholderTextEditorStyle) -> FioriSwiftUICore.NoteFormViewPlaceholderTextEditorStyle
  public static func placeholderTextEditorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some View) -> FioriSwiftUICore.NoteFormViewPlaceholderTextEditorStyle
}
public struct NoteFormViewFormViewStyle : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012NoteFormVieweF5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.NoteFormViewStyle where Self == FioriSwiftUICore.NoteFormViewFormViewStyle {
  public static func formViewStyle(_ style: some FormViewStyle) -> FioriSwiftUICore.NoteFormViewFormViewStyle
  public static func formViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FormViewConfiguration) -> some View) -> FioriSwiftUICore.NoteFormViewFormViewStyle
}
extension FioriSwiftUICore.NowIndicatorNodeStyle where Self == FioriSwiftUICore.NowIndicatorNodeBaseStyle {
  public static var base: FioriSwiftUICore.NowIndicatorNodeBaseStyle {
    get
  }
}
extension FioriSwiftUICore.NowIndicatorNodeStyle where Self == FioriSwiftUICore.NowIndicatorNodeFioriStyle {
  public static var fiori: FioriSwiftUICore.NowIndicatorNodeFioriStyle {
    get
  }
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemBaseStyle {
  public static var base: FioriSwiftUICore.ObjectItemBaseStyle {
    get
  }
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemFioriStyle {
  public static var fiori: FioriSwiftUICore.ObjectItemFioriStyle {
    get
  }
}
public struct ObjectItemTitleStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20ObjectItemTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.ObjectItemTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemTitleStyle
}
public struct ObjectItemSubtitleStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23ObjectItemSubtitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.ObjectItemSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemSubtitleStyle
}
public struct ObjectItemFootnoteStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23ObjectItemFootnoteStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemFootnoteStyle {
  public static func footnoteStyle(_ style: some FootnoteStyle) -> FioriSwiftUICore.ObjectItemFootnoteStyle
  public static func footnoteStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FootnoteConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemFootnoteStyle
}
public struct ObjectItemDescriptionStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26ObjectItemDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.ObjectItemDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemDescriptionStyle
}
public struct ObjectItemStatusStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21ObjectItemStatusStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemStatusStyle {
  public static func statusStyle(_ style: some StatusStyle) -> FioriSwiftUICore.ObjectItemStatusStyle
  public static func statusStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.StatusConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemStatusStyle
}
public struct ObjectItemSubstatusStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24ObjectItemSubstatusStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemSubstatusStyle {
  public static func substatusStyle(_ style: some SubstatusStyle) -> FioriSwiftUICore.ObjectItemSubstatusStyle
  public static func substatusStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubstatusConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemSubstatusStyle
}
public struct ObjectItemDetailImageStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26ObjectItemDetailImageStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemDetailImageStyle {
  public static func detailImageStyle(_ style: some DetailImageStyle) -> FioriSwiftUICore.ObjectItemDetailImageStyle
  public static func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemDetailImageStyle
}
public struct ObjectItemIconsStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20ObjectItemIconsStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemIconsStyle {
  public static func iconsStyle(_ style: some IconsStyle) -> FioriSwiftUICore.ObjectItemIconsStyle
  public static func iconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconsConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemIconsStyle
}
public struct ObjectItemAvatarsStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22ObjectItemAvatarsStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemAvatarsStyle {
  public static func avatarsStyle(_ style: some AvatarsStyle) -> FioriSwiftUICore.ObjectItemAvatarsStyle
  public static func avatarsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.AvatarsConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemAvatarsStyle
}
public struct ObjectItemFootnoteIconsStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28ObjectItemFootnoteIconsStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemFootnoteIconsStyle {
  public static func footnoteIconsStyle(_ style: some FootnoteIconsStyle) -> FioriSwiftUICore.ObjectItemFootnoteIconsStyle
  public static func footnoteIconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FootnoteIconsConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemFootnoteIconsStyle
}
public struct ObjectItemTagsStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19ObjectItemTagsStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemTagsStyle {
  public static func tagsStyle(_ style: some TagsStyle) -> FioriSwiftUICore.ObjectItemTagsStyle
  public static func tagsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TagsConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemTagsStyle
}
public struct ObjectItemActionStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21ObjectItemActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemActionStyle {
  public static func actionStyle(_ style: some ActionStyle) -> FioriSwiftUICore.ObjectItemActionStyle
  public static func actionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ActionConfiguration) -> some View) -> FioriSwiftUICore.ObjectItemActionStyle
}
extension FioriSwiftUICore.OptionsStyle where Self == FioriSwiftUICore.OptionsBaseStyle {
  public static var base: FioriSwiftUICore.OptionsBaseStyle {
    get
  }
}
extension FioriSwiftUICore.OptionsStyle where Self == FioriSwiftUICore.OptionsFioriStyle {
  public static var fiori: FioriSwiftUICore.OptionsFioriStyle {
    get
  }
}
extension FioriSwiftUICore.OverflowActionStyle where Self == FioriSwiftUICore.OverflowActionBaseStyle {
  public static var base: FioriSwiftUICore.OverflowActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.OverflowActionStyle where Self == FioriSwiftUICore.OverflowActionFioriStyle {
  public static var fiori: FioriSwiftUICore.OverflowActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.PlaceholderStyle where Self == FioriSwiftUICore.PlaceholderBaseStyle {
  public static var base: FioriSwiftUICore.PlaceholderBaseStyle {
    get
  }
}
extension FioriSwiftUICore.PlaceholderStyle where Self == FioriSwiftUICore.PlaceholderFioriStyle {
  public static var fiori: FioriSwiftUICore.PlaceholderFioriStyle {
    get
  }
}
extension FioriSwiftUICore.PlaceholderTextEditorStyle where Self == FioriSwiftUICore.PlaceholderTextEditorBaseStyle {
  public static var base: FioriSwiftUICore.PlaceholderTextEditorBaseStyle {
    get
  }
}
extension FioriSwiftUICore.PlaceholderTextEditorStyle where Self == FioriSwiftUICore.PlaceholderTextEditorFioriStyle {
  public static var fiori: FioriSwiftUICore.PlaceholderTextEditorFioriStyle {
    get
  }
}
public struct PlaceholderTextEditorTextViewStyle : FioriSwiftUICore.PlaceholderTextEditorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021PlaceholderTextEditorE9ViewStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.PlaceholderTextEditorStyle where Self == FioriSwiftUICore.PlaceholderTextEditorTextViewStyle {
  public static func textViewStyle(_ style: some TextViewStyle) -> FioriSwiftUICore.PlaceholderTextEditorTextViewStyle
  public static func textViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextViewConfiguration) -> some View) -> FioriSwiftUICore.PlaceholderTextEditorTextViewStyle
}
public struct PlaceholderTextEditorPlaceholderStyle : FioriSwiftUICore.PlaceholderTextEditorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021PlaceholderTextEditorD5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.PlaceholderTextEditorStyle where Self == FioriSwiftUICore.PlaceholderTextEditorPlaceholderStyle {
  public static func placeholderStyle(_ style: some PlaceholderStyle) -> FioriSwiftUICore.PlaceholderTextEditorPlaceholderStyle
  public static func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> FioriSwiftUICore.PlaceholderTextEditorPlaceholderStyle
}
extension FioriSwiftUICore.PlaceholderTextFieldStyle where Self == FioriSwiftUICore.PlaceholderTextFieldBaseStyle {
  public static var base: FioriSwiftUICore.PlaceholderTextFieldBaseStyle {
    get
  }
}
extension FioriSwiftUICore.PlaceholderTextFieldStyle where Self == FioriSwiftUICore.PlaceholderTextFieldFioriStyle {
  public static var fiori: FioriSwiftUICore.PlaceholderTextFieldFioriStyle {
    get
  }
}
public struct PlaceholderTextFieldTextInputFieldStyle : FioriSwiftUICore.PlaceholderTextFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020PlaceholderTextFielde5InputF5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.PlaceholderTextFieldStyle where Self == FioriSwiftUICore.PlaceholderTextFieldTextInputFieldStyle {
  public static func textInputFieldStyle(_ style: some TextInputFieldStyle) -> FioriSwiftUICore.PlaceholderTextFieldTextInputFieldStyle
  public static func textInputFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextInputFieldConfiguration) -> some View) -> FioriSwiftUICore.PlaceholderTextFieldTextInputFieldStyle
}
public struct PlaceholderTextFieldPlaceholderStyle : FioriSwiftUICore.PlaceholderTextFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020PlaceholderTextFieldD5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.PlaceholderTextFieldStyle where Self == FioriSwiftUICore.PlaceholderTextFieldPlaceholderStyle {
  public static func placeholderStyle(_ style: some PlaceholderStyle) -> FioriSwiftUICore.PlaceholderTextFieldPlaceholderStyle
  public static func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> FioriSwiftUICore.PlaceholderTextFieldPlaceholderStyle
}
extension FioriSwiftUICore.ProfileHeaderStyle where Self == FioriSwiftUICore.ProfileHeaderBaseStyle {
  public static var base: FioriSwiftUICore.ProfileHeaderBaseStyle {
    get
  }
}
extension FioriSwiftUICore.ProfileHeaderStyle where Self == FioriSwiftUICore.ProfileHeaderFioriStyle {
  public static var fiori: FioriSwiftUICore.ProfileHeaderFioriStyle {
    get
  }
}
public struct ProfileHeaderDetailImageStyle : FioriSwiftUICore.ProfileHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29ProfileHeaderDetailImageStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ProfileHeaderStyle where Self == FioriSwiftUICore.ProfileHeaderDetailImageStyle {
  public static func detailImageStyle(_ style: some DetailImageStyle) -> FioriSwiftUICore.ProfileHeaderDetailImageStyle
  public static func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> FioriSwiftUICore.ProfileHeaderDetailImageStyle
}
public struct ProfileHeaderTitleStyle : FioriSwiftUICore.ProfileHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23ProfileHeaderTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ProfileHeaderStyle where Self == FioriSwiftUICore.ProfileHeaderTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.ProfileHeaderTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.ProfileHeaderTitleStyle
}
public struct ProfileHeaderSubtitleStyle : FioriSwiftUICore.ProfileHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26ProfileHeaderSubtitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ProfileHeaderStyle where Self == FioriSwiftUICore.ProfileHeaderSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.ProfileHeaderSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.ProfileHeaderSubtitleStyle
}
public struct ProfileHeaderDescriptionStyle : FioriSwiftUICore.ProfileHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29ProfileHeaderDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ProfileHeaderStyle where Self == FioriSwiftUICore.ProfileHeaderDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.ProfileHeaderDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.ProfileHeaderDescriptionStyle
}
extension FioriSwiftUICore.RatingControlStyle where Self == FioriSwiftUICore.RatingControlBaseStyle {
  public static var base: FioriSwiftUICore.RatingControlBaseStyle {
    get
  }
}
extension FioriSwiftUICore.RatingControlStyle where Self == FioriSwiftUICore.RatingControlFioriStyle {
  public static var fiori: FioriSwiftUICore.RatingControlFioriStyle {
    get
  }
}
extension FioriSwiftUICore.RatingControlFormViewStyle where Self == FioriSwiftUICore.RatingControlFormViewBaseStyle {
  public static var base: FioriSwiftUICore.RatingControlFormViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.RatingControlFormViewStyle where Self == FioriSwiftUICore.RatingControlFormViewFioriStyle {
  public static var fiori: FioriSwiftUICore.RatingControlFormViewFioriStyle {
    get
  }
}
public struct RatingControlFormViewTitleStyle : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31RatingControlFormViewTitleStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.RatingControlFormViewStyle where Self == FioriSwiftUICore.RatingControlFormViewTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.RatingControlFormViewTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.RatingControlFormViewTitleStyle
}
public struct RatingControlFormViewSubtitleStyle : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34RatingControlFormViewSubtitleStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.RatingControlFormViewStyle where Self == FioriSwiftUICore.RatingControlFormViewSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.RatingControlFormViewSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.RatingControlFormViewSubtitleStyle
}
public struct RatingControlFormViewRatingControlStyle : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021RatingControlFormViewdE5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.RatingControlFormViewStyle where Self == FioriSwiftUICore.RatingControlFormViewRatingControlStyle {
  public static func ratingControlStyle(_ style: some RatingControlStyle) -> FioriSwiftUICore.RatingControlFormViewRatingControlStyle
  public static func ratingControlStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.RatingControlConfiguration) -> some View) -> FioriSwiftUICore.RatingControlFormViewRatingControlStyle
}
public struct RatingControlFormViewFormViewStyle : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021RatingControlFormViewfG5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.RatingControlFormViewStyle where Self == FioriSwiftUICore.RatingControlFormViewFormViewStyle {
  public static func formViewStyle(_ style: some FormViewStyle) -> FioriSwiftUICore.RatingControlFormViewFormViewStyle
  public static func formViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FormViewConfiguration) -> some View) -> FioriSwiftUICore.RatingControlFormViewFormViewStyle
}
extension FioriSwiftUICore.Row1Style where Self == FioriSwiftUICore.Row1BaseStyle {
  public static var base: FioriSwiftUICore.Row1BaseStyle {
    get
  }
}
extension FioriSwiftUICore.Row1Style where Self == FioriSwiftUICore.Row1FioriStyle {
  public static var fiori: FioriSwiftUICore.Row1FioriStyle {
    get
  }
}
extension FioriSwiftUICore.Row2Style where Self == FioriSwiftUICore.Row2BaseStyle {
  public static var base: FioriSwiftUICore.Row2BaseStyle {
    get
  }
}
extension FioriSwiftUICore.Row2Style where Self == FioriSwiftUICore.Row2FioriStyle {
  public static var fiori: FioriSwiftUICore.Row2FioriStyle {
    get
  }
}
extension FioriSwiftUICore.Row3Style where Self == FioriSwiftUICore.Row3BaseStyle {
  public static var base: FioriSwiftUICore.Row3BaseStyle {
    get
  }
}
extension FioriSwiftUICore.Row3Style where Self == FioriSwiftUICore.Row3FioriStyle {
  public static var fiori: FioriSwiftUICore.Row3FioriStyle {
    get
  }
}
extension FioriSwiftUICore.SecondaryActionStyle where Self == FioriSwiftUICore.SecondaryActionBaseStyle {
  public static var base: FioriSwiftUICore.SecondaryActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SecondaryActionStyle where Self == FioriSwiftUICore.SecondaryActionFioriStyle {
  public static var fiori: FioriSwiftUICore.SecondaryActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.SecondaryTimestampStyle where Self == FioriSwiftUICore.SecondaryTimestampBaseStyle {
  public static var base: FioriSwiftUICore.SecondaryTimestampBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SecondaryTimestampStyle where Self == FioriSwiftUICore.SecondaryTimestampFioriStyle {
  public static var fiori: FioriSwiftUICore.SecondaryTimestampFioriStyle {
    get
  }
}
extension FioriSwiftUICore.SegmentedControlPickerStyle where Self == FioriSwiftUICore.SegmentedControlPickerBaseStyle {
  public static var base: FioriSwiftUICore.SegmentedControlPickerBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SegmentedControlPickerStyle where Self == FioriSwiftUICore.SegmentedControlPickerFioriStyle {
  public static var fiori: FioriSwiftUICore.SegmentedControlPickerFioriStyle {
    get
  }
}
public struct SegmentedControlPickerOptionsStyle : FioriSwiftUICore.SegmentedControlPickerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SegmentedControlPickerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34SegmentedControlPickerOptionsStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SegmentedControlPickerStyle where Self == FioriSwiftUICore.SegmentedControlPickerOptionsStyle {
  public static func optionsStyle(_ style: some OptionsStyle) -> FioriSwiftUICore.SegmentedControlPickerOptionsStyle
  public static func optionsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.OptionsConfiguration) -> some View) -> FioriSwiftUICore.SegmentedControlPickerOptionsStyle
}
extension FioriSwiftUICore.SideBarStyle where Self == FioriSwiftUICore.SideBarBaseStyle {
  public static var base: FioriSwiftUICore.SideBarBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SideBarStyle where Self == FioriSwiftUICore.SideBarFioriStyle {
  public static var fiori: FioriSwiftUICore.SideBarFioriStyle {
    get
  }
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemBaseStyle {
  public static var base: FioriSwiftUICore.SideBarListItemBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemFioriStyle {
  public static var fiori: FioriSwiftUICore.SideBarListItemFioriStyle {
    get
  }
}
public struct SideBarListItemIconStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24SideBarListItemIconStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.SideBarListItemIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.SideBarListItemIconStyle
}
public struct SideBarListItemFilledIconStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30SideBarListItemFilledIconStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemFilledIconStyle {
  public static func filledIconStyle(_ style: some FilledIconStyle) -> FioriSwiftUICore.SideBarListItemFilledIconStyle
  public static func filledIconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FilledIconConfiguration) -> some View) -> FioriSwiftUICore.SideBarListItemFilledIconStyle
}
public struct SideBarListItemTitleStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25SideBarListItemTitleStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.SideBarListItemTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.SideBarListItemTitleStyle
}
public struct SideBarListItemSubtitleStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28SideBarListItemSubtitleStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.SideBarListItemSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.SideBarListItemSubtitleStyle
}
public struct SideBarListItemAccessoryIconStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33SideBarListItemAccessoryIconStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemAccessoryIconStyle {
  public static func accessoryIconStyle(_ style: some AccessoryIconStyle) -> FioriSwiftUICore.SideBarListItemAccessoryIconStyle
  public static func accessoryIconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.AccessoryIconConfiguration) -> some View) -> FioriSwiftUICore.SideBarListItemAccessoryIconStyle
}
public struct SideBarListItemSwitchStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26SideBarListItemSwitchStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.SideBarListItemStyle where Self == FioriSwiftUICore.SideBarListItemSwitchStyle {
  public static func switchStyle(_ style: some SwitchStyle) -> FioriSwiftUICore.SideBarListItemSwitchStyle
  public static func switchStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SwitchConfiguration) -> some View) -> FioriSwiftUICore.SideBarListItemSwitchStyle
}
extension FioriSwiftUICore.StatusStyle where Self == FioriSwiftUICore.StatusBaseStyle {
  public static var base: FioriSwiftUICore.StatusBaseStyle {
    get
  }
}
extension FioriSwiftUICore.StatusStyle where Self == FioriSwiftUICore.StatusFioriStyle {
  public static var fiori: FioriSwiftUICore.StatusFioriStyle {
    get
  }
}
extension FioriSwiftUICore.StepperFieldStyle where Self == FioriSwiftUICore.StepperFieldBaseStyle {
  public static var base: FioriSwiftUICore.StepperFieldBaseStyle {
    get
  }
}
extension FioriSwiftUICore.StepperFieldStyle where Self == FioriSwiftUICore.StepperFieldFioriStyle {
  public static var fiori: FioriSwiftUICore.StepperFieldFioriStyle {
    get
  }
}
public struct StepperFieldDecrementActionStyle : FioriSwiftUICore.StepperFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore32StepperFieldDecrementActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperFieldStyle where Self == FioriSwiftUICore.StepperFieldDecrementActionStyle {
  public static func decrementActionStyle(_ style: some DecrementActionStyle) -> FioriSwiftUICore.StepperFieldDecrementActionStyle
  public static func decrementActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DecrementActionConfiguration) -> some View) -> FioriSwiftUICore.StepperFieldDecrementActionStyle
}
public struct StepperFieldTextInputFieldStyle : FioriSwiftUICore.StepperFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021StepperFieldTextInputE5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperFieldStyle where Self == FioriSwiftUICore.StepperFieldTextInputFieldStyle {
  public static func textInputFieldStyle(_ style: some TextInputFieldStyle) -> FioriSwiftUICore.StepperFieldTextInputFieldStyle
  public static func textInputFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextInputFieldConfiguration) -> some View) -> FioriSwiftUICore.StepperFieldTextInputFieldStyle
}
public struct StepperFieldIncrementActionStyle : FioriSwiftUICore.StepperFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore32StepperFieldIncrementActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperFieldStyle where Self == FioriSwiftUICore.StepperFieldIncrementActionStyle {
  public static func incrementActionStyle(_ style: some IncrementActionStyle) -> FioriSwiftUICore.StepperFieldIncrementActionStyle
  public static func incrementActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IncrementActionConfiguration) -> some View) -> FioriSwiftUICore.StepperFieldIncrementActionStyle
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewBaseStyle {
  public static var base: FioriSwiftUICore.StepperViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewFioriStyle {
  public static var fiori: FioriSwiftUICore.StepperViewFioriStyle {
    get
  }
}
public struct StepperViewTitleStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21StepperViewTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.StepperViewTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.StepperViewTitleStyle
}
public struct StepperViewDecrementActionStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31StepperViewDecrementActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewDecrementActionStyle {
  public static func decrementActionStyle(_ style: some DecrementActionStyle) -> FioriSwiftUICore.StepperViewDecrementActionStyle
  public static func decrementActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DecrementActionConfiguration) -> some View) -> FioriSwiftUICore.StepperViewDecrementActionStyle
}
public struct StepperViewTextInputFieldStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30StepperViewTextInputFieldStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewTextInputFieldStyle {
  public static func textInputFieldStyle(_ style: some TextInputFieldStyle) -> FioriSwiftUICore.StepperViewTextInputFieldStyle
  public static func textInputFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextInputFieldConfiguration) -> some View) -> FioriSwiftUICore.StepperViewTextInputFieldStyle
}
public struct StepperViewIncrementActionStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31StepperViewIncrementActionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewIncrementActionStyle {
  public static func incrementActionStyle(_ style: some IncrementActionStyle) -> FioriSwiftUICore.StepperViewIncrementActionStyle
  public static func incrementActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IncrementActionConfiguration) -> some View) -> FioriSwiftUICore.StepperViewIncrementActionStyle
}
public struct StepperViewIconStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20StepperViewIconStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.StepperViewIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.StepperViewIconStyle
}
public struct StepperViewDescriptionStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27StepperViewDescriptionStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewDescriptionStyle {
  public static func descriptionStyle(_ style: some DescriptionStyle) -> FioriSwiftUICore.StepperViewDescriptionStyle
  public static func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> FioriSwiftUICore.StepperViewDescriptionStyle
}
public struct StepperViewStepperFieldStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore011StepperViewD10FieldStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewStepperFieldStyle {
  public static func stepperFieldStyle(_ style: some StepperFieldStyle) -> FioriSwiftUICore.StepperViewStepperFieldStyle
  public static func stepperFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.StepperFieldConfiguration) -> some View) -> FioriSwiftUICore.StepperViewStepperFieldStyle
}
public struct StepperViewInformationViewStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore022StepperViewInformationE5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewInformationViewStyle {
  public static func informationViewStyle(_ style: some InformationViewStyle) -> FioriSwiftUICore.StepperViewInformationViewStyle
  public static func informationViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.InformationViewConfiguration) -> some View) -> FioriSwiftUICore.StepperViewInformationViewStyle
}
extension FioriSwiftUICore.SubAttributeStyle where Self == FioriSwiftUICore.SubAttributeBaseStyle {
  public static var base: FioriSwiftUICore.SubAttributeBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SubAttributeStyle where Self == FioriSwiftUICore.SubAttributeFioriStyle {
  public static var fiori: FioriSwiftUICore.SubAttributeFioriStyle {
    get
  }
}
extension FioriSwiftUICore.SubstatusStyle where Self == FioriSwiftUICore.SubstatusBaseStyle {
  public static var base: FioriSwiftUICore.SubstatusBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SubstatusStyle where Self == FioriSwiftUICore.SubstatusFioriStyle {
  public static var fiori: FioriSwiftUICore.SubstatusFioriStyle {
    get
  }
}
extension FioriSwiftUICore.SubtitleStyle where Self == FioriSwiftUICore.SubtitleBaseStyle {
  public static var base: FioriSwiftUICore.SubtitleBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SubtitleStyle where Self == FioriSwiftUICore.SubtitleFioriStyle {
  public static var fiori: FioriSwiftUICore.SubtitleFioriStyle {
    get
  }
}
extension FioriSwiftUICore.SwitchStyle where Self == FioriSwiftUICore.SwitchBaseStyle {
  public static var base: FioriSwiftUICore.SwitchBaseStyle {
    get
  }
}
extension FioriSwiftUICore.SwitchStyle where Self == FioriSwiftUICore.SwitchFioriStyle {
  public static var fiori: FioriSwiftUICore.SwitchFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TagsStyle where Self == FioriSwiftUICore.TagsBaseStyle {
  public static var base: FioriSwiftUICore.TagsBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TagsStyle where Self == FioriSwiftUICore.TagsFioriStyle {
  public static var fiori: FioriSwiftUICore.TagsFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TertiaryActionStyle where Self == FioriSwiftUICore.TertiaryActionBaseStyle {
  public static var base: FioriSwiftUICore.TertiaryActionBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TertiaryActionStyle where Self == FioriSwiftUICore.TertiaryActionFioriStyle {
  public static var fiori: FioriSwiftUICore.TertiaryActionFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewBaseStyle {
  public static var base: FioriSwiftUICore.TextFieldFormViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewFioriStyle {
  public static var fiori: FioriSwiftUICore.TextFieldFormViewFioriStyle {
    get
  }
}
public struct TextFieldFormViewTitleStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27TextFieldFormViewTitleStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.TextFieldFormViewTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.TextFieldFormViewTitleStyle
}
public struct TextFieldFormViewTextInputFieldStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore017TextFieldFormViewd5InputE5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewTextInputFieldStyle {
  public static func textInputFieldStyle(_ style: some TextInputFieldStyle) -> FioriSwiftUICore.TextFieldFormViewTextInputFieldStyle
  public static func textInputFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextInputFieldConfiguration) -> some View) -> FioriSwiftUICore.TextFieldFormViewTextInputFieldStyle
}
public struct TextFieldFormViewPlaceholderStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33TextFieldFormViewPlaceholderStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewPlaceholderStyle {
  public static func placeholderStyle(_ style: some PlaceholderStyle) -> FioriSwiftUICore.TextFieldFormViewPlaceholderStyle
  public static func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> FioriSwiftUICore.TextFieldFormViewPlaceholderStyle
}
public struct TextFieldFormViewMandatoryFieldIndicatorStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore026TextFieldFormViewMandatoryE14IndicatorStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewMandatoryFieldIndicatorStyle {
  public static func mandatoryFieldIndicatorStyle(_ style: some MandatoryFieldIndicatorStyle) -> FioriSwiftUICore.TextFieldFormViewMandatoryFieldIndicatorStyle
  public static func mandatoryFieldIndicatorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> some View) -> FioriSwiftUICore.TextFieldFormViewMandatoryFieldIndicatorStyle
}
public struct TextFieldFormViewTitleFormViewStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore022TextFieldFormViewTitlefG5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TextFieldFormViewStyle where Self == FioriSwiftUICore.TextFieldFormViewTitleFormViewStyle {
  public static func titleFormViewStyle(_ style: some TitleFormViewStyle) -> FioriSwiftUICore.TextFieldFormViewTitleFormViewStyle
  public static func titleFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleFormViewConfiguration) -> some View) -> FioriSwiftUICore.TextFieldFormViewTitleFormViewStyle
}
extension FioriSwiftUICore.TextInputFieldStyle where Self == FioriSwiftUICore.TextInputFieldBaseStyle {
  public static var base: FioriSwiftUICore.TextInputFieldBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TextInputFieldStyle where Self == FioriSwiftUICore.TextInputFieldFioriStyle {
  public static var fiori: FioriSwiftUICore.TextInputFieldFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TextViewStyle where Self == FioriSwiftUICore.TextViewBaseStyle {
  public static var base: FioriSwiftUICore.TextViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TextViewStyle where Self == FioriSwiftUICore.TextViewFioriStyle {
  public static var fiori: FioriSwiftUICore.TextViewFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineBaseStyle {
  public static var base: FioriSwiftUICore.TimelineBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineFioriStyle {
  public static var fiori: FioriSwiftUICore.TimelineFioriStyle {
    get
  }
}
public struct TimelineTimestampStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22TimelineTimestampStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineTimestampStyle {
  public static func timestampStyle(_ style: some TimestampStyle) -> FioriSwiftUICore.TimelineTimestampStyle
  public static func timestampStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimestampConfiguration) -> some View) -> FioriSwiftUICore.TimelineTimestampStyle
}
public struct TimelineSecondaryTimestampStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31TimelineSecondaryTimestampStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineSecondaryTimestampStyle {
  public static func secondaryTimestampStyle(_ style: some SecondaryTimestampStyle) -> FioriSwiftUICore.TimelineSecondaryTimestampStyle
  public static func secondaryTimestampStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryTimestampConfiguration) -> some View) -> FioriSwiftUICore.TimelineSecondaryTimestampStyle
}
public struct TimelineTimelineNodeStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08TimelineD9NodeStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineTimelineNodeStyle {
  public static func timelineNodeStyle(_ style: some TimelineNodeStyle) -> FioriSwiftUICore.TimelineTimelineNodeStyle
  public static func timelineNodeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimelineNodeConfiguration) -> some View) -> FioriSwiftUICore.TimelineTimelineNodeStyle
}
public struct TimelineIconStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17TimelineIconStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.TimelineIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.TimelineIconStyle
}
public struct TimelineTitleStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18TimelineTitleStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.TimelineTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.TimelineTitleStyle
}
public struct TimelineSubtitleStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21TimelineSubtitleStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineSubtitleStyle {
  public static func subtitleStyle(_ style: some SubtitleStyle) -> FioriSwiftUICore.TimelineSubtitleStyle
  public static func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> FioriSwiftUICore.TimelineSubtitleStyle
}
public struct TimelineAttributeStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22TimelineAttributeStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineAttributeStyle {
  public static func attributeStyle(_ style: some AttributeStyle) -> FioriSwiftUICore.TimelineAttributeStyle
  public static func attributeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.AttributeConfiguration) -> some View) -> FioriSwiftUICore.TimelineAttributeStyle
}
public struct TimelineStatusStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19TimelineStatusStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineStatusStyle {
  public static func statusStyle(_ style: some StatusStyle) -> FioriSwiftUICore.TimelineStatusStyle
  public static func statusStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.StatusConfiguration) -> some View) -> FioriSwiftUICore.TimelineStatusStyle
}
public struct TimelineSubstatusStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22TimelineSubstatusStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineSubstatusStyle {
  public static func substatusStyle(_ style: some SubstatusStyle) -> FioriSwiftUICore.TimelineSubstatusStyle
  public static func substatusStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubstatusConfiguration) -> some View) -> FioriSwiftUICore.TimelineSubstatusStyle
}
public struct TimelineSubAttributeStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25TimelineSubAttributeStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineStyle where Self == FioriSwiftUICore.TimelineSubAttributeStyle {
  public static func subAttributeStyle(_ style: some SubAttributeStyle) -> FioriSwiftUICore.TimelineSubAttributeStyle
  public static func subAttributeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubAttributeConfiguration) -> some View) -> FioriSwiftUICore.TimelineSubAttributeStyle
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerBaseStyle {
  public static var base: FioriSwiftUICore.TimelineMarkerBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerFioriStyle {
  public static var fiori: FioriSwiftUICore.TimelineMarkerFioriStyle {
    get
  }
}
public struct TimelineMarkerTimestampStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28TimelineMarkerTimestampStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerTimestampStyle {
  public static func timestampStyle(_ style: some TimestampStyle) -> FioriSwiftUICore.TimelineMarkerTimestampStyle
  public static func timestampStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimestampConfiguration) -> some View) -> FioriSwiftUICore.TimelineMarkerTimestampStyle
}
public struct TimelineMarkerSecondaryTimestampStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore37TimelineMarkerSecondaryTimestampStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerSecondaryTimestampStyle {
  public static func secondaryTimestampStyle(_ style: some SecondaryTimestampStyle) -> FioriSwiftUICore.TimelineMarkerSecondaryTimestampStyle
  public static func secondaryTimestampStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryTimestampConfiguration) -> some View) -> FioriSwiftUICore.TimelineMarkerSecondaryTimestampStyle
}
public struct TimelineMarkerTimelineNodeStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014TimelineMarkerD9NodeStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerTimelineNodeStyle {
  public static func timelineNodeStyle(_ style: some TimelineNodeStyle) -> FioriSwiftUICore.TimelineMarkerTimelineNodeStyle
  public static func timelineNodeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimelineNodeConfiguration) -> some View) -> FioriSwiftUICore.TimelineMarkerTimelineNodeStyle
}
public struct TimelineMarkerIconStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23TimelineMarkerIconStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerIconStyle {
  public static func iconStyle(_ style: some IconStyle) -> FioriSwiftUICore.TimelineMarkerIconStyle
  public static func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> FioriSwiftUICore.TimelineMarkerIconStyle
}
public struct TimelineMarkerTitleStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24TimelineMarkerTitleStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineMarkerStyle where Self == FioriSwiftUICore.TimelineMarkerTitleStyle {
  public static func titleStyle(_ style: some TitleStyle) -> FioriSwiftUICore.TimelineMarkerTitleStyle
  public static func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> FioriSwiftUICore.TimelineMarkerTitleStyle
}
extension FioriSwiftUICore.TimelineNodeStyle where Self == FioriSwiftUICore.TimelineNodeBaseStyle {
  public static var base: FioriSwiftUICore.TimelineNodeBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TimelineNodeStyle where Self == FioriSwiftUICore.TimelineNodeFioriStyle {
  public static var fiori: FioriSwiftUICore.TimelineNodeFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TimelineNowIndicatorStyle where Self == FioriSwiftUICore.TimelineNowIndicatorBaseStyle {
  public static var base: FioriSwiftUICore.TimelineNowIndicatorBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TimelineNowIndicatorStyle where Self == FioriSwiftUICore.TimelineNowIndicatorFioriStyle {
  public static var fiori: FioriSwiftUICore.TimelineNowIndicatorFioriStyle {
    get
  }
}
public struct TimelineNowIndicatorNowIndicatorNodeStyle : FioriSwiftUICore.TimelineNowIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNowIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020TimelineNowIndicatoreF9NodeStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TimelineNowIndicatorStyle where Self == FioriSwiftUICore.TimelineNowIndicatorNowIndicatorNodeStyle {
  public static func nowIndicatorNodeStyle(_ style: some NowIndicatorNodeStyle) -> FioriSwiftUICore.TimelineNowIndicatorNowIndicatorNodeStyle
  public static func nowIndicatorNodeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.NowIndicatorNodeConfiguration) -> some View) -> FioriSwiftUICore.TimelineNowIndicatorNowIndicatorNodeStyle
}
extension FioriSwiftUICore.TimestampStyle where Self == FioriSwiftUICore.TimestampBaseStyle {
  public static var base: FioriSwiftUICore.TimestampBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TimestampStyle where Self == FioriSwiftUICore.TimestampFioriStyle {
  public static var fiori: FioriSwiftUICore.TimestampFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TitleStyle where Self == FioriSwiftUICore.TitleBaseStyle {
  public static var base: FioriSwiftUICore.TitleBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TitleStyle where Self == FioriSwiftUICore.TitleFioriStyle {
  public static var fiori: FioriSwiftUICore.TitleFioriStyle {
    get
  }
}
extension FioriSwiftUICore.TitleFormViewStyle where Self == FioriSwiftUICore.TitleFormViewBaseStyle {
  public static var base: FioriSwiftUICore.TitleFormViewBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TitleFormViewStyle where Self == FioriSwiftUICore.TitleFormViewFioriStyle {
  public static var fiori: FioriSwiftUICore.TitleFormViewFioriStyle {
    get
  }
}
public struct TitleFormViewTextInputFieldStyle : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore32TitleFormViewTextInputFieldStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TitleFormViewStyle where Self == FioriSwiftUICore.TitleFormViewTextInputFieldStyle {
  public static func textInputFieldStyle(_ style: some TextInputFieldStyle) -> FioriSwiftUICore.TitleFormViewTextInputFieldStyle
  public static func textInputFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextInputFieldConfiguration) -> some View) -> FioriSwiftUICore.TitleFormViewTextInputFieldStyle
}
public struct TitleFormViewPlaceholderStyle : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29TitleFormViewPlaceholderStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TitleFormViewStyle where Self == FioriSwiftUICore.TitleFormViewPlaceholderStyle {
  public static func placeholderStyle(_ style: some PlaceholderStyle) -> FioriSwiftUICore.TitleFormViewPlaceholderStyle
  public static func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> FioriSwiftUICore.TitleFormViewPlaceholderStyle
}
public struct TitleFormViewPlaceholderTextFieldStyle : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore38TitleFormViewPlaceholderTextFieldStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TitleFormViewStyle where Self == FioriSwiftUICore.TitleFormViewPlaceholderTextFieldStyle {
  public static func placeholderTextFieldStyle(_ style: some PlaceholderTextFieldStyle) -> FioriSwiftUICore.TitleFormViewPlaceholderTextFieldStyle
  public static func placeholderTextFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some View) -> FioriSwiftUICore.TitleFormViewPlaceholderTextFieldStyle
}
public struct TitleFormViewFormViewStyle : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013TitleFormVieweF5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TitleFormViewStyle where Self == FioriSwiftUICore.TitleFormViewFormViewStyle {
  public static func formViewStyle(_ style: some FormViewStyle) -> FioriSwiftUICore.TitleFormViewFormViewStyle
  public static func formViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FormViewConfiguration) -> some View) -> FioriSwiftUICore.TitleFormViewFormViewStyle
}
extension FioriSwiftUICore.TopDividerStyle where Self == FioriSwiftUICore.TopDividerBaseStyle {
  public static var base: FioriSwiftUICore.TopDividerBaseStyle {
    get
  }
}
extension FioriSwiftUICore.TopDividerStyle where Self == FioriSwiftUICore.TopDividerFioriStyle {
  public static var fiori: FioriSwiftUICore.TopDividerFioriStyle {
    get
  }
}
public struct ConfigurationViewWrapper : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24ConfigurationViewWrapperV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.ConfigurationViewWrapper : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct ContactItem<Title, Subtitle, DescriptionText, DetailImage, ActionItems> where Title : SwiftUI.View, Subtitle : SwiftUI.View, DescriptionText : SwiftUI.View, DetailImage : SwiftUI.View, ActionItems : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where Title == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, DetailImage == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, ActionItems == SwiftUI._ConditionalContent<FioriSwiftUICore.ActivityItems, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.ContactItemModel)
  public init(title: Swift.String, subtitle: Swift.String? = nil, descriptionText: Swift.String? = nil, detailImage: SwiftUI.Image? = nil, actionItems: FioriSwiftUICore.ActivityItems? = nil)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ContactItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where DescriptionText == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ContactItem where DetailImage == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder actionItems: () -> ActionItems)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ContactItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.ContactItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionItems == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.ContactItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11ContactItemV4bodyQrvp", 0) __<Title, Subtitle, DescriptionText, DetailImage, ActionItems>
}
extension FioriSwiftUICore.ContactItemModel {
  public var actionItems: (any FioriSwiftUICore.ActivityItemsModel)? {
    get
  }
}
public struct ControlState : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let normal: FioriSwiftUICore.ControlState
  public static let highlighted: FioriSwiftUICore.ControlState
  public static let disabled: FioriSwiftUICore.ControlState
  public static let selected: FioriSwiftUICore.ControlState
  public static let focused: FioriSwiftUICore.ControlState
  public static let readOnly: FioriSwiftUICore.ControlState
  public typealias ArrayLiteralElement = FioriSwiftUICore.ControlState
  public typealias Element = FioriSwiftUICore.ControlState
  public typealias RawValue = Swift.UInt
}
extension FioriSwiftUICore.ControlState : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Counter {
  public init(@SwiftUI.ViewBuilder counter: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Counter {
  public init(counter: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Counter {
  public init(_ configuration: FioriSwiftUICore.CounterConfiguration)
}
extension FioriSwiftUICore.Counter : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7CounterV4bodyQrvp", 0) __
}
public struct CounterBaseStyle : FioriSwiftUICore.CounterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CounterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16CounterBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct CounterFioriStyle : FioriSwiftUICore.CounterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CounterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore07CounterA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol CounterStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.CounterConfiguration) -> Self.Body
}
public struct CounterConfiguration {
  public let counter: FioriSwiftUICore.CounterConfiguration.Counter
  public typealias Counter = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct DataDateItem : Swift.Equatable {
  public let type: FioriSwiftUICore.DataItemType
  public var date: Foundation.Date
  public var text: Swift.String
  public var font: SwiftUI.Font?
  public var uifont: UIKit.UIFont?
  public var lineLimit: Swift.Int?
  public var textColor: SwiftUI.Color?
  public var binding: FioriSwiftUICore.ObjectViewProperty.Text?
  public var isReadonly: Swift.Bool?
  public init(_ date: Foundation.Date, _ font: SwiftUI.Font? = nil, _ textColor: SwiftUI.Color? = nil, _ binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public init(date: Foundation.Date, uifont: UIKit.UIFont? = nil, textColor: SwiftUI.Color? = nil, binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.DataDateItem, rhs: FioriSwiftUICore.DataDateItem) -> Swift.Bool
}
public struct DataDurationItem : Swift.Equatable {
  public var type: FioriSwiftUICore.DataItemType
  public var duration: Foundation.TimeInterval
  public var text: Swift.String
  public var font: SwiftUI.Font?
  public var uifont: UIKit.UIFont?
  public var lineLimit: Swift.Int?
  public var textColor: SwiftUI.Color?
  public var binding: FioriSwiftUICore.ObjectViewProperty.Text?
  public var isReadonly: Swift.Bool?
  public init(_ duration: Foundation.TimeInterval, _ font: SwiftUI.Font? = nil, _ textColor: SwiftUI.Color? = nil, _ binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public init(duration: Foundation.TimeInterval, uifont: UIKit.UIFont? = nil, textColor: SwiftUI.Color? = nil, binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.DataDurationItem, rhs: FioriSwiftUICore.DataDurationItem) -> Swift.Bool
}
public struct DataImageItem : Swift.Equatable {
  public var type: FioriSwiftUICore.DataItemType
  public var binding: FioriSwiftUICore.ObjectViewProperty.Image?
  public var image: SwiftUI.Image
  public var tintColor: SwiftUI.Color?
  public var isReadonly: Swift.Bool?
  public init(_ image: SwiftUI.Image, _ tintColor: SwiftUI.Color? = nil, _ binding: FioriSwiftUICore.ObjectViewProperty.Image? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.DataImageItem, rhs: FioriSwiftUICore.DataImageItem) -> Swift.Bool
}
public enum DataItemType : Swift.Int, Swift.CaseIterable {
  case text
  case image
  case date
  case time
  case duration
  case listitem
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FioriSwiftUICore.DataItemType]
  public typealias RawValue = Swift.Int
  public static var allCases: [FioriSwiftUICore.DataItemType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol DataItem {
  var type: FioriSwiftUICore.DataItemType { get }
  var isReadonly: Swift.Bool? { get set }
  func toView() -> SwiftUI.AnyView
}
public enum ObjectViewProperty {
  public enum Text {
    case title
    case subtitle
    case footnote
    case status
    case substatus
    public static func == (a: FioriSwiftUICore.ObjectViewProperty.Text, b: FioriSwiftUICore.ObjectViewProperty.Text) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Image {
    case detailImage
    case statusImage
    case substatusImage
    public static func == (a: FioriSwiftUICore.ObjectViewProperty.Image, b: FioriSwiftUICore.ObjectViewProperty.Image) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct DataListItem : Swift.Equatable {
  public let type: FioriSwiftUICore.DataItemType
  public var text: Swift.String
  public var font: SwiftUI.Font?
  public var uifont: UIKit.UIFont?
  public var lineLimit: Swift.Int?
  public var textColor: SwiftUI.Color?
  public var binding: FioriSwiftUICore.ObjectViewProperty.Text?
  public var isReadonly: Swift.Bool?
  public init(_ text: Swift.String, _ font: SwiftUI.Font? = nil, _ textColor: SwiftUI.Color? = nil, _ binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public init(text: Swift.String, uifont: UIKit.UIFont? = nil, textColor: SwiftUI.Color? = nil, binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.DataListItem, rhs: FioriSwiftUICore.DataListItem) -> Swift.Bool
}
@_Concurrency.MainActor(unsafe) public struct DataTable : SwiftUI.View {
  @SwiftUI.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor(unsafe) public var model: FioriSwiftUICore.TableModel {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $model: SwiftUI.ObservedObject<FioriSwiftUICore.TableModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(model: FioriSwiftUICore.TableModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9DataTableV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.DataTable {
  @_Concurrency.MainActor(unsafe) public func backgroundColor(_ color: SwiftUI.Color) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func headerSticky(_ value: Swift.Bool) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func firstColumnSticky(_ value: Swift.Bool) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func pinchZoomEnable(_ value: Swift.Bool) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func showListView(_ value: Swift.Bool) -> FioriSwiftUICore.DataTable
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) public func editingMode(_ value: Swift.Bool = false) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func showColumnDivider(_ value: Swift.Bool = true) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func showRowDivider(_ value: Swift.Bool = true) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func dataCellPadding(_ insets: SwiftUI.EdgeInsets) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func headerCellPadding(_ insets: SwiftUI.EdgeInsets) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func minRowHeight(_ value: CoreFoundation.CGFloat) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func minColumnWidth(_ value: CoreFoundation.CGFloat) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func allowsPartialRowDisplay(_ value: Swift.Bool) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func rowAlignment(_ value: FioriSwiftUICore.RowAlignment) -> FioriSwiftUICore.DataTable
  @_Concurrency.MainActor(unsafe) public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func rectForCell(at rowIndex: Swift.Int, columnIndex: Swift.Int, isRelativeToContentOffset: Swift.Bool = false) -> CoreFoundation.CGRect
}
public struct DataTextItem : Swift.Equatable {
  public let type: FioriSwiftUICore.DataItemType
  public var text: Swift.String
  public var font: SwiftUI.Font?
  public var uifont: UIKit.UIFont?
  public var lineLimit: Swift.Int?
  public var textColor: SwiftUI.Color?
  public var binding: FioriSwiftUICore.ObjectViewProperty.Text?
  public var isReadonly: Swift.Bool?
  public init(_ text: Swift.String, _ font: SwiftUI.Font? = nil, _ textColor: SwiftUI.Color? = nil, _ binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public init(text: Swift.String, uifont: UIKit.UIFont? = nil, textColor: SwiftUI.Color? = nil, binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.DataTextItem, rhs: FioriSwiftUICore.DataTextItem) -> Swift.Bool
}
public struct DataTimeItem : Swift.Equatable {
  public var type: FioriSwiftUICore.DataItemType
  public var date: Foundation.Date
  public var text: Swift.String
  public var font: SwiftUI.Font?
  public var uifont: UIKit.UIFont?
  public var lineLimit: Swift.Int?
  public var textColor: SwiftUI.Color?
  public var binding: FioriSwiftUICore.ObjectViewProperty.Text?
  public var isReadonly: Swift.Bool?
  public init(_ date: Foundation.Date, _ font: SwiftUI.Font? = nil, _ textColor: SwiftUI.Color? = nil, _ binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public init(date: Foundation.Date, uifont: UIKit.UIFont? = nil, textColor: SwiftUI.Color? = nil, binding: FioriSwiftUICore.ObjectViewProperty.Text? = nil, lineLimit: Swift.Int? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.DataTimeItem, rhs: FioriSwiftUICore.DataTimeItem) -> Swift.Bool
}
public struct DecrementAction {
  public init(@SwiftUI.ViewBuilder decrementAction: () -> any SwiftUI.View = { FioriButton { _ in FioriIcon.actions.less } })
}
extension FioriSwiftUICore.DecrementAction {
  public init(decrementAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in FioriIcon.actions.less })
}
extension FioriSwiftUICore.DecrementAction {
  public init(_ configuration: FioriSwiftUICore.DecrementActionConfiguration)
}
extension FioriSwiftUICore.DecrementAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15DecrementActionV4bodyQrvp", 0) __
}
public struct DecrementActionBaseStyle : FioriSwiftUICore.DecrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DecrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24DecrementActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct DecrementActionFioriStyle : FioriSwiftUICore.DecrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DecrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore015DecrementActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct DecrementActionActivateStyle : FioriSwiftUICore.DecrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DecrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28DecrementActionActivateStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct DecrementActionDeactivateStyle : FioriSwiftUICore.DecrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DecrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30DecrementActionDeactivateStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.DecrementActionStyle where Self == FioriSwiftUICore.DecrementActionActivateStyle {
  public static var activate: FioriSwiftUICore.DecrementActionActivateStyle {
    get
  }
}
extension FioriSwiftUICore.DecrementActionStyle where Self == FioriSwiftUICore.DecrementActionDeactivateStyle {
  public static var deactivate: FioriSwiftUICore.DecrementActionDeactivateStyle {
    get
  }
}
public protocol DecrementActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.DecrementActionConfiguration) -> Self.Body
}
public struct DecrementActionConfiguration {
  public let decrementAction: FioriSwiftUICore.DecrementActionConfiguration.DecrementAction
  public typealias DecrementAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct _AllowActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _NextActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _CancelActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _ResetActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _ApplyActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _AgreeActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _DisagreeActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _DenyActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _NotNowActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _TapToSignActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _ReEnterSignatureActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _ClearActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _SaveActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct _DoneActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public let _UserConsentFormAlertConfigurationDefault: (_ alertType: FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?
public struct _AllStepsActionDefault : FioriSwiftUICore._ActionModel {
  public var actionText: Swift.String? {
    get
  }
  public init()
}
public struct CustomNewTitleColorStyle : FioriSwiftUICore.TitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24CustomNewTitleColorStyleV8makeBodyyQrAA0F13ConfigurationVF", 0) __
}
public struct Description {
  public init(@SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Description {
  public init(description: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Description {
  public init(_ configuration: FioriSwiftUICore.DescriptionConfiguration)
}
extension FioriSwiftUICore.Description : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11DescriptionV4bodyQrvp", 0) __
}
public struct DescriptionBaseStyle : FioriSwiftUICore.DescriptionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DescriptionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20DescriptionBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct DescriptionFioriStyle : FioriSwiftUICore.DescriptionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DescriptionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore011DescriptionA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol DescriptionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.DescriptionConfiguration) -> Self.Body
}
public struct DescriptionConfiguration {
  public let description: FioriSwiftUICore.DescriptionConfiguration.Description
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct DetailImage {
  public init(@SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.DetailImage {
  public init(detailImage: SwiftUI.Image? = nil)
}
extension FioriSwiftUICore.DetailImage {
  public init(_ configuration: FioriSwiftUICore.DetailImageConfiguration)
}
extension FioriSwiftUICore.DetailImage : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11DetailImageV4bodyQrvp", 0) __
}
public struct DetailImageBaseStyle : FioriSwiftUICore.DetailImageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DetailImageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20DetailImageBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct DetailImageFioriStyle : FioriSwiftUICore.DetailImageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DetailImageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore011DetailImageA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol DetailImageStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.DetailImageConfiguration) -> Self.Body
}
public struct DetailImageConfiguration {
  public let detailImage: FioriSwiftUICore.DetailImageConfiguration.DetailImage
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
}
@_Concurrency.MainActor(unsafe) public struct DimensionSelector : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var titles: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentAttributes: [FioriSwiftUICore.ControlState : FioriSwiftUICore.SegmentAttributes] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleInsets: SwiftUI.EdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var interItemSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEnable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentInset: SwiftUI.EdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var segmentWidthMode: FioriSwiftUICore.SegmentWidthMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowEmptySelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectionDidChangePublisher: Combine.AnyPublisher<Swift.Int?, Swift.Never> {
    mutating get
  }
  @_Concurrency.MainActor(unsafe) public var _heightDidChangePublisher: Combine.CurrentValueSubject<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(segmentTitles: [Swift.String], interItemSpacing: CoreFoundation.CGFloat = 6, titleInsets: SwiftUI.EdgeInsets = EdgeInsets(top: 8, leading: 8, bottom: 8, trailing: 8), selectedIndex: Swift.Int? = nil, contentInset: SwiftUI.EdgeInsets? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17DimensionSelectorV4bodyQrvp", 0) __
}
@available(*, unavailable, renamed: "DimensionSelector")
public typealias SegmentedControl = FioriSwiftUICore.DimensionSelector
public struct DurationPicker {
  public init(model: any FioriSwiftUICore.DurationPickerModel)
  public init(selection: SwiftUI.Binding<Swift.Int>, maximumMinutes: Swift.Int = 1439, minimumMinutes: Swift.Int = 0, minuteInterval: Swift.Int = 1, measurementFormatter: Foundation.MeasurementFormatter = MeasurementFormatter())
}
extension FioriSwiftUICore.DurationPicker : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public func measurementFormatter(_ measurementFormatter: Foundation.MeasurementFormatter) -> FioriSwiftUICore.DurationPicker
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14DurationPickerV4bodyQrvp", 0) __
}
public struct EULAView<Title, BodyAttributedText, ActionView, SecondaryActionView, CancelActionView> where Title : SwiftUI.View, BodyAttributedText : SwiftUI.View, ActionView : SwiftUI.View, SecondaryActionView : SwiftUI.View, CancelActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where Title == SwiftUI.Text, BodyAttributedText == SwiftUI._ConditionalContent<FioriSwiftUICore.AttributedText, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, SecondaryActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.EULAViewModel)
  public init(title: Swift.String, bodyAttributedText: Foundation.NSAttributedString? = nil, action: FioriSwiftUICore._Action? = _Action(model: _AgreeActionDefault()), secondaryAction: FioriSwiftUICore._Action? = _Action(model: _DisagreeActionDefault()), cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()), didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where ActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where SecondaryActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, ActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, SecondaryActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where ActionView == FioriSwiftUICore._Action, SecondaryActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where ActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where SecondaryActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder action: () -> ActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, ActionView == FioriSwiftUICore._Action, SecondaryActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, ActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, SecondaryActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where ActionView == FioriSwiftUICore._Action, SecondaryActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView where BodyAttributedText == SwiftUI.EmptyView, ActionView == FioriSwiftUICore._Action, SecondaryActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder title: () -> Title, didAgree: (() -> Swift.Void)? = nil, didDisagree: (() -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.EULAView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8EULAViewV4bodyQrvp", 0) __<Title, BodyAttributedText, ActionView, SecondaryActionView, CancelActionView>
}
extension FioriSwiftUICore.EULAViewModel {
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var secondaryAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var cancelAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var didAgree: (() -> Swift.Void)? {
    get
  }
  public var didDisagree: (() -> Swift.Void)? {
    get
  }
  public var didCancel: (() -> Swift.Void)? {
    get
  }
}
public struct EmptyStateView<Title, DescriptionText, DetailImage, ActionView> where Title : SwiftUI.View, DescriptionText : SwiftUI.View, DetailImage : SwiftUI.View, ActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.EmptyStateView where Title == SwiftUI.Text, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, DetailImage == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.EmptyStateViewModel)
  public init(title: Swift.String, descriptionText: Swift.String? = nil, detailImage: SwiftUI.Image? = nil, action: FioriSwiftUICore._Action? = nil)
}
extension FioriSwiftUICore.EmptyStateView where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.EmptyStateView where DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.EmptyStateView where ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.EmptyStateView where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.EmptyStateView where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.EmptyStateView where DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.EmptyStateView where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.EmptyStateView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14EmptyStateViewV4bodyQrvp", 0) __<Title, DescriptionText, DetailImage, ActionView>
}
extension FioriSwiftUICore.EmptyStateViewModel {
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
}
extension SwiftUI.EnvironmentValues {
  public var titleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var subtitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var tagsModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var footnoteModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var descriptionTextModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var detailImageModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var attributeModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var secondaryAttributeModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var timestampModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var secondaryTimestampModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var trendModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var trendImageModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var statusModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var substatusModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var bodyTextModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var bodyAttributedTextModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var iconModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var accessoryIconModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var iconsModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var actionTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var firstActionTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var secondActionTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var seriesTitlesModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var keyModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var valueModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var valuesModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var valueAxisTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var secondaryValuesAxisTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var categoryAxisTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var emptyTextModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var kpiModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var placeholderModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var lowerBoundTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var upperBoundTitleModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var avatarsModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var footnoteIconsModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var leftIconModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var rightIconModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var actionItemsModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var progressIndicatorTextModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var textInputValueModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var actionTextModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var actionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var secondaryActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var textInputModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var cancelActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var itemsModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var progressIndicatorModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var doneActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var startActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var restartActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var clearActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var saveActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var nodeModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var resetActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var applyActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var nextActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var allowActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var denyActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
  public var notNowActionModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
}
extension SwiftUI.View {
  public func titleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func subtitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func tagsModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func footnoteModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func descriptionTextModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func detailImageModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func attributeModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func secondaryAttributeModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func timestampModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func secondaryTimestampModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func trendModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func trendImageModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func statusModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func substatusModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func bodyTextModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func bodyAttributedTextModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func iconModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func accessoryIconModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func iconsModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func actionTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func firstActionTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func secondActionTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func seriesTitlesModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func keyModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func valueModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func valuesModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func valueAxisTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func secondaryValuesAxisTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func categoryAxisTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func emptyTextModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func kpiModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func placeholderModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func lowerBoundTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func upperBoundTitleModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func avatarsModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func footnoteIconsModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func leftIconModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func rightIconModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func actionItemsModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func progressIndicatorTextModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func textInputValueModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func actionTextModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func actionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func secondaryActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func textInputModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func cancelActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func itemsModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func progressIndicatorModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func doneActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func startActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func restartActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func clearActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func saveActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func nodeModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func resetActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func applyActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func nextActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func allowActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func denyActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
  public func notNowActionModifier<V>(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> V) -> some SwiftUI.View where V : SwiftUI.View
  
}
public struct MaxNumberOfItemsKey : SwiftUI.EnvironmentKey {
  public static var defaultValue: Swift.Int
  public typealias Value = Swift.Int
}
extension SwiftUI.EnvironmentValues {
  public var maxNumberOfItems: Swift.Int {
    get
    set
  }
}
extension FioriSwiftUICore.FilterFeedbackBar : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17FilterFeedbackBarV4bodyQrvp", 0) __<Items>
}
public struct FilledIcon {
  public init(@SwiftUI.ViewBuilder filledIcon: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.FilledIcon {
  public init(filledIcon: SwiftUI.Image? = nil)
}
extension FioriSwiftUICore.FilledIcon {
  public init(_ configuration: FioriSwiftUICore.FilledIconConfiguration)
}
extension FioriSwiftUICore.FilledIcon : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10FilledIconV4bodyQrvp", 0) __
}
public struct FilledIconBaseStyle : FioriSwiftUICore.FilledIconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FilledIconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19FilledIconBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct FilledIconFioriStyle : FioriSwiftUICore.FilledIconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FilledIconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010FilledIconA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol FilledIconStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.FilledIconConfiguration) -> Self.Body
}
public struct FilledIconConfiguration {
  public let filledIcon: FioriSwiftUICore.FilledIconConfiguration.FilledIcon
  public typealias FilledIcon = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct FilterFeedbackBar<Items> where Items : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder items: () -> Items, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.FilterFeedbackBar where Items == FioriSwiftUICore._SortFilterMenuItemContainer {
  public init(model: any FioriSwiftUICore.FilterFeedbackBarModel)
  public init(items: SwiftUI.Binding<[[FioriSwiftUICore.SortFilterItem]]>, onUpdate: (() -> Swift.Void)? = nil)
}
public struct FilterFeedbackBarButton<LeftIcon, Title> where LeftIcon : SwiftUI.View, Title : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder leftIcon: () -> LeftIcon, @SwiftUI.ViewBuilder title: () -> Title, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarButton where LeftIcon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, Title == SwiftUI.Text {
  public init(model: any FioriSwiftUICore.FilterFeedbackBarButtonModel)
  public init(leftIcon: SwiftUI.Image? = nil, title: Swift.String, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarButton where LeftIcon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarButton : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23FilterFeedbackBarButtonV4bodyQrvp", 0) __<LeftIcon, Title>
}
public struct OptionListPickerButtonConfiguration {
  public init(leftIcon: SwiftUI.AnyView, title: SwiftUI.AnyView, isSelected: Swift.Bool)
}
public protocol OptionListPickerStyle {
  func makeBody(configuration: FioriSwiftUICore.OptionListPickerButtonConfiguration) -> SwiftUI.AnyView
}
public struct DefaultOptionListPickerStyle : FioriSwiftUICore.OptionListPickerStyle {
  public init(font: SwiftUI.Font = .system(.body), foregroundColorSelected: SwiftUI.Color = .preferredColor(.tintColor), foregroundColorUnselected: SwiftUI.Color = .preferredColor(.tertiaryLabel), fillColorSelected: SwiftUI.Color = .preferredColor(.primaryFill), fillColorUnselected: SwiftUI.Color = .preferredColor(.secondaryFill), strokeColorSelected: SwiftUI.Color = .preferredColor(.tintColor), strokeColorUnselected: SwiftUI.Color = .preferredColor(.separator), cornerRadius: CoreFoundation.CGFloat = 16, spacing: CoreFoundation.CGFloat = 6, borderWidth: CoreFoundation.CGFloat = 1, minHeight: CoreFoundation.CGFloat = 44, minTouchHeight: CoreFoundation.CGFloat = 56)
  public func makeBody(configuration: FioriSwiftUICore.OptionListPickerButtonConfiguration) -> SwiftUI.AnyView
}
extension SwiftUI.View {
  public func optionListPickerStyle(_ style: some OptionListPickerStyle) -> some SwiftUI.View
  
  public func optionListPickerStyle(font: SwiftUI.Font = .system(.body), foregroundColorSelected: SwiftUI.Color = .preferredColor(.tintColor), foregroundColorUnselected: SwiftUI.Color = .preferredColor(.tertiaryLabel), fillColorSelected: SwiftUI.Color = .preferredColor(.primaryFill), fillColorUnselected: SwiftUI.Color = .preferredColor(.secondaryFill), strokeColorSelected: SwiftUI.Color = .preferredColor(.tintColor), strokeColorUnselected: SwiftUI.Color = .preferredColor(.separator), cornerRadius: CoreFoundation.CGFloat = 16, spacing: CoreFoundation.CGFloat = 6, borderWidth: CoreFoundation.CGFloat = 1, minHeight: CoreFoundation.CGFloat = 44) -> some SwiftUI.View
  
}

@_Concurrency.MainActor(unsafe) public struct FilterFeedbackBarItem<LeftIcon, Title, RightIcon> where LeftIcon : SwiftUI.View, Title : SwiftUI.View, RightIcon : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder leftIcon: () -> LeftIcon, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder rightIcon: () -> RightIcon, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarItem where LeftIcon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, Title == SwiftUI.Text, RightIcon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView> {
  @_Concurrency.MainActor(unsafe) public init(model: any FioriSwiftUICore.FilterFeedbackBarItemModel)
  @_Concurrency.MainActor(unsafe) public init(leftIcon: SwiftUI.Image? = nil, title: Swift.String, rightIcon: SwiftUI.Image? = nil, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarItem where LeftIcon == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder rightIcon: () -> RightIcon, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarItem where RightIcon == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder leftIcon: () -> LeftIcon, @SwiftUI.ViewBuilder title: () -> Title, isSelected: Swift.Bool)
}
extension FioriSwiftUICore.FilterFeedbackBarItem where LeftIcon == SwiftUI.EmptyView, RightIcon == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, isSelected: Swift.Bool)
}
public struct FilterFeedbackBarStyleConfiguration {
  public init(leftIcon: SwiftUI.AnyView, title: SwiftUI.AnyView, isSelected: Swift.Bool, rightIcon: SwiftUI.AnyView)
}
public protocol FilterFeedbackBarStyle {
  typealias Configuration = FioriSwiftUICore.FilterFeedbackBarStyleConfiguration
  func makeBody(configuration: Self.Configuration) -> SwiftUI.AnyView
}
public struct DefaultFilterFeedbackBarStyle : FioriSwiftUICore.FilterFeedbackBarStyle {
  public init(font: SwiftUI.Font = .system(.body), foregroundColorSelected: SwiftUI.Color = .preferredColor(.tintColor), foregroundColorUnselected: SwiftUI.Color = .preferredColor(.tertiaryLabel), fillColorSelected: SwiftUI.Color = Color.clear, fillColorUnselected: SwiftUI.Color = .preferredColor(.tertiaryFill), strokeColorSelected: SwiftUI.Color = .preferredColor(.tintColor), strokeColorUnselected: SwiftUI.Color = .preferredColor(.separator), cornerRadius: CoreFoundation.CGFloat = 10, spacing: CoreFoundation.CGFloat = 6, padding: CoreFoundation.CGFloat = 8, borderWidth: CoreFoundation.CGFloat = 1, minHeight: CoreFoundation.CGFloat = 38)
  public func makeBody(configuration: FioriSwiftUICore.DefaultFilterFeedbackBarStyle.Configuration) -> SwiftUI.AnyView
}
extension SwiftUI.View {
  public func filterFeedbackBarStyle(_ style: some FilterFeedbackBarStyle) -> some SwiftUI.View
  
  public func filterFeedbackBarStyle(font: SwiftUI.Font = .system(.body), foregroundColorSelected: SwiftUI.Color = .preferredColor(.tintColor), foregroundColorUnselected: SwiftUI.Color = .preferredColor(.tertiaryLabel), fillColorSelected: SwiftUI.Color = Color.clear, fillColorUnselected: SwiftUI.Color = .preferredColor(.tertiaryFill), strokeColorSelected: SwiftUI.Color = .preferredColor(.tintColor), strokeColorUnselected: SwiftUI.Color = .preferredColor(.separator), cornerRadius: CoreFoundation.CGFloat = 10, spacing: CoreFoundation.CGFloat = 6, padding: CoreFoundation.CGFloat = 8, borderWidth: CoreFoundation.CGFloat = 1, minHeight: CoreFoundation.CGFloat = 38) -> some SwiftUI.View
  
}
extension FioriSwiftUICore.FilterFeedbackBarItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21FilterFeedbackBarItemV4bodyQrvp", 0) __<LeftIcon, Title, RightIcon>
}

extension FioriSwiftUICore.FilterFeedbackBarModel {
  public var onUpdate: (() -> Swift.Void)? {
    get
  }
}
public enum Fiori {
}
public struct FioriButton : SwiftUI.View {
  public init(isSelectionPersistent: Swift.Bool = false, action: ((UIKit.UIControl.State) -> Swift.Void)? = nil, @SwiftUI.ViewBuilder label: @escaping (UIKit.UIControl.State) -> any SwiftUI.View)
  public init(isSelectionPersistent: Swift.Bool = false, action: ((UIKit.UIControl.State) -> Swift.Void)? = nil, @SwiftUI.ViewBuilder label: @escaping (UIKit.UIControl.State) -> any SwiftUI.View = { _ in EmptyView() }, @SwiftUI.ViewBuilder image: @escaping (UIKit.UIControl.State) -> any SwiftUI.View = { _ in EmptyView() }, imagePosition: FioriSwiftUICore.FioriButtonImagePosition = .leading, imageTitleSpacing: CoreFoundation.CGFloat = 8.0)
  public init(isSelectionPersistent: Swift.Bool = false, title: @escaping (UIKit.UIControl.State) -> Foundation.AttributedString, action: ((UIKit.UIControl.State) -> Swift.Void)? = nil)
  public init(isSelectionPersistent: Swift.Bool = false, title: Foundation.AttributedString, action: ((UIKit.UIControl.State) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A6ButtonV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.FioriButton {
  @available(*, deprecated, message: "Use other initializers with AttributedString argument instead.")
  public init(isSelectionPersistent: Swift.Bool = false, action: ((UIKit.UIControl.State) -> Swift.Void)? = nil, title: @escaping (UIKit.UIControl.State) -> some StringProtocol)
}
public enum FioriButtonImagePosition {
  case top
  case leading
  case bottom
  case trailing
  public static func == (a: FioriSwiftUICore.FioriButtonImagePosition, b: FioriSwiftUICore.FioriButtonImagePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol FioriButtonStyle {
  associatedtype Body : SwiftUI.View
  func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = FioriSwiftUICore.FioriButtonStyleConfiguration
}
extension FioriSwiftUICore.FioriButtonStyle {
  public func eraseToAnyFioriButtonStyle() -> FioriSwiftUICore.AnyFioriButtonStyle
}
public struct FioriButtonStyleConfiguration {
  public struct Label : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A24ButtonStyleConfigurationV5LabelV4bodyQrvp", 0) __
  }
  public struct Image : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A24ButtonStyleConfigurationV5ImageV4bodyQrvp", 0) __
  }
  public let state: UIKit.UIControl.State
  public let imagePosition: FioriSwiftUICore.FioriButtonImagePosition
  public let imageTitleSpacing: CoreFoundation.CGFloat
  public var label: FioriSwiftUICore.FioriButtonStyleConfiguration.Label {
    get
  }
  public var image: FioriSwiftUICore.FioriButtonStyleConfiguration.Image {
    get
  }
  public func label(for state: UIKit.UIControl.State) -> FioriSwiftUICore.FioriButtonStyleConfiguration.Label
  public func image(for state: UIKit.UIControl.State) -> FioriSwiftUICore.FioriButtonStyleConfiguration.Image
}
public struct FioriPlainButtonStyle : FioriSwiftUICore.FioriButtonStyle {
  public init()
  public func makeBody(configuration: FioriSwiftUICore.FioriPlainButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A16PlainButtonStyleV8makeBody13configurationQrAA0aeF13ConfigurationV_tF", 0) __
}
public struct FioriPrimaryButtonStyle : FioriSwiftUICore.FioriButtonStyle {
  public init(_ maxWidth: CoreFoundation.CGFloat? = nil, loadingState: FioriSwiftUICore.FioriButtonLoadingState = .unspecified)
  public func makeBody(configuration: FioriSwiftUICore.FioriPrimaryButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A18PrimaryButtonStyleV8makeBody13configurationQrAA0aeF13ConfigurationV_tF", 0) __
}
public struct FioriSecondaryButtonStyle : FioriSwiftUICore.FioriButtonStyle {
  public init(colorStyle: FioriSwiftUICore.FioriButtonColorStyle = .tint, maxWidth: CoreFoundation.CGFloat? = nil, loadingState: FioriSwiftUICore.FioriButtonLoadingState = .unspecified)
  public func makeBody(configuration: FioriSwiftUICore.FioriSecondaryButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A20SecondaryButtonStyleV8makeBody13configurationQrAA0aeF13ConfigurationV_tF", 0) __
}
public struct FioriTertiaryButtonStyle : FioriSwiftUICore.FioriButtonStyle {
  public init(colorStyle: FioriSwiftUICore.FioriButtonColorStyle = .tint, maxWidth: CoreFoundation.CGFloat? = nil, loadingState: FioriSwiftUICore.FioriButtonLoadingState = .unspecified)
  public func makeBody(configuration: FioriSwiftUICore.FioriTertiaryButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A19TertiaryButtonStyleV8makeBody13configurationQrAA0aeF13ConfigurationV_tF", 0) __
}
public enum FioriButtonColorStyle {
  case normal
  case tint
  case negative
  public static func == (a: FioriSwiftUICore.FioriButtonColorStyle, b: FioriSwiftUICore.FioriButtonColorStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftUI.View {
  public func fioriButtonStyle(_ style: some FioriButtonStyle) -> some SwiftUI.View
  
}
public struct AnyFioriButtonStyle : FioriSwiftUICore.FioriButtonStyle {
  public init(_ style: some FioriButtonStyle)
  public func makeBody(configuration: FioriSwiftUICore.AnyFioriButtonStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore03AnyA11ButtonStyleV8makeBody13configurationQrAA0aeF13ConfigurationV_tF", 0) __
}
public enum FioriButtonLoadingState {
  case unspecified
  case processing
  case success
  public static func == (a: FioriSwiftUICore.FioriButtonLoadingState, b: FioriSwiftUICore.FioriButtonLoadingState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

public struct FlowLayout : SwiftUI.Layout {
  public struct CacheData {
  }
  public init(spacing: CoreFoundation.CGFloat = 8, lineSpacing: CoreFoundation.CGFloat = 8, alignment: SwiftUI.VerticalAlignment = .center, lineLimit: Swift.Int? = nil)
  public func sizeThatFits(proposal: SwiftUI.ProposedViewSize, subviews: FioriSwiftUICore.FlowLayout.Subviews, cache: inout FioriSwiftUICore.FlowLayout.CacheData) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUI.ProposedViewSize, subviews: FioriSwiftUICore.FlowLayout.Subviews, cache: inout FioriSwiftUICore.FlowLayout.CacheData)
  public func makeCache(subviews: FioriSwiftUICore.FlowLayout.Subviews) -> FioriSwiftUICore.FlowLayout.CacheData
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Cache = FioriSwiftUICore.FlowLayout.CacheData
}
public struct Footnote {
  public init(@SwiftUI.ViewBuilder footnote: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Footnote {
  public init(footnote: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Footnote {
  public init(_ configuration: FioriSwiftUICore.FootnoteConfiguration)
}
extension FioriSwiftUICore.Footnote : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8FootnoteV4bodyQrvp", 0) __
}
public struct FootnoteIconStack {
  public init(model: any FioriSwiftUICore.FootnoteIconStackModel)
  public init(footnoteIcons: [FioriSwiftUICore.TextOrIcon]? = nil)
}
public struct FootnoteIcons {
  public init(@FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.FootnoteIcons {
  public init(footnoteIcons: [FioriSwiftUICore.TextOrIcon] = [])
}
extension FioriSwiftUICore.FootnoteIcons {
  public init(_ configuration: FioriSwiftUICore.FootnoteIconsConfiguration)
}
extension FioriSwiftUICore.FootnoteIcons : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13FootnoteIconsV4bodyQrvp", 0) __
}
public protocol FootnoteIconList : FioriSwiftUICore._ViewEmptyChecking, SwiftUI.View {
  associatedtype V : SwiftUI.View
  var count: Swift.Int { get }
  func view(at index: Swift.Int) -> Self.V
  var maxCount: Swift.Int { get }
  var size: CoreFoundation.CGSize { get }
  var isCircular: Swift.Bool { get }
  var spacing: CoreFoundation.CGFloat { get }
}
extension FioriSwiftUICore.FootnoteIconList {
  public var body: some SwiftUI.View {
    get
  }
}
extension FioriSwiftUICore.FootnoteIconList {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct SingleFootnoteIcon<Content> : FioriSwiftUICore.FootnoteIconList where Content : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var maxCount: Swift.Int {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var spacing: CoreFoundation.CGFloat {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16FootnoteIconListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.SingleFootnoteIcon<Content>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18SingleFootnoteIconV4view2atQrSi_tF", 0) __<Content>
}
public struct ConditionalSingleFootnoteIcon<TrueContent, FalseContent> : FioriSwiftUICore.FootnoteIconList where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var maxCount: Swift.Int {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var spacing: CoreFoundation.CGFloat {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16FootnoteIconListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.ConditionalSingleFootnoteIcon<TrueContent, FalseContent>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29ConditionalSingleFootnoteIconV4view2atQrSi_tF", 0) __<TrueContent, FalseContent>
}
public struct PairFootnoteIcon<First, Second> : FioriSwiftUICore.FootnoteIconList where First : SwiftUI.View, Second : FioriSwiftUICore.FootnoteIconList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var maxCount: Swift.Int {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var spacing: CoreFoundation.CGFloat {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16FootnoteIconListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.PairFootnoteIcon<First, Second>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16PairFootnoteIconV4view2atQrSi_tF", 0) __<First, Second>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public enum FootnoteIconsBuilder {
  public static func buildBlock() -> SwiftUI.EmptyView
  public static func buildBlock(_ content: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View, _ c9: some View) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildIf(_ content: (some View)?) -> some FioriSwiftUICore.FootnoteIconList
  
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> FioriSwiftUICore.ConditionalSingleFootnoteIcon<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> FioriSwiftUICore.ConditionalSingleFootnoteIcon<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
}
extension FioriSwiftUICore.FootnoteIconStack : FioriSwiftUICore.FootnoteIconList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public var maxCount: Swift.Int {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public var isCircular: Swift.Bool {
    get
  }
  public var spacing: CoreFoundation.CGFloat {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16FootnoteIconListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.FootnoteIconStack>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17FootnoteIconStackV4view2atQrSi_tF", 0) __
}
extension SwiftUI.EnvironmentValues {
  public var footnoteIconsMaxCount: Swift.Int {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var isFootnoteIconsCircular: Swift.Bool {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var footnoteIconsSpacing: CoreFoundation.CGFloat {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var footnoteIconsSize: CoreFoundation.CGSize {
    get
    set
  }
}
extension SwiftUI.View {
  public func footnoteIconsMaxCount(_ count: Swift.Int) -> some SwiftUI.View
  
  public func isFootnoteIconsCircular(_ isCircular: Swift.Bool) -> some SwiftUI.View
  
  public func footnoteIconsSpacing(_ spacing: CoreFoundation.CGFloat) -> some SwiftUI.View
  
  public func footnoteIconsSize(_ size: CoreFoundation.CGSize) -> some SwiftUI.View
  
}
public struct FootnoteIconsBaseStyle : FioriSwiftUICore.FootnoteIconsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FootnoteIconsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22FootnoteIconsBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct FootnoteIconsFioriStyle : FioriSwiftUICore.FootnoteIconsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FootnoteIconsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013FootnoteIconsA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol FootnoteIconsStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.FootnoteIconsConfiguration) -> Self.Body
}
public struct FootnoteIconsConfiguration {
  public let footnoteIcons: FioriSwiftUICore.FootnoteIconsConfiguration.FootnoteIcons
  public typealias FootnoteIcons = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct FootnoteBaseStyle : FioriSwiftUICore.FootnoteStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FootnoteConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17FootnoteBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct FootnoteFioriStyle : FioriSwiftUICore.FootnoteStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FootnoteConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08FootnoteA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol FootnoteStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.FootnoteConfiguration) -> Self.Body
}
public struct FootnoteConfiguration {
  public let footnote: FioriSwiftUICore.FootnoteConfiguration.Footnote
  public typealias Footnote = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct FormView {
  public init(controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.FormView {
  public init(_ configuration: FioriSwiftUICore.FormViewConfiguration)
}
extension FioriSwiftUICore.FormView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8FormViewV4bodyQrvp", 0) __
}
public struct FormViewBaseStyle : FioriSwiftUICore.FormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17FormViewBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol FormViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.FormViewConfiguration) -> Self.Body
}
public struct FormViewConfiguration {
  public let controlState: FioriSwiftUICore.ControlState
  public let errorMessage: Foundation.AttributedString?
}
public struct FormViewFioriStyle : FioriSwiftUICore.FormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08FormViewA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct GreetingText {
  public init(@SwiftUI.ViewBuilder greetingText: () -> any SwiftUI.View)
}
extension FioriSwiftUICore.GreetingText {
  public init(greetingText: Foundation.AttributedString)
}
extension FioriSwiftUICore.GreetingText {
  public init(_ configuration: FioriSwiftUICore.GreetingTextConfiguration)
}
extension FioriSwiftUICore.GreetingText : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12GreetingTextV4bodyQrvp", 0) __
}
public struct GreetingTextBaseStyle : FioriSwiftUICore.GreetingTextStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.GreetingTextConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21GreetingTextBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct GreetingTextFioriStyle : FioriSwiftUICore.GreetingTextStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.GreetingTextConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012GreetingTextA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol GreetingTextStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.GreetingTextConfiguration) -> Self.Body
}
public struct GreetingTextConfiguration {
  public let greetingText: FioriSwiftUICore.GreetingTextConfiguration.GreetingText
  public typealias GreetingText = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct HeaderAction {
  public init(@SwiftUI.ViewBuilder headerAction: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.HeaderAction {
  public init(headerAction: FioriSwiftUICore.FioriButton? = nil)
}
extension FioriSwiftUICore.HeaderAction {
  public init(_ configuration: FioriSwiftUICore.HeaderActionConfiguration)
}
extension FioriSwiftUICore.HeaderAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12HeaderActionV4bodyQrvp", 0) __
}
public struct HeaderActionBaseStyle : FioriSwiftUICore.HeaderActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.HeaderActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21HeaderActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct HeaderActionFioriStyle : FioriSwiftUICore.HeaderActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.HeaderActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012HeaderActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol HeaderActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.HeaderActionConfiguration) -> Self.Body
}
public struct HeaderActionConfiguration {
  public let headerAction: FioriSwiftUICore.HeaderActionConfiguration.HeaderAction
  public typealias HeaderAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct HeaderChart<Title, Subtitle, Trend, TrendImage, Kpi, Chart> where Title : SwiftUI.View, Subtitle : SwiftUI.View, Trend : SwiftUI.View, TrendImage : SwiftUI.View, Kpi : SwiftUI.View, Chart : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Title == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Trend == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, TrendImage == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, Kpi == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.HeaderChartModel, @SwiftUI.ViewBuilder chart: () -> Chart)
  public init(title: Swift.String, subtitle: Swift.String? = nil, trend: Swift.String? = nil, trendImage: SwiftUI.Image? = nil, kpi: Swift.String? = nil, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where TrendImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where TrendImage == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trendImage: () -> TrendImage, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend, @SwiftUI.ViewBuilder trendImage: () -> TrendImage)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trendImage: () -> TrendImage)
}
extension FioriSwiftUICore.HeaderChart where TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder trend: () -> Trend)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder chart: () -> Chart)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trendImage: () -> TrendImage)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder trend: () -> Trend)
}
extension FioriSwiftUICore.HeaderChart where Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.HeaderChart where Subtitle == SwiftUI.EmptyView, Trend == SwiftUI.EmptyView, TrendImage == SwiftUI.EmptyView, Kpi == SwiftUI.EmptyView, Chart == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.HeaderChart : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11HeaderChartV4bodyQrvp", 0) __<Title, Subtitle, Trend, TrendImage, Kpi, Chart>
}
public struct HelperText {
  public init(@SwiftUI.ViewBuilder helperText: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.HelperText {
  public init(helperText: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.HelperText {
  public init(_ configuration: FioriSwiftUICore.HelperTextConfiguration)
}
extension FioriSwiftUICore.HelperText : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10HelperTextV4bodyQrvp", 0) __
}
public struct HelperTextBaseStyle : FioriSwiftUICore.HelperTextStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.HelperTextConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19HelperTextBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct HelperTextFioriStyle : FioriSwiftUICore.HelperTextStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.HelperTextConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010HelperTextA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol HelperTextStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.HelperTextConfiguration) -> Self.Body
}
public struct HelperTextConfiguration {
  public let helperText: FioriSwiftUICore.HelperTextConfiguration.HelperText
  public typealias HelperText = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Icon {
  public init(@SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Icon {
  public init(icon: SwiftUI.Image? = nil)
}
extension FioriSwiftUICore.Icon {
  public init(_ configuration: FioriSwiftUICore.IconConfiguration)
}
extension FioriSwiftUICore.Icon : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4IconV4bodyQrvp", 0) __
}
public protocol ViewList : FioriSwiftUICore._ViewEmptyChecking, SwiftUI.View {
  associatedtype V : SwiftUI.View
  var count: Swift.Int { get }
  func view(at index: Swift.Int) -> Self.V
  func isFirstItemAText() -> Swift.Bool
  func numberOfIconsToShow() -> Swift.Int
}
extension FioriSwiftUICore.ViewList {
  public var body: some SwiftUI.View {
    get
  }
}
extension FioriSwiftUICore.ViewList {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct Single<Content> : FioriSwiftUICore.ViewList where Content : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public func isFirstItemAText() -> Swift.Bool
  public func numberOfIconsToShow() -> Swift.Int
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8ViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.Single<Content>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore6SingleV4view2atQrSi_tF", 0) __<Content>
}
public struct ConditionalSingle<TrueContent, FalseContent> : FioriSwiftUICore.ViewList where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public func isFirstItemAText() -> Swift.Bool
  public func numberOfIconsToShow() -> Swift.Int
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8ViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.ConditionalSingle<TrueContent, FalseContent>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17ConditionalSingleV4view2atQrSi_tF", 0) __<TrueContent, FalseContent>
}
public struct Pair<First, Second> : FioriSwiftUICore.ViewList where First : SwiftUI.View, Second : FioriSwiftUICore.ViewList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public func isFirstItemAText() -> Swift.Bool
  public func numberOfIconsToShow() -> Swift.Int
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8ViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.Pair<First, Second>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4PairV4view2atQrSi_tF", 0) __<First, Second>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public enum IconBuilder {
  public static func buildBlock() -> SwiftUI.EmptyView
  public static func buildBlock(_ content: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View, _ c9: some View) -> some FioriSwiftUICore.ViewList
  
  public static func buildIf(_ content: (some View)?) -> some FioriSwiftUICore.ViewList
  
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> FioriSwiftUICore.ConditionalSingle<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> FioriSwiftUICore.ConditionalSingle<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
}
public struct IconStack {
  public init(model: any FioriSwiftUICore.IconStackModel)
  public init(icons: [FioriSwiftUICore.TextOrIcon]? = nil)
}
extension FioriSwiftUICore.IconStack : FioriSwiftUICore.ViewList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public func isFirstItemAText() -> Swift.Bool
  public func numberOfIconsToShow() -> Swift.Int
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8ViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.IconStack>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9IconStackV4view2atQrSi_tF", 0) __
}
public struct IconBaseStyle : FioriSwiftUICore.IconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13IconBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct IconFioriStyle : FioriSwiftUICore.IconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04IconA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol IconStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.IconConfiguration) -> Self.Body
}
public struct IconConfiguration {
  public let icon: FioriSwiftUICore.IconConfiguration.Icon
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Icons {
  public init(@FioriSwiftUICore.IconBuilder icons: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Icons {
  public init(icons: [FioriSwiftUICore.TextOrIcon] = [])
}
extension FioriSwiftUICore.Icons {
  public init(_ configuration: FioriSwiftUICore.IconsConfiguration)
}
extension FioriSwiftUICore.Icons : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore5IconsV4bodyQrvp", 0) __
}
public struct IconsBaseStyle : FioriSwiftUICore.IconsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IconsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14IconsBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct IconsFioriStyle : FioriSwiftUICore.IconsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IconsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore05IconsA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol IconsStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.IconsConfiguration) -> Self.Body
}
public struct IconsConfiguration {
  public let icons: FioriSwiftUICore.IconsConfiguration.Icons
  public typealias Icons = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct IllustratedMessage {
  public init(@SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder action: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder secondaryAction: () -> any SwiftUI.View = { EmptyView() }, detailImageSize: FioriSwiftUICore.IllustratedMessage.DetailImageSize? = nil, isActionVerticallyAligned: Swift.Bool = false, contentAlignment: SwiftUI.HorizontalAlignment = .leading)
}
extension FioriSwiftUICore.IllustratedMessage {
  public init(detailImage: SwiftUI.Image? = nil, title: Foundation.AttributedString, description: Foundation.AttributedString? = nil, action: FioriSwiftUICore.FioriButton? = nil, secondaryAction: FioriSwiftUICore.FioriButton? = nil, detailImageSize: FioriSwiftUICore.IllustratedMessage.DetailImageSize? = nil, isActionVerticallyAligned: Swift.Bool = false, contentAlignment: SwiftUI.HorizontalAlignment = .leading)
}
extension FioriSwiftUICore.IllustratedMessage {
  public init(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration)
}
extension FioriSwiftUICore.IllustratedMessage : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18IllustratedMessageV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.IllustratedMessage {
  public enum DetailImageSize {
    case extraSmall
    case small
    case medium
    case large
    case extraLarge
    public static func == (a: FioriSwiftUICore.IllustratedMessage.DetailImageSize, b: FioriSwiftUICore.IllustratedMessage.DetailImageSize) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct IllustratedMessageBaseStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27IllustratedMessageBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IllustratedMessageVerticalLayoutStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore37IllustratedMessageVerticalLayoutStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IllustratedMessageHorizontalLayoutStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore39IllustratedMessageHorizontalLayoutStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IllustratedMessageMixedLayoutStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34IllustratedMessageMixedLayoutStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IllustratedMessageFlexibleButtonStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore37IllustratedMessageFlexibleButtonStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IllustratedMessageFullWidthButtonStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore38IllustratedMessageFullWidthButtonStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IllustratedMessageFixedWidthButtonStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore39IllustratedMessageFixedWidthButtonStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageVerticalLayoutStyle {
  public static var vertical: some FioriSwiftUICore.IllustratedMessageStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageHorizontalLayoutStyle {
  public static var horizontal: some FioriSwiftUICore.IllustratedMessageStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageMixedLayoutStyle {
  public static var mixed: some FioriSwiftUICore.IllustratedMessageStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageFlexibleButtonStyle {
  public static var flexibleButton: some FioriSwiftUICore.IllustratedMessageStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageFullWidthButtonStyle {
  public static var fullWidthButton: some FioriSwiftUICore.IllustratedMessageStyle {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessageStyle where Self == FioriSwiftUICore.IllustratedMessageFixedWidthButtonStyle {
  public static var fixedWidthButton: some FioriSwiftUICore.IllustratedMessageStyle {
    get
  }
}
public protocol IllustratedMessageStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> Self.Body
}
public struct IllustratedMessageConfiguration {
  public let detailImage: FioriSwiftUICore.IllustratedMessageConfiguration.DetailImage
  public let title: FioriSwiftUICore.IllustratedMessageConfiguration.Title
  public let description: FioriSwiftUICore.IllustratedMessageConfiguration.Description
  public let action: FioriSwiftUICore.IllustratedMessageConfiguration.Action
  public let secondaryAction: FioriSwiftUICore.IllustratedMessageConfiguration.SecondaryAction
  public let detailImageSize: FioriSwiftUICore.IllustratedMessage.DetailImageSize?
  public let isActionVerticallyAligned: Swift.Bool
  public let contentAlignment: SwiftUI.HorizontalAlignment
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Action = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias SecondaryAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct IllustratedMessageFioriStyle : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore018IllustratedMessageA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IncrementAction {
  public init(@SwiftUI.ViewBuilder incrementAction: () -> any SwiftUI.View = { FioriButton { _ in FioriIcon.actions.add } })
}
extension FioriSwiftUICore.IncrementAction {
  public init(incrementAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in FioriIcon.actions.add })
}
extension FioriSwiftUICore.IncrementAction {
  public init(_ configuration: FioriSwiftUICore.IncrementActionConfiguration)
}
extension FioriSwiftUICore.IncrementAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15IncrementActionV4bodyQrvp", 0) __
}
public struct IncrementActionBaseStyle : FioriSwiftUICore.IncrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IncrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24IncrementActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IncrementActionFioriStyle : FioriSwiftUICore.IncrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IncrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore015IncrementActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IncrementActionActivateStyle : FioriSwiftUICore.IncrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IncrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28IncrementActionActivateStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct IncrementActionDeactivateStyle : FioriSwiftUICore.IncrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IncrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30IncrementActionDeactivateStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.IncrementActionStyle where Self == FioriSwiftUICore.IncrementActionActivateStyle {
  public static var activate: FioriSwiftUICore.IncrementActionActivateStyle {
    get
  }
}
extension FioriSwiftUICore.IncrementActionStyle where Self == FioriSwiftUICore.IncrementActionDeactivateStyle {
  public static var deactivate: FioriSwiftUICore.IncrementActionDeactivateStyle {
    get
  }
}
public protocol IncrementActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.IncrementActionConfiguration) -> Self.Body
}
public struct IncrementActionConfiguration {
  public let incrementAction: FioriSwiftUICore.IncrementActionConfiguration.IncrementAction
  public typealias IncrementAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public protocol IndexedViewContainer {
  associatedtype V : SwiftUI.View
  var count: Swift.Int { get }
  func view(at index: Swift.Int) -> Self.V
}
public struct SingleView<Content> : FioriSwiftUICore.IndexedViewContainer where Content : SwiftUI.View {
  public let count: Swift.Int
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10SingleViewV4view2atQrSi_tF", 0) __<Content>
}
public struct ConditionalSingleView<TrueContent, FalseContent> : FioriSwiftUICore.IndexedViewContainer where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public let count: Swift.Int
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21ConditionalSingleViewV4view2atQrSi_tF", 0) __<TrueContent, FalseContent>
}
public struct PairView<First, Second> : FioriSwiftUICore.IndexedViewContainer where First : SwiftUI.View, Second : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8PairViewV4view2atQrSi_tF", 0) __<First, Second>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public enum IndexedViewBuilder {
  public static func buildBlock() -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ content: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View, _ c9: some View) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildIf(_ content: (some View)?) -> some FioriSwiftUICore.IndexedViewContainer
  
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> FioriSwiftUICore.ConditionalSingleView<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> FioriSwiftUICore.ConditionalSingleView<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
}
public struct InfoView<Title, DescriptionText, ProgressIndicatorView, ActionView, SecondaryActionView> where Title : SwiftUI.View, DescriptionText : SwiftUI.View, ProgressIndicatorView : SwiftUI.View, ActionView : SwiftUI.View, SecondaryActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where Title == SwiftUI.Text, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, ProgressIndicatorView == SwiftUI._ConditionalContent<FioriSwiftUICore.ProgressIndicator, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, SecondaryActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.InfoViewModel)
  public init(title: Swift.String, descriptionText: Swift.String? = nil, progressIndicator: FioriSwiftUICore.ProgressIndicator? = nil, action: FioriSwiftUICore._Action? = nil, secondaryAction: FioriSwiftUICore._Action? = nil)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where ProgressIndicatorView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, ProgressIndicatorView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.InfoView where ProgressIndicatorView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where ProgressIndicatorView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.InfoView where ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, ProgressIndicatorView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, ProgressIndicatorView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder progressIndicator: () -> ProgressIndicatorView)
}
extension FioriSwiftUICore.InfoView where ProgressIndicatorView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.InfoView where DescriptionText == SwiftUI.EmptyView, ProgressIndicatorView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.InfoView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8InfoViewV4bodyQrvp", 0) __<Title, DescriptionText, ProgressIndicatorView, ActionView, SecondaryActionView>
}
extension FioriSwiftUICore.InfoViewModel {
  public var progressIndicator: (any FioriSwiftUICore.ProgressIndicatorModel)? {
    get
  }
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var secondaryAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
}
public struct InformationView {
  public init(@SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.InformationView {
  public init(icon: SwiftUI.Image? = nil, description: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.InformationView {
  public init(_ configuration: FioriSwiftUICore.InformationViewConfiguration)
}
extension FioriSwiftUICore.InformationView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15InformationViewV4bodyQrvp", 0) __
}
public struct InformationViewBaseStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24InformationViewBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension SwiftUI.View {
  public func informationView(isPresented: SwiftUI.Binding<Swift.Bool>, icon: SwiftUI.Image? = nil, description: Foundation.AttributedString) -> some SwiftUI.View
  
}
public struct InformationViewErrorStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25InformationViewErrorStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct InformationViewWarningStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27InformationViewWarningStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct InformationViewInformationalStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33InformationViewInformationalStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct InformationViewSuccessStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27InformationViewSuccessStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewErrorStyle {
  public static var error: FioriSwiftUICore.InformationViewErrorStyle {
    get
  }
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewWarningStyle {
  public static var warning: FioriSwiftUICore.InformationViewWarningStyle {
    get
  }
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewInformationalStyle {
  public static var informational: FioriSwiftUICore.InformationViewInformationalStyle {
    get
  }
}
extension FioriSwiftUICore.InformationViewStyle where Self == FioriSwiftUICore.InformationViewSuccessStyle {
  public static var success: FioriSwiftUICore.InformationViewSuccessStyle {
    get
  }
}
public protocol InformationViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> Self.Body
}
public struct InformationViewConfiguration {
  public let icon: FioriSwiftUICore.InformationViewConfiguration.Icon
  public let description: FioriSwiftUICore.InformationViewConfiguration.Description
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct InformationViewFioriStyle : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore015InformationViewA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct JouleWelcomeScreen {
  public init(@SwiftUI.ViewBuilder mediaImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder greetingText: () -> any SwiftUI.View, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder footnote: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder messageContent: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.JouleWelcomeScreen {
  public init(mediaImage: SwiftUI.Image? = nil, greetingText: Foundation.AttributedString, title: Foundation.AttributedString, footnote: Foundation.AttributedString? = nil, @SwiftUI.ViewBuilder messageContent: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.JouleWelcomeScreen {
  public init(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration)
}
extension FioriSwiftUICore.JouleWelcomeScreen : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18JouleWelcomeScreenV4bodyQrvp", 0) __
}
public struct JouleWelcomeScreenBaseStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27JouleWelcomeScreenBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}

public protocol JouleWelcomeScreenStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> Self.Body
}
public struct JouleWelcomeScreenConfiguration {
  public let mediaImage: FioriSwiftUICore.JouleWelcomeScreenConfiguration.MediaImage
  public let greetingText: FioriSwiftUICore.JouleWelcomeScreenConfiguration.GreetingText
  public let title: FioriSwiftUICore.JouleWelcomeScreenConfiguration.Title
  public let footnote: FioriSwiftUICore.JouleWelcomeScreenConfiguration.Footnote
  public let messageContent: FioriSwiftUICore.JouleWelcomeScreenConfiguration.MessageContent
  public typealias MediaImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias GreetingText = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Footnote = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias MessageContent = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct JouleWelcomeScreenFioriStyle : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore018JouleWelcomeScreenA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct KPIHeader<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@FioriSwiftUICore.KPIHeaderBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9KPIHeaderV4bodyQrvp", 0) __<Content>
}
extension FioriSwiftUICore.KPIHeader {
  public init<Data>(_ data: Data) where Content == SwiftUI.AnyView, Data : Swift.RandomAccessCollection, Data.Element == any FioriSwiftUICore.KPIHeaderItemModel, Data.Index == Swift.Int
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public enum KPIHeaderBuilder {
  public static func buildBlock(_ content: some View) -> some SwiftUI.View
  
  public static func buildBlock(_ c0: some View, _ c1: some View) -> some SwiftUI.View
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View) -> some SwiftUI.View
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View) -> some SwiftUI.View
  
  public static func buildIf(_ content: (some View)?) -> some SwiftUI.View
  
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> some SwiftUI.View where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> some SwiftUI.View where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  
}
public struct KPIItem<Kpi, Subtitle> where Kpi : SwiftUI.View, Subtitle : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder kpi: () -> Kpi, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.KPIItem where Kpi == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.KPIItemModel)
  public init(kpi: Swift.String? = nil, subtitle: Swift.String? = nil)
}
public enum KPIItemData {
  case components([FioriSwiftUICore.KPIItemData.Component])
  case measure(Foundation.Measurement<Foundation.Unit>, Foundation.MeasurementFormatter)
  case duration(Foundation.TimeInterval, Foundation.DateComponentsFormatter?)
  case percent(Swift.Double)
  case fraction(Swift.Int, Swift.Int, Foundation.NumberFormatter)
  public enum Component {
    case unit(Swift.String)
    case metric(Swift.String)
    case icon(SwiftUI.Image)
    case measure(Foundation.Measurement<Foundation.Unit>, Foundation.MeasurementFormatter)
  }
}
extension FioriSwiftUICore.KPIItem where Kpi == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.KPIItem where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder kpi: () -> Kpi)
}
extension FioriSwiftUICore.KPIItem where Kpi == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView {
  public init()
}
extension FioriSwiftUICore.KPIItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7KPIItemV4bodyQrvp", 0) __<Kpi, Subtitle>
}
extension FioriSwiftUICore.KPIItem where Kpi == SwiftUI.Text, Subtitle == SwiftUI.Text {
  public init(data: FioriSwiftUICore.KPIItemData, subtitle: Swift.String, action: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.KPIItem where Kpi == SwiftUI.Text, Subtitle == SwiftUI.EmptyView {
  public init(data: FioriSwiftUICore.KPIItemData, action: (() -> Swift.Void)? = nil)
  public init(_ data: FioriSwiftUICore.KPIItemData?)
}
public struct KPIProgressItem<Kpi, Subtitle, Footnote> where Kpi : SwiftUI.View, Subtitle : SwiftUI.View, Footnote : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder kpi: () -> Kpi, fraction: Swift.Double?, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.KPIProgressItem where Kpi == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.KPIProgressItemModel)
  public init(kpi: Swift.String? = nil, fraction: Swift.Double? = nil, subtitle: Swift.String? = nil, footnote: Swift.String? = nil)
}
extension FioriSwiftUICore.KPIProgressItem where Kpi == SwiftUI.EmptyView {
  public init(fraction: Swift.Double? = nil, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.KPIProgressItem where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder kpi: () -> Kpi, fraction: Swift.Double? = nil, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.KPIProgressItem where Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder kpi: () -> Kpi, fraction: Swift.Double? = nil, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.KPIProgressItem where Kpi == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView {
  public init(fraction: Swift.Double? = nil, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.KPIProgressItem where Kpi == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(fraction: Swift.Double? = nil, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.KPIProgressItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder kpi: () -> Kpi, fraction: Swift.Double? = nil)
}
extension FioriSwiftUICore.KPIProgressItem where Kpi == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(fraction: Swift.Double? = nil)
}
extension FioriSwiftUICore.KPIProgressItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15KPIProgressItemV4bodyQrvp", 0) __<Kpi, Subtitle, Footnote>
}
extension FioriSwiftUICore.KPIProgressItem where Kpi == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(data: FioriSwiftUICore.KPIItemData, subtitle: Swift.String? = nil, footnote: Swift.String? = nil, action: (() -> Swift.Void)? = nil)
}
public protocol KPIProgressViewStyle {
  associatedtype Body : SwiftUI.View
  func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = FioriSwiftUICore.FioriProgressViewStyleConfiguration
}
public struct FioriProgressViewStyleConfiguration {
  public var kpi: SwiftUI.AnyView
  public var subtitle: SwiftUI.AnyView
  public var state: FioriSwiftUICore.ControlState
  public var fraction: Swift.Double
}
public struct AnyKPIProgressViewStyle : FioriSwiftUICore.KPIProgressViewStyle {
  public func makeBody(configuration: FioriSwiftUICore.AnyKPIProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23AnyKPIProgressViewStyleV8makeBody13configurationQrAA0a8ProgressfG13ConfigurationV_tF", 0) __
}
public struct FioriCircularProgressViewStyle : FioriSwiftUICore.KPIProgressViewStyle {
  public init(circleColor: SwiftUI.Color? = nil, fractionColors: [FioriSwiftUICore.ControlState : SwiftUI.Color]? = nil, circleStyle: SwiftUI.StrokeStyle? = nil, lineWidth: CoreFoundation.CGFloat? = nil, foregroundColors: [FioriSwiftUICore.ControlState : SwiftUI.Color]? = nil)
  public func makeBody(configuration: FioriSwiftUICore.FioriCircularProgressViewStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A25CircularProgressViewStyleV8makeBody13configurationQrAA0aefG13ConfigurationV_tF", 0) __
}
extension SwiftUI.EnvironmentValues {
  public var kpiProgressViewStyle: FioriSwiftUICore.AnyKPIProgressViewStyle {
    get
    set
  }
}
extension SwiftUI.View {
  public func kpiProgressViewStyle(_ style: some KPIProgressViewStyle) -> some SwiftUI.View
  
}
public struct KeyValueFormView {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View, text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() }, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, minTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil, @SwiftUI.ViewBuilder mandatoryFieldIndicator: () -> any SwiftUI.View = { EmptyView() }, isRequired: Swift.Bool = false)
}
extension FioriSwiftUICore.KeyValueFormView {
  public init(title: Foundation.AttributedString, text: SwiftUI.Binding<Swift.String>, placeholder: Foundation.AttributedString? = nil, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, minTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil, mandatoryFieldIndicator: FioriSwiftUICore.TextOrIcon? = .text("*"), isRequired: Swift.Bool = false)
}
extension FioriSwiftUICore.KeyValueFormView {
  public init(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration)
}
extension FioriSwiftUICore.KeyValueFormView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16KeyValueFormViewV4bodyQrvp", 0) __
}
public struct KeyValueFormViewBaseStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25KeyValueFormViewBaseStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public protocol KeyValueFormViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> Self.Body
}
public struct KeyValueFormViewConfiguration {
  public let title: FioriSwiftUICore.KeyValueFormViewConfiguration.Title
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let placeholder: FioriSwiftUICore.KeyValueFormViewConfiguration.Placeholder
  public let controlState: FioriSwiftUICore.ControlState
  public let errorMessage: Foundation.AttributedString?
  public let minTextEditorHeight: CoreFoundation.CGFloat?
  public let maxTextEditorHeight: CoreFoundation.CGFloat?
  public let maxTextLength: Swift.Int?
  public let hintText: Foundation.AttributedString?
  public let hidesReadOnlyHint: Swift.Bool
  public let isCharCountEnabled: Swift.Bool
  public let allowsBeyondLimit: Swift.Bool
  public let charCountReachLimitMessage: Swift.String?
  public let charCountBeyondLimitMsg: Swift.String?
  public let mandatoryFieldIndicator: FioriSwiftUICore.KeyValueFormViewConfiguration.MandatoryFieldIndicator
  public let isRequired: Swift.Bool
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias MandatoryFieldIndicator = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct KeyValueFormViewFioriStyle : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore016KeyValueFormViewA5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public struct KeyValueItem<Key, Value> where Key : SwiftUI.View, Value : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder key: () -> Key, @SwiftUI.ViewBuilder value: () -> Value, axis: SwiftUI.Axis = .horizontal)
}
extension FioriSwiftUICore.KeyValueItem where Key == SwiftUI.Text, Value == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.KeyValueItemModel)
  public init(key: Swift.String, value: Swift.String? = nil, axis: SwiftUI.Axis = .horizontal)
}
extension FioriSwiftUICore.KeyValueItem where Value == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder key: () -> Key, axis: SwiftUI.Axis = .horizontal)
}
extension FioriSwiftUICore.KeyValueItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12KeyValueItemV4bodyQrvp", 0) __<Key, Value>
}
extension FioriSwiftUICore.KeyValueItemModel {
  public var axis: SwiftUI.Axis {
    get
  }
}
public struct Kpi {
  public init(@SwiftUI.ViewBuilder kpi: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Kpi {
  public init(kpi: FioriSwiftUICore.KPIItemData? = nil)
}
extension FioriSwiftUICore.Kpi {
  public init(_ configuration: FioriSwiftUICore.KpiConfiguration)
}
extension FioriSwiftUICore.Kpi : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore3KpiV4bodyQrvp", 0) __
}
public struct KpiCaption {
  public init(@SwiftUI.ViewBuilder kpiCaption: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.KpiCaption {
  public init(kpiCaption: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.KpiCaption {
  public init(_ configuration: FioriSwiftUICore.KpiCaptionConfiguration)
}
extension FioriSwiftUICore.KpiCaption : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10KpiCaptionV4bodyQrvp", 0) __
}
public struct KpiCaptionBaseStyle : FioriSwiftUICore.KpiCaptionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KpiCaptionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19KpiCaptionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct KpiCaptionFioriStyle : FioriSwiftUICore.KpiCaptionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KpiCaptionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010KpiCaptionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol KpiCaptionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.KpiCaptionConfiguration) -> Self.Body
}
public struct KpiCaptionConfiguration {
  public let kpiCaption: FioriSwiftUICore.KpiCaptionConfiguration.KpiCaption
  public typealias KpiCaption = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct KpiBaseStyle : FioriSwiftUICore.KpiStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KpiConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12KpiBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct KpiFioriStyle : FioriSwiftUICore.KpiStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KpiConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore03KpiA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol KpiStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.KpiConfiguration) -> Self.Body
}
public struct KpiConfiguration {
  public let kpi: FioriSwiftUICore.KpiConfiguration.Kpi
  public typealias Kpi = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct LabelItem {
  public init(@SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, alignment: SwiftUI.HorizontalAlignment? = nil)
}
extension FioriSwiftUICore.LabelItem {
  public init(icon: SwiftUI.Image? = nil, title: Foundation.AttributedString, alignment: SwiftUI.HorizontalAlignment? = nil)
}
extension FioriSwiftUICore.LabelItem {
  public init(_ configuration: FioriSwiftUICore.LabelItemConfiguration)
}
extension FioriSwiftUICore.LabelItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9LabelItemV4bodyQrvp", 0) __
}
public struct LabelItemBaseStyle : FioriSwiftUICore.LabelItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LabelItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18LabelItemBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol LabelItemStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.LabelItemConfiguration) -> Self.Body
}
public struct LabelItemConfiguration {
  public let icon: FioriSwiftUICore.LabelItemConfiguration.Icon
  public let title: FioriSwiftUICore.LabelItemConfiguration.Title
  public let alignment: SwiftUI.HorizontalAlignment?
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct LabelItemFioriStyle : FioriSwiftUICore.LabelItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LabelItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore09LabelItemA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension UIKit.UIFont {
  public class func preferredFont(from font: SwiftUI.Font, traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIFont
}
extension FioriSwiftUICore.LibraryPreviewData {
  public struct Person : Swift.Decodable, Swift.Hashable, Swift.Equatable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: FioriSwiftUICore.LibraryPreviewData.Person, b: FioriSwiftUICore.LibraryPreviewData.Person) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension FioriSwiftUICore.LibraryPreviewData.Person : FioriSwiftUICore.ContactItemModel {
  public var footnote: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person : FioriSwiftUICore.TitleComponent {
  public var title: Swift.String {
    get
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person : FioriSwiftUICore.SubtitleComponent {
  public var subtitle: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person : FioriSwiftUICore.DetailImageComponent {
  public var detailImage: SwiftUI.Image? {
    get
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person : FioriSwiftUICore.DescriptionTextComponent {
  public var descriptionText: Swift.String? {
    get
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person {
  public var actionItemsView: some SwiftUI.View {
    get
  }
}
extension FioriSwiftUICore.LibraryPreviewData.Person : FioriSwiftUICore.ActionItemsComponent {
  public var actionItems: [FioriSwiftUICore.ActivityItemDataType]? {
    get
  }
  public func didSelectActivityItem(_ activityItem: FioriSwiftUICore.ActivityItemDataType)
}
extension FioriSwiftUICore.LibraryPreviewData.Person {
  public static let laurelosborn: FioriSwiftUICore.LibraryPreviewData.Person
  public static let joesmith: FioriSwiftUICore.LibraryPreviewData.Person
}
public enum LibraryPreviewData {
}
public struct LinearProgressIndicator {
  public init(indicatorProgress: SwiftUI.Binding<Swift.Double>)
}
extension FioriSwiftUICore.LinearProgressIndicator {
  public init(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration)
}
extension FioriSwiftUICore.LinearProgressIndicator : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23LinearProgressIndicatorV4bodyQrvp", 0) __
}
public struct LinearProgressIndicatorBaseStyle : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore32LinearProgressIndicatorBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct LinearProgressIndicatorFioriStyle : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore023LinearProgressIndicatorA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct LinearProgressIndicatorDeterminateStyle : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore39LinearProgressIndicatorDeterminateStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct LinearProgressIndicatorIndeterminateStyle : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore41LinearProgressIndicatorIndeterminateStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct LinearProgressIndicatorErrorStyle : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33LinearProgressIndicatorErrorStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct LinearProgressIndicatorSuccessStyle : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore35LinearProgressIndicatorSuccessStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle where Self == FioriSwiftUICore.LinearProgressIndicatorDeterminateStyle {
  public static var determinate: FioriSwiftUICore.LinearProgressIndicatorDeterminateStyle {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle where Self == FioriSwiftUICore.LinearProgressIndicatorIndeterminateStyle {
  public static var indeterminate: FioriSwiftUICore.LinearProgressIndicatorIndeterminateStyle {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle where Self == FioriSwiftUICore.LinearProgressIndicatorErrorStyle {
  public static var error: FioriSwiftUICore.LinearProgressIndicatorErrorStyle {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle where Self == FioriSwiftUICore.LinearProgressIndicatorSuccessStyle {
  public static var success: FioriSwiftUICore.LinearProgressIndicatorSuccessStyle {
    get
  }
}
public protocol LinearProgressIndicatorStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> Self.Body
}
public struct LinearProgressIndicatorConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($indicatorProgress) public var indicatorProgress: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $indicatorProgress: SwiftUI.Binding<Swift.Double> {
    get
  }
}
public struct LinearProgressIndicatorView {
  public init(indicatorProgress: SwiftUI.Binding<Swift.Double>, @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.LinearProgressIndicatorView {
  public init(indicatorProgress: SwiftUI.Binding<Swift.Double>, icon: SwiftUI.Image? = nil, description: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.LinearProgressIndicatorView {
  public init(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration)
}
extension FioriSwiftUICore.LinearProgressIndicatorView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27LinearProgressIndicatorViewV4bodyQrvp", 0) __
}
public struct LinearProgressIndicatorViewBaseStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore36LinearProgressIndicatorViewBaseStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public struct LinearProgressIndicatorViewErrorStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore37LinearProgressIndicatorViewErrorStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewErrorStyle {
  public static var error: FioriSwiftUICore.LinearProgressIndicatorViewErrorStyle {
    get
  }
}
public struct LinearProgressIndicatorViewSuccessStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore39LinearProgressIndicatorViewSuccessStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewSuccessStyle {
  public static var success: FioriSwiftUICore.LinearProgressIndicatorViewSuccessStyle {
    get
  }
}
public struct LinearProgressIndicatorViewDeterminateStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore43LinearProgressIndicatorViewDeterminateStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewDeterminateStyle {
  public static var determinate: FioriSwiftUICore.LinearProgressIndicatorViewDeterminateStyle {
    get
  }
}
public struct LinearProgressIndicatorViewIndeterminateStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore45LinearProgressIndicatorViewIndeterminateStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle where Self == FioriSwiftUICore.LinearProgressIndicatorViewIndeterminateStyle {
  public static var indeterminate: FioriSwiftUICore.LinearProgressIndicatorViewIndeterminateStyle {
    get
  }
}
public protocol LinearProgressIndicatorViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> Self.Body
}
public struct LinearProgressIndicatorViewConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($indicatorProgress) public var indicatorProgress: Swift.Double {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $indicatorProgress: SwiftUI.Binding<Swift.Double> {
    get
  }
  public let icon: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration.Icon
  public let description: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration.Description
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct LinearProgressIndicatorViewFioriStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore027LinearProgressIndicatorViewA5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public struct ListPickerItem<Key, Value> where Key : SwiftUI.View, Value : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder key: () -> Key, @SwiftUI.ViewBuilder value: () -> Value)
}
extension FioriSwiftUICore.ListPickerItem where Key == SwiftUI.Text, Value == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.ListPickerItemModel)
  public init(key: Swift.String, value: Swift.String? = nil)
}
extension FioriSwiftUICore.ListPickerItem where Value == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder key: () -> Key)
}
extension FioriSwiftUICore.ListPickerItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14ListPickerItemV4bodyQrvp", 0) __<Key, Value>
}
extension FioriSwiftUICore.ListPickerItem {
  public init(@SwiftUI.ViewBuilder key: @escaping () -> Key, @SwiftUI.ViewBuilder value: @escaping () -> Value, configuration: FioriSwiftUICore.ListPickerItemConfiguration? = nil)
}
public struct ListPickerItemConfiguration {
  @available(iOS 15.0, macOS 12.0, *)
  public init<Data, ID>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, allowsMultipleSelection: Swift.Bool = true, searchFilter: ((Data.Element, Swift.String) -> Swift.Bool)?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View, rowBackground: ((Data.Element) -> some View)? = nil) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable
  @available(iOS 15.0, macOS 12.0, *)
  public init<Data, ID>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, allowsMultipleSelection: Swift.Bool = true, searchFilter: ((Data.Element, Swift.String) -> Swift.Bool)?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable
  public init<Data, ID, RowContent>(_ data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, isActive: SwiftUI.Binding<Swift.Bool>? = nil, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> RowContent) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable, RowContent : SwiftUI.View
  public init<Data, ID>(_ data: Data, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, isActive: SwiftUI.Binding<Swift.Bool>? = nil, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View) where Data : Swift.RandomAccessCollection, ID == Data.Element.ID, Data.Element : Swift.Identifiable
}
extension FioriSwiftUICore.ListPickerItemConfiguration {
  public init(_ data: [Swift.String], selection: SwiftUI.Binding<Swift.Set<Swift.String>>?, isActive: SwiftUI.Binding<Swift.Bool>? = nil)
}
extension SwiftUI.View {
  public func listPickerListStyle(_ style: some ListStyle) -> some SwiftUI.View
  
}
extension SwiftUI.EnvironmentValues {
  public var listPickerListViewModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
}
extension SwiftUI.View {
  public func listPickerListViewModifier(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> some View) -> some SwiftUI.View
  
}
public struct MHStack<T> : SwiftUI.View where T : FioriSwiftUICore.TagViewList {
  public init(spacing: CoreFoundation.CGFloat? = 10, lineSpacing: CoreFoundation.CGFloat? = 10, @FioriSwiftUICore.TagBuilder content: () -> T)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7MHStackV4bodyQrvp", 0) __<T>
}
extension FioriSwiftUICore.MHStack : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct MandatoryFieldIndicator {
  public init(@SwiftUI.ViewBuilder mandatoryFieldIndicator: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.MandatoryFieldIndicator {
  public init(mandatoryFieldIndicator: FioriSwiftUICore.TextOrIcon? = .text("*"))
}
extension FioriSwiftUICore.MandatoryFieldIndicator {
  public init(_ configuration: FioriSwiftUICore.MandatoryFieldIndicatorConfiguration)
}
extension FioriSwiftUICore.MandatoryFieldIndicator : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23MandatoryFieldIndicatorV4bodyQrvp", 0) __
}
public struct MandatoryFieldIndicatorBaseStyle : FioriSwiftUICore.MandatoryFieldIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore32MandatoryFieldIndicatorBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct MandatoryFieldIndicatorFioriStyle : FioriSwiftUICore.MandatoryFieldIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore023MandatoryFieldIndicatorA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol MandatoryFieldIndicatorStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> Self.Body
}
public struct MandatoryFieldIndicatorConfiguration {
  public let mandatoryFieldIndicator: FioriSwiftUICore.MandatoryFieldIndicatorConfiguration.MandatoryFieldIndicator
  public typealias MandatoryFieldIndicator = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct MasonryLayout : SwiftUI.Layout {
  public struct CacheData {
  }
  public enum ViewOrder : Swift.Int, Swift.CaseIterable {
    case topMost
    case leftMost
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [FioriSwiftUICore.MasonryLayout.ViewOrder]
    public typealias RawValue = Swift.Int
    public static var allCases: [FioriSwiftUICore.MasonryLayout.ViewOrder] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(numOfColumns: Swift.Int = 1, viewOrder: FioriSwiftUICore.MasonryLayout.ViewOrder = .topMost, spacing: CoreFoundation.CGFloat = 8, lineSpacing: CoreFoundation.CGFloat = 8, alignment: SwiftUI.HorizontalAlignment = .center)
  public func sizeThatFits(proposal: SwiftUI.ProposedViewSize, subviews: FioriSwiftUICore.MasonryLayout.Subviews, cache: inout FioriSwiftUICore.MasonryLayout.CacheData) -> CoreFoundation.CGSize
  public func placeSubviews(in bounds: CoreFoundation.CGRect, proposal: SwiftUI.ProposedViewSize, subviews: FioriSwiftUICore.MasonryLayout.Subviews, cache: inout FioriSwiftUICore.MasonryLayout.CacheData)
  public func makeCache(subviews: FioriSwiftUICore.MasonryLayout.Subviews) -> FioriSwiftUICore.MasonryLayout.CacheData
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Cache = FioriSwiftUICore.MasonryLayout.CacheData
}
public struct MediaImage {
  public init(@SwiftUI.ViewBuilder mediaImage: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.MediaImage {
  public init(mediaImage: SwiftUI.Image? = nil)
}
extension FioriSwiftUICore.MediaImage {
  public init(_ configuration: FioriSwiftUICore.MediaImageConfiguration)
}
extension FioriSwiftUICore.MediaImage : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10MediaImageV4bodyQrvp", 0) __
}
public struct MediaImageBaseStyle : FioriSwiftUICore.MediaImageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MediaImageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19MediaImageBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct MediaImageFioriStyle : FioriSwiftUICore.MediaImageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MediaImageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010MediaImageA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol MediaImageStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.MediaImageConfiguration) -> Self.Body
}
public struct MediaImageConfiguration {
  public let mediaImage: FioriSwiftUICore.MediaImageConfiguration.MediaImage
  public typealias MediaImage = FioriSwiftUICore.ConfigurationViewWrapper
}
extension FioriSwiftUICore.MenuSelection {
  public init(action: FioriSwiftUICore.FioriButton? = nil, isExpanded: SwiftUI.Binding<Swift.Bool>, items: [any FioriSwiftUICore.MenuSelectionItemProtocol] = [], actionHandler: @escaping (any FioriSwiftUICore.MenuSelectionItemProtocol) -> Swift.Void)
}
public struct MenuSelection {
  public init(@SwiftUI.ViewBuilder action: () -> any SwiftUI.View = { EmptyView() }, isExpanded: SwiftUI.Binding<Swift.Bool>, @SwiftUI.ViewBuilder items: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.MenuSelection {
  public init(action: FioriSwiftUICore.FioriButton? = nil, isExpanded: SwiftUI.Binding<Swift.Bool>, items: [any FioriSwiftUICore.MenuSelectionItemProtocol] = [])
}
extension FioriSwiftUICore.MenuSelection {
  public init(_ configuration: FioriSwiftUICore.MenuSelectionConfiguration)
}
extension FioriSwiftUICore.MenuSelection : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13MenuSelectionV4bodyQrvp", 0) __
}
public struct MenuSelectionItem {
  public init(@SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, action: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.MenuSelectionItem {
  public init(icon: SwiftUI.Image? = nil, title: Foundation.AttributedString, action: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.MenuSelectionItem {
  public init(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration)
}
extension FioriSwiftUICore.MenuSelectionItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17MenuSelectionItemV4bodyQrvp", 0) __
}
public protocol MenuSelectionItemProtocol {
  var icon: SwiftUI.Image? { get }
  var title: Foundation.AttributedString { get }
}
extension FioriSwiftUICore.MenuSelectionItem {
  public init(model: any FioriSwiftUICore.MenuSelectionItemProtocol, action: (() -> Swift.Void)? = nil)
}
public struct MenuSelectionItemBaseStyle : FioriSwiftUICore.MenuSelectionItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26MenuSelectionItemBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}

public protocol MenuSelectionItemStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration) -> Self.Body
}
public struct MenuSelectionItemConfiguration {
  public let icon: FioriSwiftUICore.MenuSelectionItemConfiguration.Icon
  public let title: FioriSwiftUICore.MenuSelectionItemConfiguration.Title
  public let action: (() -> Swift.Void)?
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct MenuSelectionItemFioriStyle : FioriSwiftUICore.MenuSelectionItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore017MenuSelectionItemA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct MenuSelectionBaseStyle : FioriSwiftUICore.MenuSelectionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22MenuSelectionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}



public protocol MenuSelectionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionConfiguration) -> Self.Body
}
public struct MenuSelectionConfiguration {
  public let action: FioriSwiftUICore.MenuSelectionConfiguration.Action
  @SwiftUI.Binding @_projectedValueProperty($isExpanded) public var isExpanded: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isExpanded: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public let items: FioriSwiftUICore.MenuSelectionConfiguration.Items
  public typealias Action = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Items = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct MenuSelectionFioriStyle : FioriSwiftUICore.MenuSelectionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013MenuSelectionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct MessageContent {
  public init(@SwiftUI.ViewBuilder messageContent: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.MessageContent {
  public init(_ configuration: FioriSwiftUICore.MessageContentConfiguration)
}
extension FioriSwiftUICore.MessageContent : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14MessageContentV4bodyQrvp", 0) __
}
public struct MessageContentBaseStyle : FioriSwiftUICore.MessageContentStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MessageContentConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23MessageContentBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct MessageContentFioriStyle : FioriSwiftUICore.MessageContentStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MessageContentConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014MessageContentA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol MessageContentStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.MessageContentConfiguration) -> Self.Body
}
public struct MessageContentConfiguration {
  public let messageContent: FioriSwiftUICore.MessageContentConfiguration.MessageContent
  public typealias MessageContent = FioriSwiftUICore.ConfigurationViewWrapper
}
public protocol IconStackModel : FioriSwiftUICore.IconsComponent {
}
public protocol AvatarStackModel : FioriSwiftUICore.AvatarsComponent {
}
public protocol FootnoteIconStackModel : FioriSwiftUICore.FootnoteIconsComponent {
}
public protocol _ObjectItemModel : FioriSwiftUICore.AvatarsComponent, FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.DetailImageComponent, FioriSwiftUICore.FootnoteComponent, FioriSwiftUICore.FootnoteIconsComponent, FioriSwiftUICore.IconsComponent, FioriSwiftUICore.StatusComponent, FioriSwiftUICore.SubstatusComponent, FioriSwiftUICore.SubtitleComponent, FioriSwiftUICore.TagsComponent, FioriSwiftUICore.TitleComponent {
  var action: (any FioriSwiftUICore._ActionModel)? { get }
}
@available(*, unavailable, renamed: "_ObjectItemModel", message: "Will be removed in the future release. Please create ObjectItem with other initializers instead.")
public protocol ObjectItemModel {
}
public protocol TagStackModel : FioriSwiftUICore.TagsComponent {
}
public protocol ObjectHeaderModel : FioriSwiftUICore.BodyTextComponent, FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.DetailImageComponent, FioriSwiftUICore.FootnoteComponent, FioriSwiftUICore.StatusComponent, FioriSwiftUICore.SubstatusComponent, FioriSwiftUICore.SubtitleComponent, FioriSwiftUICore.TagsComponent, FioriSwiftUICore.TitleComponent {
}
public protocol HeaderChartModel : FioriSwiftUICore.KpiComponent, FioriSwiftUICore.SubtitleComponent, FioriSwiftUICore.TitleComponent, FioriSwiftUICore.TrendComponent, FioriSwiftUICore.TrendImageComponent {
}
public protocol SectionHeaderModel : FioriSwiftUICore.AttributeComponent, FioriSwiftUICore.TitleComponent {
}
public protocol KPIItemModel : FioriSwiftUICore.KPIHeaderItemModel, FioriSwiftUICore.KpiComponent, FioriSwiftUICore.SubtitleComponent {
}
public protocol KPIProgressItemModel : FioriSwiftUICore.FootnoteComponent, FioriSwiftUICore.KPIHeaderItemModel, FioriSwiftUICore.KpiProgressComponent, FioriSwiftUICore.SubtitleComponent {
}
public protocol KeyValueItemModel : FioriSwiftUICore.KeyComponent, FioriSwiftUICore.ValueComponent {
  var axis: SwiftUI.Axis { get }
}
public protocol _ActionModel : FioriSwiftUICore.ActionComponent {
}
@available(*, unavailable, renamed: "_ActionModel", message: "Will be removed in the future release. Please create Action with other initializers instead.")
public protocol ActionModel : FioriSwiftUICore.ActionComponent {
}
public protocol TextInputModel : FioriSwiftUICore.TextInputComponent {
}
public protocol ActivityItemModel : FioriSwiftUICore.IconComponent, FioriSwiftUICore.SubtitleComponent {
}
public protocol ActivityItemsModel : FioriSwiftUICore.ActionItemsComponent {
}
public protocol ListPickerItemModel : FioriSwiftUICore.KeyComponent, FioriSwiftUICore.ValueComponent {
}
public protocol ProgressIndicatorModel : FioriSwiftUICore.ProgressIndicatorComponent {
}
public protocol _SideBarListItemModel : FioriSwiftUICore.AccessoryIconComponent, FioriSwiftUICore.IconComponent, FioriSwiftUICore.SubtitleComponent, FioriSwiftUICore.TitleComponent {
}
@available(*, unavailable, renamed: "_SideBarListItemModel", message: "Will be removed in the future release. Please create SideBarListItem with other initializers instead.")
public protocol SideBarListItemModel {
}
public protocol _SideBarModel : FioriSwiftUICore.SubtitleComponent {
}
@available(*, unavailable, renamed: "_SideBarModel", message: "Will be removed in the future release. Please create SideBar with other initializers instead.")
public protocol SideBarModel {
}
public protocol ContactItemModel : FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.DetailImageComponent, FioriSwiftUICore.SubtitleComponent, FioriSwiftUICore.TitleComponent {
  var actionItems: (any FioriSwiftUICore.ActivityItemsModel)? { get }
}
public protocol WelcomeScreenModel : FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.FootnoteComponent, FioriSwiftUICore.IconComponent, FioriSwiftUICore.SubtitleComponent, FioriSwiftUICore.TitleComponent {
  var textInput: (any FioriSwiftUICore.TextInputModel)? { get }
  var action: (any FioriSwiftUICore._ActionModel)? { get }
  var secondaryAction: (any FioriSwiftUICore._ActionModel)? { get }
}
public protocol ActivationScreenModel : FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.FootnoteComponent, FioriSwiftUICore.TitleComponent {
  var action: (any FioriSwiftUICore._ActionModel)? { get }
  var secondaryAction: (any FioriSwiftUICore._ActionModel)? { get }
  var textInput: (any FioriSwiftUICore.TextInputModel)? { get }
}
public protocol InfoViewModel : FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.TitleComponent {
  var progressIndicator: (any FioriSwiftUICore.ProgressIndicatorModel)? { get }
  var action: (any FioriSwiftUICore._ActionModel)? { get }
  var secondaryAction: (any FioriSwiftUICore._ActionModel)? { get }
}
public protocol EULAViewModel : FioriSwiftUICore.BodyAttributedTextComponent, FioriSwiftUICore.TitleComponent {
  var action: (any FioriSwiftUICore._ActionModel)? { get }
  var secondaryAction: (any FioriSwiftUICore._ActionModel)? { get }
  var cancelAction: (any FioriSwiftUICore._ActionModel)? { get }
  var didAgree: (() -> Swift.Void)? { get }
  var didDisagree: (() -> Swift.Void)? { get }
  var didCancel: (() -> Swift.Void)? { get }
}
public protocol UserConsentViewModel {
  var userConsentForms: [any FioriSwiftUICore.UserConsentFormModel] { get }
  var didAllow: ((Swift.Int) -> Swift.Void)? { get }
  var didDeny: ((Swift.Int, Swift.Bool) -> Swift.Void)? { get }
  var didCancel: ((Swift.Int) -> Swift.Void)? { get }
  var didFinish: (([Swift.Int]) -> Swift.Void)? { get }
}
public protocol UserConsentFormModel {
  var nextAction: (any FioriSwiftUICore._ActionModel)? { get }
  var cancelAction: (any FioriSwiftUICore._ActionModel)? { get }
  var allowAction: (any FioriSwiftUICore._ActionModel)? { get }
  var denyAction: (any FioriSwiftUICore._ActionModel)? { get }
  var notNowAction: (any FioriSwiftUICore._ActionModel)? { get }
  var userConsentPages: [any FioriSwiftUICore.UserConsentPageModel] { get }
  var isRequired: Swift.Bool { get }
  var alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? { get }
  var didAllow: (() -> Swift.Void)? { get }
  var didDeny: ((Swift.Bool) -> Swift.Void)? { get }
  var didCancel: (() -> Swift.Void)? { get }
}
public protocol UserConsentPageModel : FioriSwiftUICore.BodyAttributedTextComponent, FioriSwiftUICore.TitleComponent {
  var action: (any FioriSwiftUICore._ActionModel)? { get }
}
public protocol SignatureCaptureViewModel : AnyObject {
  var title: Swift.String? { get }
  var startAction: (any FioriSwiftUICore._ActionModel)? { get }
  var restartAction: (any FioriSwiftUICore._ActionModel)? { get }
  var cancelAction: (any FioriSwiftUICore._ActionModel)? { get }
  var clearAction: (any FioriSwiftUICore._ActionModel)? { get }
  var saveAction: (any FioriSwiftUICore._ActionModel)? { get }
  var signatureImage: UIKit.UIImage? { get }
  var onSave: ((UIKit.UIImage) -> Swift.Void)? { get }
  var onDelete: (() -> Swift.Void)? { get }
}
public protocol EmptyStateViewModel : FioriSwiftUICore.DescriptionTextComponent, FioriSwiftUICore.DetailImageComponent, FioriSwiftUICore.TitleComponent {
  var action: (any FioriSwiftUICore._ActionModel)? { get }
}
public protocol DurationPickerModel : FioriSwiftUICore.DurationPickerComponent {
}
public protocol SearchableListViewModel {
  var cancelAction: (any FioriSwiftUICore._ActionModel)? { get }
  var doneAction: (any FioriSwiftUICore._ActionModel)? { get }
}
public protocol KPIHeaderItemModel {
}
public protocol SingleStepModel {
  var id: Swift.String { get set }
  var title: Swift.String? { get set }
  var node: FioriSwiftUICore.TextOrIcon { get set }
  var substeps: [any FioriSwiftUICore.SingleStepModel] { get set }
}
public protocol StepProgressIndicatorModel : AnyObject {
  var selection: Swift.String { get set }
  var title: Swift.String? { get }
  var action: (any FioriSwiftUICore._ActionModel)? { get }
  var steps: [any FioriSwiftUICore.SingleStepModel] { get }
  var cancelAction: (any FioriSwiftUICore._ActionModel)? { get }
}
public protocol FilterFeedbackBarModel : AnyObject {
  var items: [[FioriSwiftUICore.SortFilterItem]] { get set }
  var onUpdate: (() -> Swift.Void)? { get set }
}
public protocol SortFilterViewModel : AnyObject, FioriSwiftUICore.TitleComponent {
  var items: [[FioriSwiftUICore.SortFilterItem]] { get set }
  var cancelAction: (any FioriSwiftUICore._ActionModel)? { get }
  var resetAction: (any FioriSwiftUICore._ActionModel)? { get }
  var applyAction: (any FioriSwiftUICore._ActionModel)? { get }
  var onUpdate: (() -> Swift.Void)? { get }
}
public protocol FilterFeedbackBarItemModel : FioriSwiftUICore.LeftIconComponent, FioriSwiftUICore.RightIconComponent, FioriSwiftUICore.TitleComponent {
  var isSelected: Swift.Bool { get }
}
public protocol FilterFeedbackBarButtonModel : FioriSwiftUICore.LeftIconComponent, FioriSwiftUICore.TitleComponent {
  var isSelected: Swift.Bool { get }
}
public protocol OptionListPickerItemModel : FioriSwiftUICore.OptionListPickerComponent {
  var onTap: ((_ index: Swift.Int) -> Swift.Void)? { get }
}
public protocol SwitchPickerItemModel : FioriSwiftUICore.SwitchPickerComponent {
}
public protocol SliderPickerItemModel : FioriSwiftUICore.SliderPickerComponent {
}
public struct ModifiedStyle<Style, Modifier> : SwiftUI.DynamicProperty where Modifier : SwiftUI.ViewModifier {
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.AccessoryIconStyle where Style : FioriSwiftUICore.AccessoryIconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AccessoryIconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013AccessoryIconE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct AccessoryIconStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.AccessoryIconStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.AccessoryIconStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26AccessoryIconStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.AccessoryIconStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.AccessoryIconStyle
  
  public func concat(_ style: some AccessoryIconStyle) -> some FioriSwiftUICore.AccessoryIconStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.ActionStyle where Style : FioriSwiftUICore.ActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A06ActionE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct ActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.ActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.ActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19ActionStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.ActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.ActionStyle
  
  public func concat(_ style: some ActionStyle) -> some FioriSwiftUICore.ActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.AttributeStyle where Style : FioriSwiftUICore.AttributeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AttributeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A09AttributeE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct AttributeStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.AttributeStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.AttributeStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22AttributeStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.AttributeStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.AttributeStyle
  
  public func concat(_ style: some AttributeStyle) -> some FioriSwiftUICore.AttributeStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.AvatarsStyle where Style : FioriSwiftUICore.AvatarsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.AvatarsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A07AvatarsE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct AvatarsStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.AvatarsStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.AvatarsStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20AvatarsStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.AvatarsStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.AvatarsStyle
  
  public func concat(_ style: some AvatarsStyle) -> some FioriSwiftUICore.AvatarsStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.BannerMessageStyle where Style : FioriSwiftUICore.BannerMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.BannerMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013BannerMessageE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct BannerMessageStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.BannerMessageStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.BannerMessageStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26BannerMessageStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.BannerMessageStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.BannerMessageStyle
  
  public func concat(_ style: some BannerMessageStyle) -> some FioriSwiftUICore.BannerMessageStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardBodyStyle where Style : FioriSwiftUICore.CardBodyStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardBodyConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A08CardBodyE0RzrlE04makeG0yQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardBodyStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardBodyStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardBodyStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21CardBodyStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardBodyStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardBodyStyle
  
  public func concat(_ style: some CardBodyStyle) -> some FioriSwiftUICore.CardBodyStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardStyle where Style : FioriSwiftUICore.CardStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A04CardE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17CardStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardStyle
  
  public func concat(_ style: some CardStyle) -> some FioriSwiftUICore.CardStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardExtHeaderStyle where Style : FioriSwiftUICore.CardExtHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardExtHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013CardExtHeaderE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardExtHeaderStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardExtHeaderStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardExtHeaderStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26CardExtHeaderStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardExtHeaderStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardExtHeaderStyle
  
  public func concat(_ style: some CardExtHeaderStyle) -> some FioriSwiftUICore.CardExtHeaderStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardFooterStyle where Style : FioriSwiftUICore.CardFooterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardFooterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010CardFooterE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardFooterStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardFooterStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardFooterStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23CardFooterStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardFooterStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardFooterStyle
  
  public func concat(_ style: some CardFooterStyle) -> some FioriSwiftUICore.CardFooterStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardHeaderStyle where Style : FioriSwiftUICore.CardHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010CardHeaderE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardHeaderStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardHeaderStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardHeaderStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23CardHeaderStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardHeaderStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardHeaderStyle
  
  public func concat(_ style: some CardHeaderStyle) -> some FioriSwiftUICore.CardHeaderStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardMainHeaderStyle where Style : FioriSwiftUICore.CardMainHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMainHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A014CardMainHeaderE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardMainHeaderStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardMainHeaderStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardMainHeaderStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27CardMainHeaderStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardMainHeaderStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardMainHeaderStyle
  
  public func concat(_ style: some CardMainHeaderStyle) -> some FioriSwiftUICore.CardMainHeaderStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CardMediaStyle where Style : FioriSwiftUICore.CardMediaStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CardMediaConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A09CardMediaE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CardMediaStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CardMediaStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CardMediaStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22CardMediaStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CardMediaStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CardMediaStyle
  
  public func concat(_ style: some CardMediaStyle) -> some FioriSwiftUICore.CardMediaStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CloseActionStyle where Style : FioriSwiftUICore.CloseActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CloseActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A011CloseActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CloseActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CloseActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CloseActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24CloseActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CloseActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CloseActionStyle
  
  public func concat(_ style: some CloseActionStyle) -> some FioriSwiftUICore.CloseActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.CounterStyle where Style : FioriSwiftUICore.CounterStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.CounterConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A07CounterE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct CounterStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.CounterStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.CounterStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20CounterStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.CounterStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.CounterStyle
  
  public func concat(_ style: some CounterStyle) -> some FioriSwiftUICore.CounterStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.DecrementActionStyle where Style : FioriSwiftUICore.DecrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DecrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A015DecrementActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct DecrementActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.DecrementActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.DecrementActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28DecrementActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.DecrementActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.DecrementActionStyle
  
  public func concat(_ style: some DecrementActionStyle) -> some FioriSwiftUICore.DecrementActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.DescriptionStyle where Style : FioriSwiftUICore.DescriptionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DescriptionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A011DescriptionE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct DescriptionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.DescriptionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.DescriptionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24DescriptionStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.DescriptionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.DescriptionStyle
  
  public func concat(_ style: some DescriptionStyle) -> some FioriSwiftUICore.DescriptionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.DetailImageStyle where Style : FioriSwiftUICore.DetailImageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.DetailImageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A011DetailImageE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct DetailImageStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.DetailImageStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.DetailImageStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24DetailImageStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.DetailImageStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.DetailImageStyle
  
  public func concat(_ style: some DetailImageStyle) -> some FioriSwiftUICore.DetailImageStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.FilledIconStyle where Style : FioriSwiftUICore.FilledIconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FilledIconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010FilledIconE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct FilledIconStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.FilledIconStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.FilledIconStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23FilledIconStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.FilledIconStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.FilledIconStyle
  
  public func concat(_ style: some FilledIconStyle) -> some FioriSwiftUICore.FilledIconStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.FootnoteStyle where Style : FioriSwiftUICore.FootnoteStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FootnoteConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A08FootnoteE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct FootnoteStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.FootnoteStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.FootnoteStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21FootnoteStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.FootnoteStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.FootnoteStyle
  
  public func concat(_ style: some FootnoteStyle) -> some FioriSwiftUICore.FootnoteStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.FootnoteIconsStyle where Style : FioriSwiftUICore.FootnoteIconsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FootnoteIconsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013FootnoteIconsE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct FootnoteIconsStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.FootnoteIconsStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.FootnoteIconsStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26FootnoteIconsStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.FootnoteIconsStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.FootnoteIconsStyle
  
  public func concat(_ style: some FootnoteIconsStyle) -> some FioriSwiftUICore.FootnoteIconsStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.FormViewStyle where Style : FioriSwiftUICore.FormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.FormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A08FormViewE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct FormViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.FormViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.FormViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21FormViewStyleModifierV4body7contentQr0B2UI01_eG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.FormViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.FormViewStyle
  
  public func concat(_ style: some FormViewStyle) -> some FioriSwiftUICore.FormViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.GreetingTextStyle where Style : FioriSwiftUICore.GreetingTextStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.GreetingTextConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A012GreetingTextE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct GreetingTextStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.GreetingTextStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.GreetingTextStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25GreetingTextStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.GreetingTextStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.GreetingTextStyle
  
  public func concat(_ style: some GreetingTextStyle) -> some FioriSwiftUICore.GreetingTextStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.HeaderActionStyle where Style : FioriSwiftUICore.HeaderActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.HeaderActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A012HeaderActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct HeaderActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.HeaderActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.HeaderActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25HeaderActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.HeaderActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.HeaderActionStyle
  
  public func concat(_ style: some HeaderActionStyle) -> some FioriSwiftUICore.HeaderActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.HelperTextStyle where Style : FioriSwiftUICore.HelperTextStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.HelperTextConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010HelperTextE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct HelperTextStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.HelperTextStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.HelperTextStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23HelperTextStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.HelperTextStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.HelperTextStyle
  
  public func concat(_ style: some HelperTextStyle) -> some FioriSwiftUICore.HelperTextStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.IconStyle where Style : FioriSwiftUICore.IconStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IconConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A04IconE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct IconStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.IconStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.IconStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17IconStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.IconStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.IconStyle
  
  public func concat(_ style: some IconStyle) -> some FioriSwiftUICore.IconStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.IconsStyle where Style : FioriSwiftUICore.IconsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IconsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A05IconsE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct IconsStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.IconsStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.IconsStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18IconsStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.IconsStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.IconsStyle
  
  public func concat(_ style: some IconsStyle) -> some FioriSwiftUICore.IconsStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.IllustratedMessageStyle where Style : FioriSwiftUICore.IllustratedMessageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IllustratedMessageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A018IllustratedMessageE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct IllustratedMessageStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.IllustratedMessageStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.IllustratedMessageStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31IllustratedMessageStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.IllustratedMessageStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.IllustratedMessageStyle
  
  public func concat(_ style: some IllustratedMessageStyle) -> some FioriSwiftUICore.IllustratedMessageStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.IncrementActionStyle where Style : FioriSwiftUICore.IncrementActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.IncrementActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A015IncrementActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct IncrementActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.IncrementActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.IncrementActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28IncrementActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.IncrementActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.IncrementActionStyle
  
  public func concat(_ style: some IncrementActionStyle) -> some FioriSwiftUICore.IncrementActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.InformationViewStyle where Style : FioriSwiftUICore.InformationViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.InformationViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A015InformationViewE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct InformationViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.InformationViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.InformationViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28InformationViewStyleModifierV4body7contentQr0B2UI01_eG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.InformationViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.InformationViewStyle
  
  public func concat(_ style: some InformationViewStyle) -> some FioriSwiftUICore.InformationViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.JouleWelcomeScreenStyle where Style : FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A018JouleWelcomeScreenE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct JouleWelcomeScreenStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.JouleWelcomeScreenStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.JouleWelcomeScreenStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31JouleWelcomeScreenStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.JouleWelcomeScreenStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.JouleWelcomeScreenStyle
  
  public func concat(_ style: some JouleWelcomeScreenStyle) -> some FioriSwiftUICore.JouleWelcomeScreenStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.KeyValueFormViewStyle where Style : FioriSwiftUICore.KeyValueFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KeyValueFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A016KeyValueFormViewE0RzrlE8makeBodyyQrAA0fghI13ConfigurationVF", 0) __<Style, Modifier>
}
public struct KeyValueFormViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.KeyValueFormViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.KeyValueFormViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29KeyValueFormViewStyleModifierV4body7contentQr0B2UI01_gI8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.KeyValueFormViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.KeyValueFormViewStyle
  
  public func concat(_ style: some KeyValueFormViewStyle) -> some FioriSwiftUICore.KeyValueFormViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.KpiCaptionStyle where Style : FioriSwiftUICore.KpiCaptionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KpiCaptionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010KpiCaptionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct KpiCaptionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.KpiCaptionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.KpiCaptionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23KpiCaptionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.KpiCaptionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.KpiCaptionStyle
  
  public func concat(_ style: some KpiCaptionStyle) -> some FioriSwiftUICore.KpiCaptionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.KpiStyle where Style : FioriSwiftUICore.KpiStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.KpiConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A03KpiE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct KpiStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.KpiStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.KpiStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16KpiStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.KpiStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.KpiStyle
  
  public func concat(_ style: some KpiStyle) -> some FioriSwiftUICore.KpiStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.LabelItemStyle where Style : FioriSwiftUICore.LabelItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LabelItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A09LabelItemE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct LabelItemStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.LabelItemStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.LabelItemStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22LabelItemStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.LabelItemStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.LabelItemStyle
  
  public func concat(_ style: some LabelItemStyle) -> some FioriSwiftUICore.LabelItemStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.LinearProgressIndicatorStyle where Style : FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A023LinearProgressIndicatorE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct LinearProgressIndicatorStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.LinearProgressIndicatorStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.LinearProgressIndicatorStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore36LinearProgressIndicatorStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.LinearProgressIndicatorStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.LinearProgressIndicatorStyle
  
  public func concat(_ style: some LinearProgressIndicatorStyle) -> some FioriSwiftUICore.LinearProgressIndicatorStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.LinearProgressIndicatorViewStyle where Style : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A027LinearProgressIndicatorViewE0RzrlE8makeBodyyQrAA0fghI13ConfigurationVF", 0) __<Style, Modifier>
}
public struct LinearProgressIndicatorViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.LinearProgressIndicatorViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore40LinearProgressIndicatorViewStyleModifierV4body7contentQr0B2UI01_gI8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.LinearProgressIndicatorViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.LinearProgressIndicatorViewStyle
  
  public func concat(_ style: some LinearProgressIndicatorViewStyle) -> some FioriSwiftUICore.LinearProgressIndicatorViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.MandatoryFieldIndicatorStyle where Style : FioriSwiftUICore.MandatoryFieldIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A023MandatoryFieldIndicatorE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct MandatoryFieldIndicatorStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.MandatoryFieldIndicatorStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.MandatoryFieldIndicatorStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore36MandatoryFieldIndicatorStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.MandatoryFieldIndicatorStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.MandatoryFieldIndicatorStyle
  
  public func concat(_ style: some MandatoryFieldIndicatorStyle) -> some FioriSwiftUICore.MandatoryFieldIndicatorStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.MediaImageStyle where Style : FioriSwiftUICore.MediaImageStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MediaImageConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010MediaImageE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct MediaImageStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.MediaImageStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.MediaImageStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23MediaImageStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.MediaImageStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.MediaImageStyle
  
  public func concat(_ style: some MediaImageStyle) -> some FioriSwiftUICore.MediaImageStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.MenuSelectionStyle where Style : FioriSwiftUICore.MenuSelectionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013MenuSelectionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct MenuSelectionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.MenuSelectionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.MenuSelectionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26MenuSelectionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.MenuSelectionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.MenuSelectionStyle
  
  public func concat(_ style: some MenuSelectionStyle) -> some FioriSwiftUICore.MenuSelectionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.MenuSelectionItemStyle where Style : FioriSwiftUICore.MenuSelectionItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MenuSelectionItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A017MenuSelectionItemE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct MenuSelectionItemStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.MenuSelectionItemStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.MenuSelectionItemStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30MenuSelectionItemStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.MenuSelectionItemStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.MenuSelectionItemStyle
  
  public func concat(_ style: some MenuSelectionItemStyle) -> some FioriSwiftUICore.MenuSelectionItemStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.MessageContentStyle where Style : FioriSwiftUICore.MessageContentStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MessageContentConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A014MessageContentE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct MessageContentStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.MessageContentStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.MessageContentStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27MessageContentStyleModifierV4body7contentQr0B2UI05_Viewg1_E0VyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.MessageContentStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.MessageContentStyle
  
  public func concat(_ style: some MessageContentStyle) -> some FioriSwiftUICore.MessageContentStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.MoreActionOverflowStyle where Style : FioriSwiftUICore.MoreActionOverflowStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MoreActionOverflowConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A018MoreActionOverflowE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct MoreActionOverflowStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.MoreActionOverflowStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.MoreActionOverflowStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31MoreActionOverflowStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.MoreActionOverflowStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.MoreActionOverflowStyle
  
  public func concat(_ style: some MoreActionOverflowStyle) -> some FioriSwiftUICore.MoreActionOverflowStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.NoteFormViewStyle where Style : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A012NoteFormViewE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct NoteFormViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.NoteFormViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.NoteFormViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25NoteFormViewStyleModifierV4body7contentQr0B2UI01_fH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.NoteFormViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.NoteFormViewStyle
  
  public func concat(_ style: some NoteFormViewStyle) -> some FioriSwiftUICore.NoteFormViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.NowIndicatorNodeStyle where Style : FioriSwiftUICore.NowIndicatorNodeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NowIndicatorNodeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A016NowIndicatorNodeE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct NowIndicatorNodeStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.NowIndicatorNodeStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.NowIndicatorNodeStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29NowIndicatorNodeStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.NowIndicatorNodeStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.NowIndicatorNodeStyle
  
  public func concat(_ style: some NowIndicatorNodeStyle) -> some FioriSwiftUICore.NowIndicatorNodeStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.ObjectItemStyle where Style : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010ObjectItemE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct ObjectItemStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.ObjectItemStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.ObjectItemStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23ObjectItemStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.ObjectItemStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.ObjectItemStyle
  
  public func concat(_ style: some ObjectItemStyle) -> some FioriSwiftUICore.ObjectItemStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.OptionsStyle where Style : FioriSwiftUICore.OptionsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.OptionsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A07OptionsE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct OptionsStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.OptionsStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.OptionsStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20OptionsStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.OptionsStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.OptionsStyle
  
  public func concat(_ style: some OptionsStyle) -> some FioriSwiftUICore.OptionsStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.OverflowActionStyle where Style : FioriSwiftUICore.OverflowActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.OverflowActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A014OverflowActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct OverflowActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.OverflowActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.OverflowActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27OverflowActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.OverflowActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.OverflowActionStyle
  
  public func concat(_ style: some OverflowActionStyle) -> some FioriSwiftUICore.OverflowActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.PlaceholderStyle where Style : FioriSwiftUICore.PlaceholderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A011PlaceholderE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct PlaceholderStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.PlaceholderStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.PlaceholderStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24PlaceholderStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.PlaceholderStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.PlaceholderStyle
  
  public func concat(_ style: some PlaceholderStyle) -> some FioriSwiftUICore.PlaceholderStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.PlaceholderTextEditorStyle where Style : FioriSwiftUICore.PlaceholderTextEditorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A021PlaceholderTextEditorE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct PlaceholderTextEditorStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.PlaceholderTextEditorStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.PlaceholderTextEditorStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34PlaceholderTextEditorStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.PlaceholderTextEditorStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.PlaceholderTextEditorStyle
  
  public func concat(_ style: some PlaceholderTextEditorStyle) -> some FioriSwiftUICore.PlaceholderTextEditorStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.PlaceholderTextFieldStyle where Style : FioriSwiftUICore.PlaceholderTextFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A020PlaceholderTextFieldE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct PlaceholderTextFieldStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.PlaceholderTextFieldStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.PlaceholderTextFieldStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33PlaceholderTextFieldStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.PlaceholderTextFieldStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.PlaceholderTextFieldStyle
  
  public func concat(_ style: some PlaceholderTextFieldStyle) -> some FioriSwiftUICore.PlaceholderTextFieldStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.ProfileHeaderStyle where Style : FioriSwiftUICore.ProfileHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013ProfileHeaderE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct ProfileHeaderStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.ProfileHeaderStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.ProfileHeaderStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26ProfileHeaderStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.ProfileHeaderStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.ProfileHeaderStyle
  
  public func concat(_ style: some ProfileHeaderStyle) -> some FioriSwiftUICore.ProfileHeaderStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.RatingControlStyle where Style : FioriSwiftUICore.RatingControlStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013RatingControlE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct RatingControlStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.RatingControlStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.RatingControlStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26RatingControlStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.RatingControlStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.RatingControlStyle
  
  public func concat(_ style: some RatingControlStyle) -> some FioriSwiftUICore.RatingControlStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.RatingControlFormViewStyle where Style : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A021RatingControlFormViewE0RzrlE8makeBodyyQrAA0fghI13ConfigurationVF", 0) __<Style, Modifier>
}
public struct RatingControlFormViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.RatingControlFormViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.RatingControlFormViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore34RatingControlFormViewStyleModifierV4body7contentQr0B2UI01_gI8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.RatingControlFormViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.RatingControlFormViewStyle
  
  public func concat(_ style: some RatingControlFormViewStyle) -> some FioriSwiftUICore.RatingControlFormViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.Row1Style where Style : FioriSwiftUICore.Row1Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row1Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A04Row1E0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct Row1StyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.Row1Style {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.Row1StyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17Row1StyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.Row1Style {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.Row1Style
  
  public func concat(_ style: some Row1Style) -> some FioriSwiftUICore.Row1Style
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.Row2Style where Style : FioriSwiftUICore.Row2Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row2Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A04Row2E0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct Row2StyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.Row2Style {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.Row2StyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17Row2StyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.Row2Style {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.Row2Style
  
  public func concat(_ style: some Row2Style) -> some FioriSwiftUICore.Row2Style
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.Row3Style where Style : FioriSwiftUICore.Row3Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row3Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A04Row3E0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct Row3StyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.Row3Style {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.Row3StyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17Row3StyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.Row3Style {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.Row3Style
  
  public func concat(_ style: some Row3Style) -> some FioriSwiftUICore.Row3Style
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SecondaryActionStyle where Style : FioriSwiftUICore.SecondaryActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SecondaryActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A015SecondaryActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SecondaryActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SecondaryActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SecondaryActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28SecondaryActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SecondaryActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SecondaryActionStyle
  
  public func concat(_ style: some SecondaryActionStyle) -> some FioriSwiftUICore.SecondaryActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SecondaryTimestampStyle where Style : FioriSwiftUICore.SecondaryTimestampStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SecondaryTimestampConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A018SecondaryTimestampE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SecondaryTimestampStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SecondaryTimestampStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SecondaryTimestampStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31SecondaryTimestampStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SecondaryTimestampStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SecondaryTimestampStyle
  
  public func concat(_ style: some SecondaryTimestampStyle) -> some FioriSwiftUICore.SecondaryTimestampStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SegmentedControlPickerStyle where Style : FioriSwiftUICore.SegmentedControlPickerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SegmentedControlPickerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A022SegmentedControlPickerE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SegmentedControlPickerStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SegmentedControlPickerStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SegmentedControlPickerStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore35SegmentedControlPickerStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SegmentedControlPickerStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SegmentedControlPickerStyle
  
  public func concat(_ style: some SegmentedControlPickerStyle) -> some FioriSwiftUICore.SegmentedControlPickerStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SideBarStyle where Style : FioriSwiftUICore.SideBarStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A07SideBarE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SideBarStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SideBarStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SideBarStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20SideBarStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SideBarStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SideBarStyle
  
  public func concat(_ style: some SideBarStyle) -> some FioriSwiftUICore.SideBarStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SideBarListItemStyle where Style : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A015SideBarListItemE0RzrlE8makeBodyyQrAA0fghI13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SideBarListItemStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SideBarListItemStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SideBarListItemStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28SideBarListItemStyleModifierV4body7contentQr0B2UI05_ViewI8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SideBarListItemStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SideBarListItemStyle
  
  public func concat(_ style: some SideBarListItemStyle) -> some FioriSwiftUICore.SideBarListItemStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.StatusStyle where Style : FioriSwiftUICore.StatusStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StatusConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A06StatusE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct StatusStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.StatusStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.StatusStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19StatusStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.StatusStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.StatusStyle
  
  public func concat(_ style: some StatusStyle) -> some FioriSwiftUICore.StatusStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.StepperFieldStyle where Style : FioriSwiftUICore.StepperFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A012StepperFieldE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct StepperFieldStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.StepperFieldStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.StepperFieldStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25StepperFieldStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.StepperFieldStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.StepperFieldStyle
  
  public func concat(_ style: some StepperFieldStyle) -> some FioriSwiftUICore.StepperFieldStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.StepperViewStyle where Style : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A011StepperViewE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct StepperViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.StepperViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.StepperViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24StepperViewStyleModifierV4body7contentQr0B2UI01_eG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.StepperViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.StepperViewStyle
  
  public func concat(_ style: some StepperViewStyle) -> some FioriSwiftUICore.StepperViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SubAttributeStyle where Style : FioriSwiftUICore.SubAttributeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubAttributeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A012SubAttributeE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SubAttributeStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SubAttributeStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SubAttributeStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25SubAttributeStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SubAttributeStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SubAttributeStyle
  
  public func concat(_ style: some SubAttributeStyle) -> some FioriSwiftUICore.SubAttributeStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SubstatusStyle where Style : FioriSwiftUICore.SubstatusStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubstatusConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A09SubstatusE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SubstatusStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SubstatusStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SubstatusStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22SubstatusStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SubstatusStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SubstatusStyle
  
  public func concat(_ style: some SubstatusStyle) -> some FioriSwiftUICore.SubstatusStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SubtitleStyle where Style : FioriSwiftUICore.SubtitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubtitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A08SubtitleE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SubtitleStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SubtitleStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SubtitleStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21SubtitleStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SubtitleStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SubtitleStyle
  
  public func concat(_ style: some SubtitleStyle) -> some FioriSwiftUICore.SubtitleStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.SwitchStyle where Style : FioriSwiftUICore.SwitchStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SwitchConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A06SwitchE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct SwitchStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.SwitchStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.SwitchStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19SwitchStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.SwitchStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.SwitchStyle
  
  public func concat(_ style: some SwitchStyle) -> some FioriSwiftUICore.SwitchStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TagsStyle where Style : FioriSwiftUICore.TagsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TagsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A04TagsE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TagsStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TagsStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TagsStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17TagsStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TagsStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TagsStyle
  
  public func concat(_ style: some TagsStyle) -> some FioriSwiftUICore.TagsStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TertiaryActionStyle where Style : FioriSwiftUICore.TertiaryActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TertiaryActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A014TertiaryActionE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TertiaryActionStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TertiaryActionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TertiaryActionStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27TertiaryActionStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TertiaryActionStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TertiaryActionStyle
  
  public func concat(_ style: some TertiaryActionStyle) -> some FioriSwiftUICore.TertiaryActionStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TextFieldFormViewStyle where Style : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A017TextFieldFormViewE0RzrlE8makeBodyyQrAA0fghI13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TextFieldFormViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TextFieldFormViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TextFieldFormViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30TextFieldFormViewStyleModifierV4body7contentQr0B2UI01_gI8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TextFieldFormViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TextFieldFormViewStyle
  
  public func concat(_ style: some TextFieldFormViewStyle) -> some FioriSwiftUICore.TextFieldFormViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TextInputFieldStyle where Style : FioriSwiftUICore.TextInputFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextInputFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A014TextInputFieldE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TextInputFieldStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TextInputFieldStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TextInputFieldStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27TextInputFieldStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TextInputFieldStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TextInputFieldStyle
  
  public func concat(_ style: some TextInputFieldStyle) -> some FioriSwiftUICore.TextInputFieldStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TextViewStyle where Style : FioriSwiftUICore.TextViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A08TextViewE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TextViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TextViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TextViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21TextViewStyleModifierV4body7contentQr0B2UI01_eG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TextViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TextViewStyle
  
  public func concat(_ style: some TextViewStyle) -> some FioriSwiftUICore.TextViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TimelineStyle where Style : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A08TimelineE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TimelineStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TimelineStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TimelineStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21TimelineStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TimelineStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TimelineStyle
  
  public func concat(_ style: some TimelineStyle) -> some FioriSwiftUICore.TimelineStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TimelineMarkerStyle where Style : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A014TimelineMarkerE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TimelineMarkerStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TimelineMarkerStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TimelineMarkerStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27TimelineMarkerStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TimelineMarkerStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TimelineMarkerStyle
  
  public func concat(_ style: some TimelineMarkerStyle) -> some FioriSwiftUICore.TimelineMarkerStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TimelineNodeStyle where Style : FioriSwiftUICore.TimelineNodeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNodeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A012TimelineNodeE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TimelineNodeStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TimelineNodeStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TimelineNodeStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25TimelineNodeStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TimelineNodeStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TimelineNodeStyle
  
  public func concat(_ style: some TimelineNodeStyle) -> some FioriSwiftUICore.TimelineNodeStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TimelineNowIndicatorStyle where Style : FioriSwiftUICore.TimelineNowIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNowIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A020TimelineNowIndicatorE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TimelineNowIndicatorStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TimelineNowIndicatorStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TimelineNowIndicatorStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore33TimelineNowIndicatorStyleModifierV4body7contentQr0B2UI05_ViewH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TimelineNowIndicatorStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TimelineNowIndicatorStyle
  
  public func concat(_ style: some TimelineNowIndicatorStyle) -> some FioriSwiftUICore.TimelineNowIndicatorStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TimestampStyle where Style : FioriSwiftUICore.TimestampStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimestampConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A09TimestampE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TimestampStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TimestampStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TimestampStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22TimestampStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TimestampStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TimestampStyle
  
  public func concat(_ style: some TimestampStyle) -> some FioriSwiftUICore.TimestampStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TitleStyle where Style : FioriSwiftUICore.TitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A05TitleE0RzrlE8makeBodyyQrAA0F13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TitleStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TitleStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TitleStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18TitleStyleModifierV4body7contentQr0B2UI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TitleStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TitleStyle
  
  public func concat(_ style: some TitleStyle) -> some FioriSwiftUICore.TitleStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TitleFormViewStyle where Style : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A013TitleFormViewE0RzrlE8makeBodyyQrAA0fgH13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TitleFormViewStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TitleFormViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TitleFormViewStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26TitleFormViewStyleModifierV4body7contentQr0B2UI01_fH8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TitleFormViewStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TitleFormViewStyle
  
  public func concat(_ style: some TitleFormViewStyle) -> some FioriSwiftUICore.TitleFormViewStyle
  
}
extension FioriSwiftUICore.ModifiedStyle : FioriSwiftUICore.TopDividerStyle where Style : FioriSwiftUICore.TopDividerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TopDividerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ModifiedStyleVA2A010TopDividerE0RzrlE8makeBodyyQrAA0fG13ConfigurationVF", 0) __<Style, Modifier>
}
public struct TopDividerStyleModifier<Style> : SwiftUI.ViewModifier where Style : FioriSwiftUICore.TopDividerStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: FioriSwiftUICore.TopDividerStyleModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23TopDividerStyleModifierV4body7contentQr0B2UI05_ViewG8_ContentVyACyxGG_tF", 0) __<Style>
}
extension FioriSwiftUICore.TopDividerStyle {
  public func modifier(_ modifier: some ViewModifier) -> some FioriSwiftUICore.TopDividerStyle
  
  public func concat(_ style: some TopDividerStyle) -> some FioriSwiftUICore.TopDividerStyle
  
}
public struct MoreActionOverflow {
  public init(@SwiftUI.ViewBuilder moreActionOverflow: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.MoreActionOverflow {
  public init(_ configuration: FioriSwiftUICore.MoreActionOverflowConfiguration)
}
extension FioriSwiftUICore.MoreActionOverflow : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18MoreActionOverflowV4bodyQrvp", 0) __
}
public struct MoreActionOverflowBaseStyle : FioriSwiftUICore.MoreActionOverflowStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MoreActionOverflowConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27MoreActionOverflowBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct MoreActionOverflowFioriStyle : FioriSwiftUICore.MoreActionOverflowStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.MoreActionOverflowConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore018MoreActionOverflowA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol MoreActionOverflowStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.MoreActionOverflowConfiguration) -> Self.Body
}
public struct MoreActionOverflowConfiguration {
  public let moreActionOverflow: FioriSwiftUICore.MoreActionOverflowConfiguration.MoreActionOverflow
  public typealias MoreActionOverflow = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct NoteFormView {
  public init(text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() }, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, minTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil)
}
extension FioriSwiftUICore.NoteFormView {
  public init(text: SwiftUI.Binding<Swift.String>, placeholder: Foundation.AttributedString? = nil, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, minTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextEditorHeight: CoreFoundation.CGFloat? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil)
}
extension FioriSwiftUICore.NoteFormView {
  public init(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration)
}
extension FioriSwiftUICore.NoteFormView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12NoteFormViewV4bodyQrvp", 0) __
}
public struct NoteFormViewBaseStyle : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21NoteFormViewBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol NoteFormViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> Self.Body
}
public struct NoteFormViewConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let placeholder: FioriSwiftUICore.NoteFormViewConfiguration.Placeholder
  public let controlState: FioriSwiftUICore.ControlState
  public let errorMessage: Foundation.AttributedString?
  public let minTextEditorHeight: CoreFoundation.CGFloat?
  public let maxTextEditorHeight: CoreFoundation.CGFloat?
  public let maxTextLength: Swift.Int?
  public let hintText: Foundation.AttributedString?
  public let hidesReadOnlyHint: Swift.Bool
  public let isCharCountEnabled: Swift.Bool
  public let allowsBeyondLimit: Swift.Bool
  public let charCountReachLimitMessage: Swift.String?
  public let charCountBeyondLimitMsg: Swift.String?
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct NoteFormViewFioriStyle : FioriSwiftUICore.NoteFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NoteFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012NoteFormViewA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct NowIndicatorNode {
  public init(@SwiftUI.ViewBuilder nowIndicatorNode: () -> any SwiftUI.View = { Image(systemName: "circle.fill") })
}
extension FioriSwiftUICore.NowIndicatorNode {
  public init(_ configuration: FioriSwiftUICore.NowIndicatorNodeConfiguration)
}
extension FioriSwiftUICore.NowIndicatorNode : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16NowIndicatorNodeV4bodyQrvp", 0) __
}
public struct NowIndicatorNodeBaseStyle : FioriSwiftUICore.NowIndicatorNodeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NowIndicatorNodeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25NowIndicatorNodeBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct NowIndicatorNodeFioriStyle : FioriSwiftUICore.NowIndicatorNodeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.NowIndicatorNodeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore016NowIndicatorNodeA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol NowIndicatorNodeStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.NowIndicatorNodeConfiguration) -> Self.Body
}
public struct NowIndicatorNodeConfiguration {
  public let nowIndicatorNode: FioriSwiftUICore.NowIndicatorNodeConfiguration.NowIndicatorNode
  public typealias NowIndicatorNode = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct ObjectHeader<Title, Subtitle, Tags, BodyText, Footnote, DescriptionText, Status, Substatus, DetailImage, DetailContent> where Title : SwiftUI.View, Subtitle : SwiftUI.View, Tags : SwiftUI.View, BodyText : SwiftUI.View, Footnote : SwiftUI.View, DescriptionText : SwiftUI.View, Status : SwiftUI.View, Substatus : SwiftUI.View, DetailImage : SwiftUI.View, DetailContent : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Title == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Tags == SwiftUI._ConditionalContent<FioriSwiftUICore.TagStack, SwiftUI.EmptyView>, BodyText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Status == SwiftUI._ConditionalContent<FioriSwiftUICore.TextOrIconView, SwiftUI.EmptyView>, Substatus == SwiftUI._ConditionalContent<FioriSwiftUICore.TextOrIconView, SwiftUI.EmptyView>, DetailImage == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.ObjectHeaderModel, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
  public init(title: Swift.String, subtitle: Swift.String? = nil, tags: [Swift.String]? = nil, bodyText: Swift.String? = nil, footnote: Swift.String? = nil, descriptionText: Swift.String? = nil, status: FioriSwiftUICore.TextOrIcon? = nil, substatus: FioriSwiftUICore.TextOrIcon? = nil, detailImage: SwiftUI.Image? = nil, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder bodyText: () -> BodyText)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder bodyText: () -> BodyText)
}
extension FioriSwiftUICore.ObjectHeader where BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailContent: () -> DetailContent)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyText: () -> BodyText)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore.ObjectHeader where Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.ObjectHeader where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, BodyText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, DetailContent == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.ObjectHeader where Title == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Tags == SwiftUI._ConditionalContent<FioriSwiftUICore.TagStack, SwiftUI.EmptyView>, BodyText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Status == SwiftUI._ConditionalContent<FioriSwiftUICore.TextOrIconView, SwiftUI.EmptyView>, Substatus == SwiftUI._ConditionalContent<FioriSwiftUICore.TextOrIconView, SwiftUI.EmptyView>, DetailImage == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, DetailContent == FioriSwiftUICore.HeaderChart<SwiftUI.Text, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI.AnyView> {
  public init(title: Swift.String, subtitle: Swift.String? = nil, tags: [Swift.String]? = nil, bodyText: Swift.String? = nil, footnote: Swift.String? = nil, descriptionText: Swift.String? = nil, status: FioriSwiftUICore.TextOrIcon? = nil, substatus: FioriSwiftUICore.TextOrIcon? = nil, detailImage: SwiftUI.Image? = nil, headerChart: FioriSwiftUICore.HeaderChart<SwiftUI.Text, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI.AnyView>)
}
extension FioriSwiftUICore.ObjectHeader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12ObjectHeaderV4bodyQrvp", 0) __<Title, Subtitle, Tags, BodyText, Footnote, DescriptionText, Status, Substatus, DetailImage, DetailContent>
}
public struct ObjectItem {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder footnote: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder status: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder substatus: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.IconBuilder icons: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.AvatarsBuilder avatars: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.TagBuilder tags: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder action: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.ObjectItem {
  public init(title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, footnote: Foundation.AttributedString? = nil, description: Foundation.AttributedString? = nil, status: FioriSwiftUICore.TextOrIcon? = nil, substatus: FioriSwiftUICore.TextOrIcon? = nil, detailImage: SwiftUI.Image? = nil, icons: [FioriSwiftUICore.TextOrIcon] = [], avatars: [FioriSwiftUICore.TextOrIcon] = [], footnoteIcons: [FioriSwiftUICore.TextOrIcon] = [], tags: [Foundation.AttributedString] = [], action: FioriSwiftUICore.FioriButton? = nil)
}
extension FioriSwiftUICore.ObjectItem {
  public init(_ configuration: FioriSwiftUICore.ObjectItemConfiguration)
}
extension FioriSwiftUICore.ObjectItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10ObjectItemV4bodyQrvp", 0) __
}
public struct ObjectItemBaseStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19ObjectItemBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct ObjectItemCardStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19ObjectItemCardStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.ObjectItemStyle where Self == FioriSwiftUICore.ObjectItemCardStyle {
  public static var card: FioriSwiftUICore.ObjectItemCardStyle {
    get
  }
}
public struct ObjectItemBorderedAction : FioriSwiftUICore.ActionStyle {
  public init()
  public func makeBody(_ configuration: FioriSwiftUICore.ActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24ObjectItemBorderedActionV8makeBodyyQrAA0G13ConfigurationVF", 0) __
}

public protocol ObjectItemStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> Self.Body
}
public struct ObjectItemConfiguration {
  public let title: FioriSwiftUICore.ObjectItemConfiguration.Title
  public let subtitle: FioriSwiftUICore.ObjectItemConfiguration.Subtitle
  public let footnote: FioriSwiftUICore.ObjectItemConfiguration.Footnote
  public let description: FioriSwiftUICore.ObjectItemConfiguration.Description
  public let status: FioriSwiftUICore.ObjectItemConfiguration.Status
  public let substatus: FioriSwiftUICore.ObjectItemConfiguration.Substatus
  public let detailImage: FioriSwiftUICore.ObjectItemConfiguration.DetailImage
  public let icons: FioriSwiftUICore.ObjectItemConfiguration.Icons
  public let avatars: FioriSwiftUICore.ObjectItemConfiguration.Avatars
  public let footnoteIcons: FioriSwiftUICore.ObjectItemConfiguration.FootnoteIcons
  public let tags: FioriSwiftUICore.ObjectItemConfiguration.Tags
  public let action: FioriSwiftUICore.ObjectItemConfiguration.Action
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Footnote = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Status = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Substatus = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icons = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Avatars = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias FootnoteIcons = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Tags = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Action = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct ObjectItemFioriStyle : FioriSwiftUICore.ObjectItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ObjectItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010ObjectItemA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct OptionListPickerItem {
  public init(model: any FioriSwiftUICore.OptionListPickerItemModel)
  public init(value: SwiftUI.Binding<[Swift.Int]>, valueOptions: [Swift.String] = [], hint: Swift.String? = nil, onTap: ((_ index: Swift.Int) -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.OptionListPickerItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20OptionListPickerItemV4bodyQrvp", 0) __
}

extension FioriSwiftUICore.OptionListPickerItemModel {
  public var onTap: ((_ index: Swift.Int) -> Swift.Void)? {
    get
  }
}
extension Swift.Optional : FioriSwiftUICore._ViewEmptyChecking where Wrapped : SwiftUI.View {
  public var isEmpty: Swift.Bool {
    get
  }
}


public struct Options {
  public init(options: [Foundation.AttributedString] = [])
}
extension FioriSwiftUICore.Options {
  public init(_ configuration: FioriSwiftUICore.OptionsConfiguration)
}
extension FioriSwiftUICore.Options : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7OptionsV4bodyQrvp", 0) __
}
public struct OptionsBaseStyle : FioriSwiftUICore.OptionsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.OptionsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16OptionsBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct OptionsFioriStyle : FioriSwiftUICore.OptionsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.OptionsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore07OptionsA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol OptionsStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.OptionsConfiguration) -> Self.Body
}
public struct OptionsConfiguration {
  public let options: [Foundation.AttributedString]
}
public struct OverflowAction {
  public init(@SwiftUI.ViewBuilder overflowAction: () -> any SwiftUI.View = { FioriButton { _ in Image(systemName: "ellipsis") } })
}
extension FioriSwiftUICore.OverflowAction {
  public init(overflowAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in Image(systemName: "ellipsis") })
}
extension FioriSwiftUICore.OverflowAction {
  public init(_ configuration: FioriSwiftUICore.OverflowActionConfiguration)
}
extension FioriSwiftUICore.OverflowAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14OverflowActionV4bodyQrvp", 0) __
}
public struct OverflowActionBaseStyle : FioriSwiftUICore.OverflowActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.OverflowActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23OverflowActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct OverflowActionFioriStyle : FioriSwiftUICore.OverflowActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.OverflowActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014OverflowActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol OverflowActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.OverflowActionConfiguration) -> Self.Body
}
public struct OverflowActionConfiguration {
  public let overflowAction: FioriSwiftUICore.OverflowActionConfiguration.OverflowAction
  public typealias OverflowAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct PageIndicator : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13PageIndicatorV4bodyQrvp", 0) __
}
public struct Placeholder {
  public init(@SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Placeholder {
  public init(placeholder: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Placeholder {
  public init(_ configuration: FioriSwiftUICore.PlaceholderConfiguration)
}
extension FioriSwiftUICore.Placeholder : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11PlaceholderV4bodyQrvp", 0) __
}
public struct PlaceholderBaseStyle : FioriSwiftUICore.PlaceholderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20PlaceholderBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct PlaceholderFioriStyle : FioriSwiftUICore.PlaceholderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore011PlaceholderA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol PlaceholderStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.PlaceholderConfiguration) -> Self.Body
}
public struct PlaceholderConfiguration {
  public let placeholder: FioriSwiftUICore.PlaceholderConfiguration.Placeholder
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct PlaceholderTextEditor {
  public init(text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.PlaceholderTextEditor {
  public init(text: SwiftUI.Binding<Swift.String>, placeholder: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.PlaceholderTextEditor {
  public init(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration)
}
extension FioriSwiftUICore.PlaceholderTextEditor : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21PlaceholderTextEditorV4bodyQrvp", 0) __
}
public struct PlaceholderTextEditorBaseStyle : FioriSwiftUICore.PlaceholderTextEditorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30PlaceholderTextEditorBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol PlaceholderTextEditorStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> Self.Body
}
public struct PlaceholderTextEditorConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let placeholder: FioriSwiftUICore.PlaceholderTextEditorConfiguration.Placeholder
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct PlaceholderTextEditorFioriStyle : FioriSwiftUICore.PlaceholderTextEditorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021PlaceholderTextEditorA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct PlaceholderTextField {
  public init(text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.PlaceholderTextField {
  public init(text: SwiftUI.Binding<Swift.String>, placeholder: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.PlaceholderTextField {
  public init(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration)
}
extension FioriSwiftUICore.PlaceholderTextField : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20PlaceholderTextFieldV4bodyQrvp", 0) __
}
public struct PlaceholderTextFieldBaseStyle : FioriSwiftUICore.PlaceholderTextFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29PlaceholderTextFieldBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol PlaceholderTextFieldStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> Self.Body
}
public struct PlaceholderTextFieldConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let placeholder: FioriSwiftUICore.PlaceholderTextFieldConfiguration.Placeholder
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct PlaceholderTextFieldFioriStyle : FioriSwiftUICore.PlaceholderTextFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020PlaceholderTextFieldA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct ItemCountPreferenceKey : SwiftUI.PreferenceKey {
  public static var defaultValue: Swift.Int
  public static func reduce(value: inout Swift.Int, nextValue: () -> Swift.Int)
  public typealias Value = Swift.Int
}
public struct ProfileHeader {
  public init(@SwiftUI.ViewBuilder detailImage: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() }, animatable: Swift.Bool = false, @SwiftUI.ViewBuilder detailContent: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.ProfileHeader {
  public init(detailImage: SwiftUI.Image? = nil, title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, description: Foundation.AttributedString? = nil, animatable: Swift.Bool = false, @SwiftUI.ViewBuilder detailContent: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.ProfileHeader {
  public init(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration)
}
extension FioriSwiftUICore.ProfileHeader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13ProfileHeaderV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct ProfileHeaderBaseStyle : FioriSwiftUICore.ProfileHeaderStyle {
  @_Concurrency.MainActor(unsafe) public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22ProfileHeaderBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol ProfileHeaderStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> Self.Body
}
public struct ProfileHeaderConfiguration {
  public let detailImage: FioriSwiftUICore.ProfileHeaderConfiguration.DetailImage
  public let title: FioriSwiftUICore.ProfileHeaderConfiguration.Title
  public let subtitle: FioriSwiftUICore.ProfileHeaderConfiguration.Subtitle
  public let description: FioriSwiftUICore.ProfileHeaderConfiguration.Description
  public let animatable: Swift.Bool
  public let detailContent: FioriSwiftUICore.ProfileHeaderConfiguration.DetailContent
  public typealias DetailImage = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias DetailContent = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct ProfileHeaderFioriStyle : FioriSwiftUICore.ProfileHeaderStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.ProfileHeaderConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013ProfileHeaderA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct ProgressIndicator {
  public init(model: any FioriSwiftUICore.ProgressIndicatorModel)
  public init(progressIndicatorText: Swift.String? = nil)
}
extension FioriSwiftUICore.ProgressIndicator : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17ProgressIndicatorV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.RatingControl {
  public enum Style {
    case editable
    case editableDisabled
    case standard
    case accented
    public static func == (a: FioriSwiftUICore.RatingControl.Style, b: FioriSwiftUICore.RatingControl.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct RatingControl {
  public init(rating: SwiftUI.Binding<Swift.Int>, ratingControlStyle: FioriSwiftUICore.RatingControl.Style = .editable, ratingBounds: Swift.ClosedRange<Swift.Int> = 0 ... 5, onImage: SwiftUI.Image? = nil, offImage: SwiftUI.Image? = nil, itemSize: CoreFoundation.CGSize? = nil, onColor: SwiftUI.Color? = nil, offColor: SwiftUI.Color? = nil, interItemSpacing: CoreFoundation.CGFloat? = nil)
}
extension FioriSwiftUICore.RatingControl {
  public init(_ configuration: FioriSwiftUICore.RatingControlConfiguration)
}
extension FioriSwiftUICore.RatingControl : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13RatingControlV4bodyQrvp", 0) __
}
public struct RatingControlFormView {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View, rating: SwiftUI.Binding<Swift.Int>, ratingControlStyle: FioriSwiftUICore.RatingControl.Style = .editable, ratingBounds: Swift.ClosedRange<Swift.Int> = 0 ... 5, onImage: SwiftUI.Image? = nil, offImage: SwiftUI.Image? = nil, itemSize: CoreFoundation.CGSize? = nil, onColor: SwiftUI.Color? = nil, offColor: SwiftUI.Color? = nil, interItemSpacing: CoreFoundation.CGFloat? = nil, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, axis: SwiftUI.Axis = .horizontal)
}
extension FioriSwiftUICore.RatingControlFormView {
  public init(title: Foundation.AttributedString, rating: SwiftUI.Binding<Swift.Int>, ratingControlStyle: FioriSwiftUICore.RatingControl.Style = .editable, ratingBounds: Swift.ClosedRange<Swift.Int> = 0 ... 5, onImage: SwiftUI.Image? = nil, offImage: SwiftUI.Image? = nil, itemSize: CoreFoundation.CGSize? = nil, onColor: SwiftUI.Color? = nil, offColor: SwiftUI.Color? = nil, interItemSpacing: CoreFoundation.CGFloat? = nil, subtitle: Foundation.AttributedString? = nil, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, axis: SwiftUI.Axis = .horizontal)
}
extension FioriSwiftUICore.RatingControlFormView {
  public init(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration)
}
extension FioriSwiftUICore.RatingControlFormView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21RatingControlFormViewV4bodyQrvp", 0) __
}
public struct RatingControlFormViewBaseStyle : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore30RatingControlFormViewBaseStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public protocol RatingControlFormViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> Self.Body
}
public struct RatingControlFormViewConfiguration {
  public let title: FioriSwiftUICore.RatingControlFormViewConfiguration.Title
  @SwiftUI.Binding @_projectedValueProperty($rating) public var rating: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $rating: SwiftUI.Binding<Swift.Int> {
    get
  }
  public let ratingControlStyle: FioriSwiftUICore.RatingControl.Style
  public let ratingBounds: Swift.ClosedRange<Swift.Int>
  public let onImage: SwiftUI.Image?
  public let offImage: SwiftUI.Image?
  public let itemSize: CoreFoundation.CGSize?
  public let onColor: SwiftUI.Color?
  public let offColor: SwiftUI.Color?
  public let interItemSpacing: CoreFoundation.CGFloat?
  public let subtitle: FioriSwiftUICore.RatingControlFormViewConfiguration.Subtitle
  public let controlState: FioriSwiftUICore.ControlState
  public let errorMessage: Foundation.AttributedString?
  public let axis: SwiftUI.Axis
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct RatingControlFormViewFioriStyle : FioriSwiftUICore.RatingControlFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore021RatingControlFormViewA5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public struct RatingControlBaseStyle : FioriSwiftUICore.RatingControlStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22RatingControlBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol RatingControlStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.RatingControlConfiguration) -> Self.Body
}
public struct RatingControlConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($rating) public var rating: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $rating: SwiftUI.Binding<Swift.Int> {
    get
  }
  public let ratingControlStyle: FioriSwiftUICore.RatingControl.Style
  public let ratingBounds: Swift.ClosedRange<Swift.Int>
  public let onImage: SwiftUI.Image?
  public let offImage: SwiftUI.Image?
  public let itemSize: CoreFoundation.CGSize?
  public let onColor: SwiftUI.Color?
  public let offColor: SwiftUI.Color?
  public let interItemSpacing: CoreFoundation.CGFloat?
}
public struct RatingControlFioriStyle : FioriSwiftUICore.RatingControlStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.RatingControlConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013RatingControlA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct Row1 {
  public init(@SwiftUI.ViewBuilder row1: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Row1 {
  public init(_ configuration: FioriSwiftUICore.Row1Configuration)
}
extension FioriSwiftUICore.Row1 : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4Row1V4bodyQrvp", 0) __
}
public struct Row1BaseStyle : FioriSwiftUICore.Row1Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row1Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13Row1BaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct Row1FioriStyle : FioriSwiftUICore.Row1Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row1Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04Row1A5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol Row1Style : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.Row1Configuration) -> Self.Body
}
public struct Row1Configuration {
  public let row1: FioriSwiftUICore.Row1Configuration.Row1
  public typealias Row1 = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Row2 {
  public init(@SwiftUI.ViewBuilder row2: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Row2 {
  public init(_ configuration: FioriSwiftUICore.Row2Configuration)
}
extension FioriSwiftUICore.Row2 : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4Row2V4bodyQrvp", 0) __
}
public struct Row2BaseStyle : FioriSwiftUICore.Row2Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row2Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13Row2BaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct Row2FioriStyle : FioriSwiftUICore.Row2Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row2Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04Row2A5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol Row2Style : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.Row2Configuration) -> Self.Body
}
public struct Row2Configuration {
  public let row2: FioriSwiftUICore.Row2Configuration.Row2
  public typealias Row2 = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Row3 {
  public init(@SwiftUI.ViewBuilder row3: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Row3 {
  public init(_ configuration: FioriSwiftUICore.Row3Configuration)
}
extension FioriSwiftUICore.Row3 : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4Row3V4bodyQrvp", 0) __
}
public struct Row3BaseStyle : FioriSwiftUICore.Row3Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row3Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13Row3BaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct Row3FioriStyle : FioriSwiftUICore.Row3Style {
  public func makeBody(_ configuration: FioriSwiftUICore.Row3Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04Row3A5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol Row3Style : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.Row3Configuration) -> Self.Body
}
public struct Row3Configuration {
  public let row3: FioriSwiftUICore.Row3Configuration.Row3
  public typealias Row3 = FioriSwiftUICore.ConfigurationViewWrapper
}
public enum RowAlignment {
  case baseline
  case top
  public static func == (a: FioriSwiftUICore.RowAlignment, b: FioriSwiftUICore.RowAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ScribbleView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12ScribbleViewV4bodyQrvp", 0) __
}
@available(iOS 15.0, macOS 12.0, *)
public struct SearchableListView<CancelActionView, DoneActionView> where CancelActionView : SwiftUI.View, DoneActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder doneAction: () -> DoneActionView)
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListView where CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, DoneActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.SearchableListViewModel)
  public init(cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()), doneAction: FioriSwiftUICore._Action? = _Action(model: _DoneActionDefault()))
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListView where CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder doneAction: () -> DoneActionView)
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListView where DoneActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView)
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListView where CancelActionView == FioriSwiftUICore._Action, DoneActionView == FioriSwiftUICore._Action {
  public init()
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18SearchableListViewV4bodyQrvp", 0) __<CancelActionView, DoneActionView>
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListView where CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, DoneActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init<Data, ID>(data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, allowsMultipleSelection: Swift.Bool = false, searchFilter: ((Data.Element, Swift.String) -> Swift.Bool)?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View, rowBackground: ((Data.Element) -> some View)? = nil) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable
  public init(data: [Swift.String], selection: SwiftUI.Binding<Swift.Set<Swift.String>>?, allowsMultipleSelection: Swift.Bool = false, searchFilter: ((Swift.String, Swift.String) -> Swift.Bool)? = nil)
  public init(data: [Swift.String], selection: SwiftUI.Binding<Swift.Set<Swift.String>>?, allowsMultipleSelection: Swift.Bool = false, searchFilter: ((Swift.String, Swift.String) -> Swift.Bool)?, rowBackground: ((Swift.String) -> some View)? = nil)
  public init<Data, ID>(data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, allowsMultipleSelection: Swift.Bool = false, searchFilter: ((Data.Element, Swift.String) -> Swift.Bool)?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable
  public init<Data, ID>(data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, allowsMultipleSelection: Swift.Bool = false, searchFilter: ((Data.Element, Swift.String) -> Swift.Bool)?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View, rowBackground: ((Data.Element) -> some View)? = nil, cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()), doneAction: FioriSwiftUICore._Action? = _Action(model: _DoneActionDefault())) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable
  public init<Data, ID>(data: Data, id: Swift.KeyPath<Data.Element, ID>, children: Swift.KeyPath<Data.Element, Data?>?, selection: SwiftUI.Binding<Swift.Set<ID>>?, isTopLevel: Swift.Bool, allowsMultipleSelection: Swift.Bool = false, searchFilter: ((Data.Element, Swift.String) -> Swift.Bool)?, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> some View, rowBackground: ((Data.Element) -> some View)? = nil) where Data : Swift.RandomAccessCollection, ID : Swift.Hashable
}
extension SwiftUI.EnvironmentValues {
  public var listBackground: SwiftUI.Color {
    get
    set
  }
}
extension SwiftUI.View {
  public func listBackground(_ color: SwiftUI.Color) -> some SwiftUI.View
  
}
@available(iOS 15.0, macOS 12.0, *)
extension FioriSwiftUICore.SearchableListViewModel {
  public var cancelAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var doneAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
}
public struct SecondaryAction {
  public init(@SwiftUI.ViewBuilder secondaryAction: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.SecondaryAction {
  public init(secondaryAction: FioriSwiftUICore.FioriButton? = nil)
}
extension FioriSwiftUICore.SecondaryAction {
  public init(_ configuration: FioriSwiftUICore.SecondaryActionConfiguration)
}
extension FioriSwiftUICore.SecondaryAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15SecondaryActionV4bodyQrvp", 0) __
}
public struct SecondaryActionBaseStyle : FioriSwiftUICore.SecondaryActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SecondaryActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24SecondaryActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct SecondaryActionFioriStyle : FioriSwiftUICore.SecondaryActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SecondaryActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore015SecondaryActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol SecondaryActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SecondaryActionConfiguration) -> Self.Body
}
public struct SecondaryActionConfiguration {
  public let secondaryAction: FioriSwiftUICore.SecondaryActionConfiguration.SecondaryAction
  public typealias SecondaryAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct SecondaryTimestamp {
  public init(@SwiftUI.ViewBuilder secondaryTimestamp: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.SecondaryTimestamp {
  public init(secondaryTimestamp: FioriSwiftUICore.TextOrIcon? = nil)
}
extension FioriSwiftUICore.SecondaryTimestamp {
  public init(_ configuration: FioriSwiftUICore.SecondaryTimestampConfiguration)
}
extension FioriSwiftUICore.SecondaryTimestamp : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18SecondaryTimestampV4bodyQrvp", 0) __
}
public struct SecondaryTimestampBaseStyle : FioriSwiftUICore.SecondaryTimestampStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SecondaryTimestampConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27SecondaryTimestampBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct SecondaryTimestampFioriStyle : FioriSwiftUICore.SecondaryTimestampStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SecondaryTimestampConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore018SecondaryTimestampA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol SecondaryTimestampStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SecondaryTimestampConfiguration) -> Self.Body
}
public struct SecondaryTimestampConfiguration {
  public let secondaryTimestamp: FioriSwiftUICore.SecondaryTimestampConfiguration.SecondaryTimestamp
  public typealias SecondaryTimestamp = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct SectionHeader<Title, Attribute> where Title : SwiftUI.View, Attribute : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder attribute: () -> Attribute)
}
extension FioriSwiftUICore.SectionHeader where Title == SwiftUI.Text, Attribute == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.SectionHeaderModel)
  public init(title: Swift.String, attribute: Swift.String? = nil)
}
extension FioriSwiftUICore.SectionHeader where Attribute == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.SectionHeader : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13SectionHeaderV4bodyQrvp", 0) __<Title, Attribute>
}
public struct SegmentAttributes {
  public var textColor: SwiftUI.Color?
  public var font: SwiftUI.Font?
  public var borderWidth: CoreFoundation.CGFloat?
  public var borderColor: SwiftUI.Color?
  public var backgroundColor: SwiftUI.Color?
  public init(textColor: SwiftUI.Color? = nil, font: SwiftUI.Font? = nil, borderWidth: CoreFoundation.CGFloat? = nil, borderColor: SwiftUI.Color? = nil, backgroundColor: SwiftUI.Color? = nil)
}
@frozen public enum SegmentWidthMode : Swift.Equatable {
  case fixed(CoreFoundation.CGFloat)
  case intrinsic
  case maximum
  case equal
  public static func == (a: FioriSwiftUICore.SegmentWidthMode, b: FioriSwiftUICore.SegmentWidthMode) -> Swift.Bool
}
public struct SegmentedControlPicker {
  public init(options: [Foundation.AttributedString] = [], selectedIndex: SwiftUI.Binding<Swift.Int>)
}
extension FioriSwiftUICore.SegmentedControlPicker {
  public init(_ configuration: FioriSwiftUICore.SegmentedControlPickerConfiguration)
}
extension FioriSwiftUICore.SegmentedControlPicker : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22SegmentedControlPickerV4bodyQrvp", 0) __
}
public struct SegmentedControlPickerBaseStyle : FioriSwiftUICore.SegmentedControlPickerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SegmentedControlPickerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore31SegmentedControlPickerBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol SegmentedControlPickerStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SegmentedControlPickerConfiguration) -> Self.Body
}
public struct SegmentedControlPickerConfiguration {
  public let options: [Foundation.AttributedString]
  @SwiftUI.Binding @_projectedValueProperty($selectedIndex) public var selectedIndex: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $selectedIndex: SwiftUI.Binding<Swift.Int> {
    get
  }
}
public struct SegmentedControlPickerFioriStyle : FioriSwiftUICore.SegmentedControlPickerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SegmentedControlPickerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore022SegmentedControlPickerA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct SideBar {
  public init(isEditing: SwiftUI.Binding<Swift.Bool>, queryString: SwiftUI.Binding<Swift.String?>, data: SwiftUI.Binding<[FioriSwiftUICore.SideBarItemModel]>, selection: SwiftUI.Binding<FioriSwiftUICore.SideBarItemModel?>, title: Foundation.AttributedString? = nil, @SwiftUI.ViewBuilder footer: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder editButton: () -> any SwiftUI.View = { EmptyView() }, destination: @escaping (FioriSwiftUICore.SideBarItemModel) -> any SwiftUI.View, item: @escaping (SwiftUI.Binding<FioriSwiftUICore.SideBarItemModel>) -> any SwiftUI.View, onDataChange: (([FioriSwiftUICore.SideBarItemModel]) -> Swift.Void)? = nil, isUsedInSplitView: Swift.Bool = true)
}
extension FioriSwiftUICore.SideBar {
  public init(_ configuration: FioriSwiftUICore.SideBarConfiguration)
}
extension FioriSwiftUICore.SideBar : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7SideBarV4bodyQrvp", 0) __
}
public struct SideBarListItem {
  public init(@SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder filledIcon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder accessoryIcon: () -> any SwiftUI.View = { EmptyView() }, isOn: SwiftUI.Binding<Swift.Bool>, data: FioriSwiftUICore.SideBarItemModel, isSelected: SwiftUI.Binding<Swift.Bool>)
}
extension FioriSwiftUICore.SideBarListItem {
  public init(icon: SwiftUI.Image? = nil, filledIcon: SwiftUI.Image? = nil, title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, accessoryIcon: SwiftUI.Image? = nil, isOn: SwiftUI.Binding<Swift.Bool>, data: FioriSwiftUICore.SideBarItemModel, isSelected: SwiftUI.Binding<Swift.Bool>)
}
extension FioriSwiftUICore.SideBarListItem {
  public init(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration)
}
extension FioriSwiftUICore.SideBarListItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15SideBarListItemV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct SideBarListItemBaseStyle : FioriSwiftUICore.SideBarListItemStyle {
  @_Concurrency.MainActor(unsafe) public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore24SideBarListItemBaseStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public protocol SideBarListItemStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> Self.Body
}
public struct SideBarListItemConfiguration {
  public let icon: FioriSwiftUICore.SideBarListItemConfiguration.Icon
  public let filledIcon: FioriSwiftUICore.SideBarListItemConfiguration.FilledIcon
  public let title: FioriSwiftUICore.SideBarListItemConfiguration.Title
  public let subtitle: FioriSwiftUICore.SideBarListItemConfiguration.Subtitle
  public let accessoryIcon: FioriSwiftUICore.SideBarListItemConfiguration.AccessoryIcon
  @SwiftUI.Binding @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isOn: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public let data: FioriSwiftUICore.SideBarItemModel
  @SwiftUI.Binding @_projectedValueProperty($isSelected) public var isSelected: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isSelected: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias FilledIcon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias AccessoryIcon = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct SideBarListItemFioriStyle : FioriSwiftUICore.SideBarListItemStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarListItemConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore015SideBarListItemA5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
@_Concurrency.MainActor(unsafe) public struct SideBarBaseStyle : FioriSwiftUICore.SideBarStyle {
  @_Concurrency.MainActor(unsafe) public func makeBody(_ configuration: FioriSwiftUICore.SideBarConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16SideBarBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct SideBarItemModel : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: Foundation.UUID
  public var title: Swift.String
  public var icon: SwiftUI.Image?
  public var filledIcon: SwiftUI.Image?
  public var subtitle: Swift.String?
  public var accessoryIcon: SwiftUI.Image?
  public var isInvisible: Swift.Bool
  public var children: [FioriSwiftUICore.SideBarItemModel]? {
    get
    set
  }
  public var isSection: Swift.Bool
  public init(title: Swift.String, icon: SwiftUI.Image? = nil, filledIcon: SwiftUI.Image? = nil, subtitle: Swift.String? = nil, accessoryIcon: SwiftUI.Image? = nil, children: [FioriSwiftUICore.SideBarItemModel]? = nil, isSection: Swift.Bool = false, isInvisible: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: FioriSwiftUICore.SideBarItemModel, rhs: FioriSwiftUICore.SideBarItemModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SideBarStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SideBarConfiguration) -> Self.Body
}
public struct SideBarConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($isEditing) public var isEditing: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isEditing: SwiftUI.Binding<Swift.Bool> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($queryString) public var queryString: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $queryString: SwiftUI.Binding<Swift.String?> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($data) public var data: [FioriSwiftUICore.SideBarItemModel] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $data: SwiftUI.Binding<[FioriSwiftUICore.SideBarItemModel]> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($selection) public var selection: FioriSwiftUICore.SideBarItemModel? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $selection: SwiftUI.Binding<FioriSwiftUICore.SideBarItemModel?> {
    get
  }
  public let title: Foundation.AttributedString?
  public let footer: FioriSwiftUICore.SideBarConfiguration.Footer
  public let editButton: FioriSwiftUICore.SideBarConfiguration.EditButton
  public let destination: (FioriSwiftUICore.SideBarItemModel) -> any SwiftUI.View
  public let item: (SwiftUI.Binding<FioriSwiftUICore.SideBarItemModel>) -> any SwiftUI.View
  public let onDataChange: (([FioriSwiftUICore.SideBarItemModel]) -> Swift.Void)?
  public let isUsedInSplitView: Swift.Bool
  public typealias Footer = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias EditButton = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct SideBarFioriStyle : FioriSwiftUICore.SideBarStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SideBarConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore07SideBarA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView> where StartActionView : SwiftUI.View, RestartActionView : SwiftUI.View, CancelActionView : SwiftUI.View, ClearActionView : SwiftUI.View, SaveActionView : SwiftUI.View {
  public var _heightDidChangePublisher: Combine.CurrentValueSubject<CoreFoundation.CGFloat, Swift.Never> {
    get
  }
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, RestartActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, ClearActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, SaveActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.SignatureCaptureViewModel)
  public init(title: Swift.String? = nil, startAction: FioriSwiftUICore._Action? = _Action(model: _TapToSignActionDefault()), restartAction: FioriSwiftUICore._Action? = _Action(model: _ReEnterSignatureActionDefault()), cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()), clearAction: FioriSwiftUICore._Action? = _Action(model: _ClearActionDefault()), saveAction: FioriSwiftUICore._Action? = _Action(model: _SaveActionDefault()), signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where CancelActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where CancelActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder saveAction: () -> SaveActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder clearAction: () -> ClearActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder restartAction: () -> RestartActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, @SwiftUI.ViewBuilder startAction: () -> StartActionView, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView where StartActionView == FioriSwiftUICore._Action, RestartActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, ClearActionView == FioriSwiftUICore._Action, SaveActionView == FioriSwiftUICore._Action {
  public init(title: Swift.String? = nil, signatureImage: UIKit.UIImage? = nil, onSave: ((UIKit.UIImage) -> Swift.Void)? = nil, onDelete: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SignatureCaptureView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20SignatureCaptureViewV4bodyQrvp", 0) __<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
}
extension FioriSwiftUICore.SignatureCaptureView {
  public func titleFont(_ font: SwiftUI.Font?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func titleColor(_ color: SwiftUI.Color?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func strokeWidth(_ width: CoreFoundation.CGFloat) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func strokeColor(_ color: SwiftUI.Color) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func drawingViewBackgroundColor(_ color: SwiftUI.Color) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func _drawingViewMaxHeight(_ height: CoreFoundation.CGFloat?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func cropsImage(_ cropsImage: Swift.Bool) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func xmarkColor(_ color: SwiftUI.Color?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func signatureLineColor(_ color: SwiftUI.Color?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func hidesXmark(_ hidesXmark: Swift.Bool) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func hidesSignatureLine(_ hidesSignatureLine: Swift.Bool) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func addsTimestampInImage(_ addsTimestampInImage: Swift.Bool) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func timestampFormatter(_ timestampFormatter: Foundation.DateFormatter?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func watermarkText(_ watermarkText: Swift.String?) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func watermarkTextAlignment(_ watermarkTextAlignment: UIKit.NSTextAlignment) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func watermarkTextFont(_ watermarkTextFont: UIKit.UIFont) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func watermarkTextColor(_ watermarkTextColor: SwiftUI.Color) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func appliesTintColorToImage(_ appliesTintColorToImage: Swift.Bool) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
  public func isRequired(_ isRequired: Swift.Bool) -> FioriSwiftUICore.SignatureCaptureView<StartActionView, RestartActionView, CancelActionView, ClearActionView, SaveActionView>
}
extension FioriSwiftUICore.SignatureCaptureViewModel {
  public var title: Swift.String? {
    get
  }
  public var startAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var restartAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var cancelAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var clearAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var saveAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var onSave: ((UIKit.UIImage) -> Swift.Void)? {
    get
  }
  public var onDelete: (() -> Swift.Void)? {
    get
  }
}
public struct SingleStep<Title, Node, Substeps> where Title : SwiftUI.View, Node : SwiftUI.View, Substeps : FioriSwiftUICore.IndexedViewContainer {
  public init(id: Swift.String = UUID().uuidString, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder node: () -> Node, @FioriSwiftUICore.IndexedViewBuilder substeps: () -> Substeps)
}
extension FioriSwiftUICore.SingleStep where Title == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Node == FioriSwiftUICore.TextOrIconView, Substeps == FioriSwiftUICore._StepsContainer {
  public init(model: any FioriSwiftUICore.SingleStepModel)
  public init(id: Swift.String = UUID().uuidString, title: Swift.String? = nil, node: FioriSwiftUICore.TextOrIcon, substeps: [any FioriSwiftUICore.SingleStepModel] = [])
}
extension FioriSwiftUICore.SingleStep where Title == SwiftUI.EmptyView {
  public init(id: Swift.String = UUID().uuidString, @SwiftUI.ViewBuilder node: () -> Node, @FioriSwiftUICore.IndexedViewBuilder substeps: () -> Substeps)
}
public struct _StepNode : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9_StepNodeV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.SingleStep where Title == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Node == FioriSwiftUICore._StepNode, Substeps == FioriSwiftUICore._StepItemsContainer {
  public init(item: any FioriSwiftUICore.StepItem)
}
extension FioriSwiftUICore.SingleStep where Substeps == SwiftUI.EmptyView {
  public init(id: Swift.String = UUID().uuidString, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder node: () -> Node)
}
extension FioriSwiftUICore.SingleStep where Title == SwiftUI.EmptyView, Substeps == SwiftUI.EmptyView {
  public init(id: Swift.String = UUID().uuidString, @SwiftUI.ViewBuilder node: () -> Node)
}
extension FioriSwiftUICore.SingleStep : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public var line: some SwiftUI.View {
    get
  }
  public func customStepId(_ id: Swift.String) -> FioriSwiftUICore.SingleStep<Title, Node, Substeps>
  public func lineSize(_ size: CoreFoundation.CGSize) -> FioriSwiftUICore.SingleStep<Title, Node, Substeps>
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10SingleStepV4bodyQrvp", 0) __<Title, Node, Substeps>
}
extension SwiftUI.EmptyView : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s7SwiftUI9EmptyViewV05FioriA6UICoreE4view2atQrSi_tF", 0) __
}
extension FioriSwiftUICore.SingleStepModel {
  public var id: Swift.String {
    get
  }
  public var title: Swift.String? {
    get
  }
}
public struct SliderPickerItem {
  public init(model: any FioriSwiftUICore.SliderPickerItemModel)
  public init(value: SwiftUI.Binding<Swift.Int?>, formatter: Swift.String? = nil, minimumValue: Swift.Int = 0, maximumValue: Swift.Int = 100, hint: Swift.String? = nil)
}
extension FioriSwiftUICore.SliderPickerItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16SliderPickerItemV4bodyQrvp", 0) __
}
public enum SortFilterItem : Swift.Identifiable, Swift.Hashable {
  public var id: Swift.String {
    get
  }
  case picker(item: FioriSwiftUICore.SortFilterItem.PickerItem, showsOnFilterFeedbackBar: Swift.Bool)
  case filterfeedback(item: FioriSwiftUICore.SortFilterItem.PickerItem)
  case `switch`(item: FioriSwiftUICore.SortFilterItem.SwitchItem, showsOnFilterFeedbackBar: Swift.Bool)
  case slider(item: FioriSwiftUICore.SortFilterItem.SliderItem, showsOnFilterFeedbackBar: Swift.Bool)
  case datetime(item: FioriSwiftUICore.SortFilterItem.DateTimeItem, showsOnFilterFeedbackBar: Swift.Bool)
  public var showsOnFilterFeedbackBar: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: FioriSwiftUICore.SortFilterItem, b: FioriSwiftUICore.SortFilterItem) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension FioriSwiftUICore.SortFilterItem {
  public struct PickerItem : Swift.Identifiable, Swift.Equatable {
    public let id: Swift.String
    public var name: Swift.String
    public var value: [Swift.Int]
    public var workingValue: [Swift.Int]
    public let allowsMultipleSelection: Swift.Bool
    public let allowsEmptySelection: Swift.Bool
    public let icon: Swift.String?
    public init(id: Swift.String = UUID().uuidString, name: Swift.String, value: [Swift.Int], valueOptions: [Swift.String], allowsMultipleSelection: Swift.Bool, allowsEmptySelection: Swift.Bool, icon: Swift.String? = nil)
    public static func == (a: FioriSwiftUICore.SortFilterItem.PickerItem, b: FioriSwiftUICore.SortFilterItem.PickerItem) -> Swift.Bool
    public typealias ID = Swift.String
  }
  public struct SwitchItem : Swift.Identifiable, Swift.Equatable {
    public var id: Swift.String
    public var name: Swift.String
    public var value: Swift.Bool?
    public let icon: Swift.String?
    public let hint: Swift.String?
    public init(id: Swift.String = UUID().uuidString, name: Swift.String, value: Swift.Bool?, icon: Swift.String? = nil, hint: Swift.String? = nil)
    public static func == (a: FioriSwiftUICore.SortFilterItem.SwitchItem, b: FioriSwiftUICore.SortFilterItem.SwitchItem) -> Swift.Bool
    public typealias ID = Swift.String
  }
  public struct SliderItem : Swift.Identifiable, Swift.Equatable {
    public let id: Swift.String
    public var name: Swift.String
    public var value: Swift.Int?
    public let minimumValue: Swift.Int
    public let maximumValue: Swift.Int
    public let icon: Swift.String?
    public let hint: Swift.String?
    public init(id: Swift.String = UUID().uuidString, name: Swift.String, value: Swift.Int? = nil, minimumValue: Swift.Int, maximumValue: Swift.Int, formatter: Swift.String? = nil, icon: Swift.String? = nil, hint: Swift.String? = nil)
    public static func == (a: FioriSwiftUICore.SortFilterItem.SliderItem, b: FioriSwiftUICore.SortFilterItem.SliderItem) -> Swift.Bool
    public typealias ID = Swift.String
  }
  public struct DateTimeItem : Swift.Equatable, Swift.Hashable {
    public let id: Swift.String
    public var name: Swift.String
    public var value: Foundation.Date?
    public var icon: Swift.String?
    public let formatter: Swift.String?
    public init(id: Swift.String = UUID().uuidString, name: Swift.String, value: Foundation.Date?, formatter: Swift.String? = nil, icon: Swift.String? = nil)
    public static func == (a: FioriSwiftUICore.SortFilterItem.DateTimeItem, b: FioriSwiftUICore.SortFilterItem.DateTimeItem) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}

@_Concurrency.MainActor(unsafe) public struct SortFilterView<Title, Items, CancelActionView, ResetActionView, ApplyActionView> where Title : SwiftUI.View, Items : SwiftUI.View, CancelActionView : SwiftUI.View, ResetActionView : SwiftUI.View, ApplyActionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder resetAction: () -> ResetActionView, @SwiftUI.ViewBuilder applyAction: () -> ApplyActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where Title == SwiftUI.Text, Items == FioriSwiftUICore._SortFilterCFGItemContainer, CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, ResetActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, ApplyActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  @_Concurrency.MainActor(unsafe) public init(model: any FioriSwiftUICore.SortFilterViewModel)
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, items: SwiftUI.Binding<[[FioriSwiftUICore.SortFilterItem]]>, cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()), resetAction: FioriSwiftUICore._Action? = _Action(model: _ResetActionDefault()), applyAction: FioriSwiftUICore._Action? = _Action(model: _ApplyActionDefault()), onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where CancelActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder resetAction: () -> ResetActionView, @SwiftUI.ViewBuilder applyAction: () -> ApplyActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where ResetActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder applyAction: () -> ApplyActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where ApplyActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder resetAction: () -> ResetActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where CancelActionView == FioriSwiftUICore._Action, ResetActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder applyAction: () -> ApplyActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where CancelActionView == FioriSwiftUICore._Action, ApplyActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder resetAction: () -> ResetActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where ResetActionView == FioriSwiftUICore._Action, ApplyActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView where CancelActionView == FioriSwiftUICore._Action, ResetActionView == FioriSwiftUICore._Action, ApplyActionView == FioriSwiftUICore._Action {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder items: () -> Items, onUpdate: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.SortFilterView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14SortFilterViewV4bodyQrvp", 0) __<Title, Items, CancelActionView, ResetActionView, ApplyActionView>
}
extension FioriSwiftUICore.SortFilterViewModel {
  public var cancelAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var resetAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var applyAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var onUpdate: (() -> Swift.Void)? {
    get
  }
}
extension SwiftUI.EnvironmentValues {
  public var splitPercent: CoreFoundation.CGFloat? {
    get
    set
  }
}
extension SwiftUI.View {
  public func splitPercent(_ value: CoreFoundation.CGFloat?) -> some SwiftUI.View
  
}
public struct StatefulButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init(color: SwiftUI.Color = .preferredColor(.tintColor), depressedColor: SwiftUI.Color = .preferredColor(.tintColorTapState), disabledColor: SwiftUI.Color = .gray, isSelectionPersistent: Swift.Bool = false)
  public func makeBody(configuration: SwiftUI.PrimitiveButtonStyleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19StatefulButtonStyleV8makeBody13configurationQr0B2UI09PrimitiveeF13ConfigurationV_tF", 0) __
}
public struct PrimaryButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init(isSelectionPersistent: Swift.Bool = false)
  public func makeBody(configuration: SwiftUI.PrimitiveButtonStyleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18PrimaryButtonStyleV8makeBody13configurationQr0B2UI09PrimitiveeF13ConfigurationV_tF", 0) __
}
public struct SecondaryButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init(colorStyle: FioriSwiftUICore.FioriButtonColorStyle = .tint, isSelectionPersistent: Swift.Bool = false)
  public func makeBody(configuration: SwiftUI.PrimitiveButtonStyleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20SecondaryButtonStyleV8makeBody13configurationQr0B2UI09PrimitiveeF13ConfigurationV_tF", 0) __
}
public struct TertiaryButtonStyle : SwiftUI.PrimitiveButtonStyle {
  public init(colorStyle: FioriSwiftUICore.FioriButtonColorStyle = .tint, isSelectionPersistent: Swift.Bool = false)
  public func makeBody(configuration: SwiftUI.PrimitiveButtonStyleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19TertiaryButtonStyleV8makeBody13configurationQr0B2UI09PrimitiveeF13ConfigurationV_tF", 0) __
}
public struct Status {
  public init(@SwiftUI.ViewBuilder status: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Status {
  public init(status: FioriSwiftUICore.TextOrIcon? = nil)
}
extension FioriSwiftUICore.Status {
  public init(_ configuration: FioriSwiftUICore.StatusConfiguration)
}
extension FioriSwiftUICore.Status : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore6StatusV4bodyQrvp", 0) __
}
public struct StatusBaseStyle : FioriSwiftUICore.StatusStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StatusConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15StatusBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct StatusFioriStyle : FioriSwiftUICore.StatusStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StatusConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore06StatusA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol StatusStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.StatusConfiguration) -> Self.Body
}
public struct StatusConfiguration {
  public let status: FioriSwiftUICore.StatusConfiguration.Status
  public typealias Status = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct StepProgressIndicatorState : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let completed: FioriSwiftUICore.StepProgressIndicatorState
  public static let disabled: FioriSwiftUICore.StepProgressIndicatorState
  public static let error: FioriSwiftUICore.StepProgressIndicatorState
  public static let normal: FioriSwiftUICore.StepProgressIndicatorState
  public typealias ArrayLiteralElement = FioriSwiftUICore.StepProgressIndicatorState
  public typealias Element = FioriSwiftUICore.StepProgressIndicatorState
  public typealias RawValue = Swift.UInt
}
public protocol StepItem {
  var id: Swift.String { get }
  var title: Swift.String? { get }
  var state: FioriSwiftUICore.StepProgressIndicatorState { get set }
  var substeps: [any FioriSwiftUICore.StepItem] { get set }
}
public struct StepProgressIndicator<Title, ActionView, Steps, CancelActionView> where Title : SwiftUI.View, ActionView : SwiftUI.View, Steps : FioriSwiftUICore.IndexedViewContainer, CancelActionView : SwiftUI.View {
  public init(selection: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView)
}
extension FioriSwiftUICore.StepProgressIndicator where Title == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, Steps == FioriSwiftUICore._StepsContainer, CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.StepProgressIndicatorModel)
  public init(selection: SwiftUI.Binding<Swift.String>, title: Swift.String? = nil, action: FioriSwiftUICore._Action? = _Action(model: _AllStepsActionDefault()), steps: [any FioriSwiftUICore.SingleStepModel] = [], cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()))
}
extension FioriSwiftUICore.StepProgressIndicator where Title == SwiftUI.EmptyView {
  public init(selection: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder action: () -> ActionView, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView)
}
extension FioriSwiftUICore.StepProgressIndicator where ActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView)
}
extension FioriSwiftUICore.StepProgressIndicator where CancelActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps)
}
extension FioriSwiftUICore.StepProgressIndicator where Title == SwiftUI.EmptyView, ActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView)
}
extension FioriSwiftUICore.StepProgressIndicator where Title == SwiftUI.EmptyView, CancelActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder action: () -> ActionView, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps)
}
extension FioriSwiftUICore.StepProgressIndicator where ActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps)
}
extension FioriSwiftUICore.StepProgressIndicator where Title == SwiftUI.EmptyView, ActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, @FioriSwiftUICore.IndexedViewBuilder steps: () -> Steps)
}
extension FioriSwiftUICore.StepProgressIndicator : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21StepProgressIndicatorV4bodyQrvp", 0) __<Title, ActionView, Steps, CancelActionView>
}
extension FioriSwiftUICore.StepProgressIndicator where Steps == FioriSwiftUICore._DefaultSteps, CancelActionView == FioriSwiftUICore._Action {
  public init(selection: SwiftUI.Binding<Swift.String>, stepItems: [any FioriSwiftUICore.StepItem], @SwiftUI.ViewBuilder title: @escaping () -> Title, @SwiftUI.ViewBuilder action: @escaping () -> ActionView)
  public init(selection: SwiftUI.Binding<Swift.String>, stepItems: [any FioriSwiftUICore.StepItem], @SwiftUI.ViewBuilder title: @escaping () -> Title) where ActionView == SwiftUI.EmptyView
  public init(selection: SwiftUI.Binding<Swift.String>, stepItems: [any FioriSwiftUICore.StepItem], @SwiftUI.ViewBuilder action: @escaping () -> ActionView) where Title == SwiftUI.EmptyView
  public init(selection: SwiftUI.Binding<Swift.String>, stepItems: [any FioriSwiftUICore.StepItem]) where Title == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView
}
extension FioriSwiftUICore.StepProgressIndicatorModel {
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var cancelAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var title: Swift.String? {
    get
  }
}
public struct StepperField {
  public init(@SwiftUI.ViewBuilder decrementAction: () -> any SwiftUI.View = { FioriButton { _ in FioriIcon.actions.less } }, text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder incrementAction: () -> any SwiftUI.View = { FioriButton { _ in FioriIcon.actions.add } }, step: Swift.Int? = nil, stepRange: Swift.ClosedRange<Swift.Int>)
}
extension FioriSwiftUICore.StepperField {
  public init(decrementAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in FioriIcon.actions.less }, text: SwiftUI.Binding<Swift.String>, incrementAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in FioriIcon.actions.add }, step: Swift.Int? = nil, stepRange: Swift.ClosedRange<Swift.Int>)
}
extension FioriSwiftUICore.StepperField {
  public init(_ configuration: FioriSwiftUICore.StepperFieldConfiguration)
}
extension FioriSwiftUICore.StepperField : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12StepperFieldV4bodyQrvp", 0) __
}
public struct StepperFieldBaseStyle : FioriSwiftUICore.StepperFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21StepperFieldBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol StepperFieldStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> Self.Body
}
public struct StepperFieldConfiguration {
  public let decrementAction: FioriSwiftUICore.StepperFieldConfiguration.DecrementAction
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let incrementAction: FioriSwiftUICore.StepperFieldConfiguration.IncrementAction
  public let step: Swift.Int?
  public let stepRange: Swift.ClosedRange<Swift.Int>
  public typealias DecrementAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias IncrementAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct StepperFieldFioriStyle : FioriSwiftUICore.StepperFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012StepperFieldA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct StepperView {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder decrementAction: () -> any SwiftUI.View = { FioriButton { _ in FioriIcon.actions.less } }, text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder incrementAction: () -> any SwiftUI.View = { FioriButton { _ in FioriIcon.actions.add } }, step: Swift.Int? = nil, stepRange: Swift.ClosedRange<Swift.Int>, @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder description: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.StepperView {
  public init(title: Foundation.AttributedString, decrementAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in FioriIcon.actions.less }, text: SwiftUI.Binding<Swift.String>, incrementAction: FioriSwiftUICore.FioriButton? = FioriButton { _ in FioriIcon.actions.add }, step: Swift.Int? = nil, stepRange: Swift.ClosedRange<Swift.Int>, icon: SwiftUI.Image? = nil, description: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.StepperView {
  public init(_ configuration: FioriSwiftUICore.StepperViewConfiguration)
}
extension FioriSwiftUICore.StepperView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11StepperViewV4bodyQrvp", 0) __
}
public struct StepperViewBaseStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20StepperViewBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct StepperViewFocusedStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23StepperViewFocusedStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.StepperViewStyle where Self == FioriSwiftUICore.StepperViewFocusedStyle {
  public static var focus: FioriSwiftUICore.StepperViewFocusedStyle {
    get
  }
}
public protocol StepperViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> Self.Body
}
public struct StepperViewConfiguration {
  public let title: FioriSwiftUICore.StepperViewConfiguration.Title
  public let decrementAction: FioriSwiftUICore.StepperViewConfiguration.DecrementAction
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let incrementAction: FioriSwiftUICore.StepperViewConfiguration.IncrementAction
  public let step: Swift.Int?
  public let stepRange: Swift.ClosedRange<Swift.Int>
  public let icon: FioriSwiftUICore.StepperViewConfiguration.Icon
  public let description: FioriSwiftUICore.StepperViewConfiguration.Description
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias DecrementAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias IncrementAction = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Description = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct StepperViewFioriStyle : FioriSwiftUICore.StepperViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.StepperViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore011StepperViewA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
extension SwiftUI.View {
  public func stepStyle(_ style: @escaping ((_ id: Swift.String) -> (some StepStyle)?)) -> some SwiftUI.View
  
}
extension SwiftUI.EnvironmentValues {
  public var stepLineModifier: FioriSwiftUICore.AnyViewModifier {
    get
    set
  }
}
extension SwiftUI.View {
  public func stepLineModifier(_ transform: @escaping (FioriSwiftUICore.AnyViewModifier.Content) -> some View) -> some SwiftUI.View
  
}
public protocol StepStyle {
  associatedtype Node : SwiftUI.View
  associatedtype Title : SwiftUI.View
  associatedtype Line : SwiftUI.View
  @SwiftUI.ViewBuilder func makeNode(configuration: Self.Configuration) -> Self.Node
  @SwiftUI.ViewBuilder func makeTitle(configuration: Self.Configuration) -> Self.Title
  @SwiftUI.ViewBuilder func makeLine(configuration: Self.Configuration) -> Self.Line
  typealias Configuration = FioriSwiftUICore.StepConfiguration
}
extension FioriSwiftUICore.StepStyle {
  public func makeNode(configuration: Self.Configuration) -> some SwiftUI.View
  
  public func makeTitle(configuration: Self.Configuration) -> some SwiftUI.View
  
  public func makeLine(configuration: Self.Configuration) -> some SwiftUI.View
  
}
public struct StepConfiguration {
  public struct Node : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: SwiftUI.AnyView
    public typealias Body = SwiftUI.AnyView
  }
  public struct Title : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: SwiftUI.AnyView
    public typealias Body = SwiftUI.AnyView
  }
  public struct Line : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: SwiftUI.AnyView
    public typealias Body = SwiftUI.AnyView
  }
  public let node: FioriSwiftUICore.StepConfiguration.Node
  public let title: FioriSwiftUICore.StepConfiguration.Title
  public let line: FioriSwiftUICore.StepConfiguration.Line
  public let state: FioriSwiftUICore.StepProgressIndicatorState?
  public var isPressed: Swift.Bool
  public var isSelected: Swift.Bool
  public var isLastStep: Swift.Bool?
  public var axis: SwiftUI.Axis
}
@_hasMissingDesignatedInitializers final public class StyleCache : Combine.ObservableObject {
  public static func upsertStyles(_ styles: [Swift.String : FioriSwiftUICore.AnyViewModifier]) throws
  public static func resetStyles()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SubAttribute {
  public init(@SwiftUI.ViewBuilder subAttribute: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.SubAttribute {
  public init(subAttribute: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.SubAttribute {
  public init(_ configuration: FioriSwiftUICore.SubAttributeConfiguration)
}
extension FioriSwiftUICore.SubAttribute : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12SubAttributeV4bodyQrvp", 0) __
}
public struct SubAttributeBaseStyle : FioriSwiftUICore.SubAttributeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubAttributeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21SubAttributeBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct SubAttributeFioriStyle : FioriSwiftUICore.SubAttributeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubAttributeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012SubAttributeA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol SubAttributeStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SubAttributeConfiguration) -> Self.Body
}
public struct SubAttributeConfiguration {
  public let subAttribute: FioriSwiftUICore.SubAttributeConfiguration.SubAttribute
  public typealias SubAttribute = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Substatus {
  public init(@SwiftUI.ViewBuilder substatus: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Substatus {
  public init(substatus: FioriSwiftUICore.TextOrIcon? = nil)
}
extension FioriSwiftUICore.Substatus {
  public init(_ configuration: FioriSwiftUICore.SubstatusConfiguration)
}
extension FioriSwiftUICore.Substatus : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9SubstatusV4bodyQrvp", 0) __
}
public struct SubstatusBaseStyle : FioriSwiftUICore.SubstatusStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubstatusConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18SubstatusBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct SubstatusFioriStyle : FioriSwiftUICore.SubstatusStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubstatusConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore09SubstatusA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol SubstatusStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SubstatusConfiguration) -> Self.Body
}
public struct SubstatusConfiguration {
  public let substatus: FioriSwiftUICore.SubstatusConfiguration.Substatus
  public typealias Substatus = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Subtitle {
  public init(@SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Subtitle {
  public init(subtitle: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Subtitle {
  public init(_ configuration: FioriSwiftUICore.SubtitleConfiguration)
}
extension FioriSwiftUICore.Subtitle : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8SubtitleV4bodyQrvp", 0) __
}
public struct SubtitleBaseStyle : FioriSwiftUICore.SubtitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubtitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17SubtitleBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct SubtitleFioriStyle : FioriSwiftUICore.SubtitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SubtitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08SubtitleA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol SubtitleStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SubtitleConfiguration) -> Self.Body
}
public struct SubtitleConfiguration {
  public let subtitle: FioriSwiftUICore.SubtitleConfiguration.Subtitle
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Switch {
  public init(isOn: SwiftUI.Binding<Swift.Bool>)
}
extension FioriSwiftUICore.Switch {
  public init(_ configuration: FioriSwiftUICore.SwitchConfiguration)
}
extension FioriSwiftUICore.Switch : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore6SwitchV4bodyQrvp", 0) __
}
public struct SwitchPickerItem {
  public init(model: any FioriSwiftUICore.SwitchPickerItemModel)
  public init(value: SwiftUI.Binding<Swift.Bool?>, name: Swift.String? = nil, hint: Swift.String? = nil)
}
extension FioriSwiftUICore.SwitchPickerItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16SwitchPickerItemV4bodyQrvp", 0) __
}
public struct FioriToggleStyle : SwiftUI.ToggleStyle {
  public init(labelColor: SwiftUI.Color = Color.preferredColor(.primaryLabel), onColor: SwiftUI.Color = Color.preferredColor(.tintColor), offColor: SwiftUI.Color = Color.preferredColor(.secondaryFill), onThumbColor: SwiftUI.Color = Color.preferredColor(.baseWhite), offThumbColor: SwiftUI.Color = Color.preferredColor(.baseWhite), onBorderColor: SwiftUI.Color = Color.preferredColor(.separator), offBorderColor: SwiftUI.Color = Color.preferredColor(.separator))
  public func makeBody(configuration: FioriSwiftUICore.FioriToggleStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore0A11ToggleStyleV8makeBody13configurationQr0B2UI0dE13ConfigurationV_tF", 0) __
}

public struct SwitchBaseStyle : FioriSwiftUICore.SwitchStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SwitchConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15SwitchBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct SwitchFioriStyle : FioriSwiftUICore.SwitchStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.SwitchConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore06SwitchA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol SwitchStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.SwitchConfiguration) -> Self.Body
}
public struct SwitchConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($isOn) public var isOn: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isOn: SwiftUI.Binding<Swift.Bool> {
    get
  }
}
public class TableModel : Combine.ObservableObject {
  public enum EditMode : Swift.Int, Swift.CaseIterable {
    case none
    case select
    case inline
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [FioriSwiftUICore.TableModel.EditMode]
    public typealias RawValue = Swift.Int
    public static var allCases: [FioriSwiftUICore.TableModel.EditMode] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @Combine.Published @_projectedValueProperty($headerData) public var headerData: FioriSwiftUICore.TableRowItem? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $headerData: Combine.Published<FioriSwiftUICore.TableRowItem?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var rowData: [FioriSwiftUICore.TableRowItem] {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($isHeaderSticky) public var isHeaderSticky: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isHeaderSticky: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isFirstColumnSticky) public var isFirstColumnSticky: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isFirstColumnSticky: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($horizontalScrolling) public var horizontalScrolling: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $horizontalScrolling: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showListView) public var showListView: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showListView: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($columnAttributes) public var columnAttributes: [FioriSwiftUICore.ColumnAttribute] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $columnAttributes: Combine.Published<[FioriSwiftUICore.ColumnAttribute]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func columnAttribute(for columnIndex: Swift.Int) -> FioriSwiftUICore.ColumnAttribute
  @Combine.Published @_projectedValueProperty($rowAlignment) public var rowAlignment: FioriSwiftUICore.RowAlignment {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $rowAlignment: Combine.Published<FioriSwiftUICore.RowAlignment>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @available(*, deprecated, renamed: "editMode")
  @Combine.Published @_projectedValueProperty($isEditing) public var isEditing: Swift.Bool {
    get
    @available(*, deprecated, renamed: "editMode")
    @available(iOS, introduced: 13.0, renamed: "editMode")
    @available(tvOS, introduced: 13.0, renamed: "editMode")
    @available(watchOS, introduced: 6.0, renamed: "editMode")
    @available(macOS, introduced: 10.15, renamed: "editMode")
    set
  }
  public var $isEditing: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($editMode) public var editMode: FioriSwiftUICore.TableModel.EditMode {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $editMode: Combine.Published<FioriSwiftUICore.TableModel.EditMode>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isPinchZoomEnable) public var isPinchZoomEnable: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isPinchZoomEnable: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var didSelectRowAt: ((_ index: Swift.Int) -> Swift.Void)?
  public var valueDidChange: ((FioriSwiftUICore.DataTableChange) -> Swift.Void)?
  public var cellTapped: ((Swift.Int, Swift.Int) -> Swift.Void)?
  public var keyboardDidShowOrHide: ((CoreFoundation.CGRect) -> Swift.Void)?
  @Combine.Published @_projectedValueProperty($selectedIndexes) public var selectedIndexes: [Swift.Int] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $selectedIndexes: Combine.Published<[Swift.Int]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($everyNumOfRowsToShowDivider) public var everyNumOfRowsToShowDivider: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $everyNumOfRowsToShowDivider: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showRowDivider) public var showRowDivider: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showRowDivider: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($showColoumnDivider) public var showColoumnDivider: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $showColoumnDivider: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($rowDividerHeight) public var rowDividerHeight: CoreFoundation.CGFloat {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $rowDividerHeight: Combine.Published<CoreFoundation.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($rowDividerColor) public var rowDividerColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $rowDividerColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($columnDividerWidth) public var columnDividerWidth: CoreFoundation.CGFloat {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $columnDividerWidth: Combine.Published<CoreFoundation.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($columnDividerColor) public var columnDividerColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $columnDividerColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($headerCellPadding) public var headerCellPadding: SwiftUI.EdgeInsets? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $headerCellPadding: Combine.Published<SwiftUI.EdgeInsets?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($dataCellPadding) public var dataCellPadding: SwiftUI.EdgeInsets? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $dataCellPadding: Combine.Published<SwiftUI.EdgeInsets?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($minRowHeight) public var minRowHeight: CoreFoundation.CGFloat {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $minRowHeight: Combine.Published<CoreFoundation.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($minColumnWidth) public var minColumnWidth: CoreFoundation.CGFloat {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $minColumnWidth: Combine.Published<CoreFoundation.CGFloat>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($allowsPartialRowDisplay) public var allowsPartialRowDisplay: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $allowsPartialRowDisplay: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($backgroundColor) public var backgroundColor: SwiftUI.Color {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $backgroundColor: Combine.Published<SwiftUI.Color>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var validateDataItem: ((_ rowIndex: Swift.Int, _ columnIndex: Swift.Int, _ dataItem: any FioriSwiftUICore.DataItem) -> (Swift.Bool, Swift.String?))?
  public var listItemDataAndTitle: ((_ rowIndex: Swift.Int, _ columnIndex: Swift.Int) -> (listItems: [Swift.String], title: Swift.String))?
  public var didScroll: ((_ contentOffset: CoreFoundation.CGPoint, _ indexOfRows: [Swift.Int], _ indexOfColumns: [Swift.Int]) -> Swift.Void)?
  public init(headerData: FioriSwiftUICore.TableRowItem? = nil, rowData: [FioriSwiftUICore.TableRowItem] = [], isHeaderSticky: Swift.Bool = false, isFirstColumnSticky: Swift.Bool = false, columnAttributes: [FioriSwiftUICore.ColumnAttribute] = [], rowAlignment: FioriSwiftUICore.RowAlignment = .top, isPinchZoomEnable: Swift.Bool = false, showRowDivider: Swift.Bool = true, rowDividerHeight: CoreFoundation.CGFloat = 1, rowDividerColor: SwiftUI.Color = Color.preferredColor(.separator), everyNumOfRowsToShowDivider: Swift.Int = 1, showColoumnDivider: Swift.Bool = true, columnDividerWidth: CoreFoundation.CGFloat = 1, columnDividerColor: SwiftUI.Color = Color.preferredColor(.separator), headerCellPadding: SwiftUI.EdgeInsets? = nil, dataCellPadding: SwiftUI.EdgeInsets? = nil, minRowHeight: CoreFoundation.CGFloat = 48, minColumnWidth: CoreFoundation.CGFloat = 48, allowsPartialRowDisplay: Swift.Bool = true, backgroundColor: SwiftUI.Color = Color.preferredColor(.secondaryGroupedBackground), showListView: Swift.Bool = false, editMode: FioriSwiftUICore.TableModel.EditMode = .none)
  public func copy() -> FioriSwiftUICore.TableModel
  public var isNoData: Swift.Bool {
    get
  }
  public func onSave(_ isSave: Swift.Bool) -> [FioriSwiftUICore.DataTableChange]
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct DataTableChange : Swift.CustomStringConvertible {
  public let rowIndex: Swift.Int
  public let columnIndex: Swift.Int
  public enum ValueType {
    case text(Swift.String)
    case date(Foundation.Date)
    case duration(Foundation.TimeInterval)
    case image
  }
  public let value: FioriSwiftUICore.DataTableChange.ValueType
  public let text: Swift.String
  public let selectedIndex: Swift.Int?
  public init(rowIndex: Swift.Int, columnIndex: Swift.Int, value: FioriSwiftUICore.DataTableChange.ValueType, text: Swift.String, selectedIndex: Swift.Int? = nil)
  public var description: Swift.String {
    get
  }
}
public struct TableRowItem : Swift.Equatable {
  public let leadingAccessories: [FioriSwiftUICore.AccessoryItem]
  public let trailingAccessory: FioriSwiftUICore.AccessoryItem?
  public var data: [any FioriSwiftUICore.DataItem] {
    get
  }
  public let selectedImage: SwiftUI.Image?
  public let deSelectedImage: SwiftUI.Image?
  public var isReadonly: Swift.Bool?
  public init(leadingAccessories: [FioriSwiftUICore.AccessoryItem], trailingAccessory: FioriSwiftUICore.AccessoryItem?, data: [any FioriSwiftUICore.DataItem], selectedImage: SwiftUI.Image? = nil, deSelectedImage: SwiftUI.Image? = nil, isReadonly: Swift.Bool? = nil)
  public init(data: [any FioriSwiftUICore.DataItem], selectedImage: SwiftUI.Image? = nil, deSelectedImage: SwiftUI.Image? = nil, isReadonly: Swift.Bool? = nil)
  public static func == (lhs: FioriSwiftUICore.TableRowItem, rhs: FioriSwiftUICore.TableRowItem) -> Swift.Bool
}
public enum AccessoryItem : Swift.Equatable {
  case button(FioriSwiftUICore.AccessoryButton)
  case icon(SwiftUI.Image)
  public static func == (lhs: FioriSwiftUICore.AccessoryItem, rhs: FioriSwiftUICore.AccessoryItem) -> Swift.Bool
}
public struct AccessoryButton : Swift.Equatable {
  public let image: SwiftUI.Image?
  public let title: Swift.String?
  public let action: () -> Swift.Void
  public init(image: SwiftUI.Image? = nil, title: Swift.String? = nil, action: @escaping () -> Swift.Void)
  public static func == (lhs: FioriSwiftUICore.AccessoryButton, rhs: FioriSwiftUICore.AccessoryButton) -> Swift.Bool
}
public protocol TagStyle {
  associatedtype Body : SwiftUI.View
  func makeBody(configuration: Self.Configuration) -> Self.Body
  typealias Configuration = FioriSwiftUICore.TagStyleConfiguration
}
public struct TagStyleConfiguration {
  public var label: SwiftUI.Text
}
public struct AnyTagStyle {
  public init(_ t: some TagStyle)
}
public struct LightTagStyle : FioriSwiftUICore.TagStyle {
  public init()
  public func makeBody(configuration: FioriSwiftUICore.LightTagStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13LightTagStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
public struct DarkTagStyle : FioriSwiftUICore.TagStyle {
  public init()
  public func makeBody(configuration: FioriSwiftUICore.DarkTagStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12DarkTagStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
public struct CustomTagStyle : FioriSwiftUICore.TagStyle {
  public init(textColor: SwiftUI.Color? = nil, font: SwiftUI.Font? = nil, fillColor: SwiftUI.Color? = nil, contentInsets: SwiftUI.EdgeInsets? = nil, cornerRadius: CoreFoundation.CGFloat? = nil, borderWidth: CoreFoundation.CGFloat? = nil, borderColor: SwiftUI.Color? = nil)
  public func makeBody(configuration: FioriSwiftUICore.CustomTagStyle.Configuration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14CustomTagStyleV8makeBody13configurationQrAA0eF13ConfigurationV_tF", 0) __
}
extension SwiftUI.EnvironmentValues {
  public var tagStyle: FioriSwiftUICore.AnyTagStyle {
    get
    set
  }
}
extension SwiftUI.EnvironmentValues {
  public var tagLimit: Swift.Int? {
    get
    set
  }
}
extension SwiftUI.View {
  public func tagStyle(_ style: some TagStyle) -> some SwiftUI.View
  
  public func tagLimit(_ number: Swift.Int?) -> some SwiftUI.View
  
}
public struct Tag : SwiftUI.View {
  public init(verbatim content: Swift.String)
  public init(_ attributedContent: Foundation.AttributedString)
  public init(_ content: some StringProtocol)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore3TagV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.Tag {
  @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
  public init(_ image: SwiftUI.Image)
}
extension FioriSwiftUICore.Tag {
  public init(_ key: SwiftUI.LocalizedStringKey, tableName: Swift.String? = nil, bundle: Foundation.Bundle? = nil, comment: Swift.StaticString? = nil)
}
public protocol TagViewList : FioriSwiftUICore._ViewEmptyChecking, SwiftUI.View {
  associatedtype V : SwiftUI.View
  var count: Swift.Int { get }
  func view(at index: Swift.Int) -> Self.V
}
extension FioriSwiftUICore.TagViewList {
  public var body: some SwiftUI.View {
    get
  }
}
extension FioriSwiftUICore.TagViewList {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct SingleTag<Content> : FioriSwiftUICore.TagViewList where Content : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11TagViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.SingleTag<Content>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9SingleTagV4view2atQrSi_tF", 0) __<Content>
}
public struct ConditionalSingleTag<TrueContent, FalseContent> : FioriSwiftUICore.TagViewList where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11TagViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.ConditionalSingleTag<TrueContent, FalseContent>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20ConditionalSingleTagV4view2atQrSi_tF", 0) __<TrueContent, FalseContent>
}
public struct PairTag<First, Second> : FioriSwiftUICore.TagViewList where First : SwiftUI.View, Second : FioriSwiftUICore.TagViewList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11TagViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.PairTag<First, Second>>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7PairTagV4view2atQrSi_tF", 0) __<First, Second>
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
@_functionBuilder public enum TagBuilder {
  public static func buildBlock() -> SwiftUI.EmptyView
  public static func buildBlock(_ content: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildBlock(_ c0: some View, _ c1: some View, _ c2: some View, _ c3: some View, _ c4: some View, _ c5: some View, _ c6: some View, _ c7: some View, _ c8: some View, _ c9: some View) -> some FioriSwiftUICore.TagViewList
  
  public static func buildIf(_ content: (some View)?) -> some FioriSwiftUICore.TagViewList
  
  public static func buildEither<TrueContent, FalseContent>(first: TrueContent) -> FioriSwiftUICore.ConditionalSingleTag<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
  public static func buildEither<TrueContent, FalseContent>(second: FalseContent) -> FioriSwiftUICore.ConditionalSingleTag<TrueContent, FalseContent> where TrueContent : SwiftUI.View, FalseContent : SwiftUI.View
}
public struct TagStack {
  public init(model: any FioriSwiftUICore.TagStackModel)
  public init(tags: [Swift.String]? = nil)
}
extension FioriSwiftUICore.TagStack : FioriSwiftUICore.TagViewList {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11TagViewListPAAE4bodyQrvp", 0) __<FioriSwiftUICore.TagStack>
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8TagStackV4view2atQrSi_tF", 0) __
}
public struct Tags {
  public init(@FioriSwiftUICore.TagBuilder tags: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Tags {
  public init(tags: [Foundation.AttributedString] = [])
}
extension FioriSwiftUICore.Tags {
  public init(_ configuration: FioriSwiftUICore.TagsConfiguration)
}
extension FioriSwiftUICore.Tags : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore4TagsV4bodyQrvp", 0) __
}
public struct TagsBaseStyle : FioriSwiftUICore.TagsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TagsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13TagsBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct TagsFioriStyle : FioriSwiftUICore.TagsStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TagsConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore04TagsA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol TagsStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TagsConfiguration) -> Self.Body
}
public struct TagsConfiguration {
  public let tags: FioriSwiftUICore.TagsConfiguration.Tags
  public typealias Tags = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TertiaryAction {
  public init(@SwiftUI.ViewBuilder tertiaryAction: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.TertiaryAction {
  public init(tertiaryAction: FioriSwiftUICore.FioriButton? = nil)
}
extension FioriSwiftUICore.TertiaryAction {
  public init(_ configuration: FioriSwiftUICore.TertiaryActionConfiguration)
}
extension FioriSwiftUICore.TertiaryAction : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14TertiaryActionV4bodyQrvp", 0) __
}
public struct TertiaryActionBaseStyle : FioriSwiftUICore.TertiaryActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TertiaryActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23TertiaryActionBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct TertiaryActionFioriStyle : FioriSwiftUICore.TertiaryActionStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TertiaryActionConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014TertiaryActionA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol TertiaryActionStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TertiaryActionConfiguration) -> Self.Body
}
public struct TertiaryActionConfiguration {
  public let tertiaryAction: FioriSwiftUICore.TertiaryActionConfiguration.TertiaryAction
  public typealias TertiaryAction = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TextFieldFormView {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View, text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() }, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil, @SwiftUI.ViewBuilder mandatoryFieldIndicator: () -> any SwiftUI.View = { EmptyView() }, isRequired: Swift.Bool = false, actionIcon: SwiftUI.Image? = nil, action: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.TextFieldFormView {
  public init(title: Foundation.AttributedString, text: SwiftUI.Binding<Swift.String>, placeholder: Foundation.AttributedString? = nil, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil, mandatoryFieldIndicator: FioriSwiftUICore.TextOrIcon? = .text("*"), isRequired: Swift.Bool = false, actionIcon: SwiftUI.Image? = nil, action: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.TextFieldFormView {
  public init(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration)
}
extension FioriSwiftUICore.TextFieldFormView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17TextFieldFormViewV4bodyQrvp", 0) __
}
public struct TextFieldFormViewBaseStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26TextFieldFormViewBaseStyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public protocol TextFieldFormViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> Self.Body
}
public struct TextFieldFormViewConfiguration {
  public let title: FioriSwiftUICore.TextFieldFormViewConfiguration.Title
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let placeholder: FioriSwiftUICore.TextFieldFormViewConfiguration.Placeholder
  public let controlState: FioriSwiftUICore.ControlState
  public let errorMessage: Foundation.AttributedString?
  public let maxTextLength: Swift.Int?
  public let hintText: Foundation.AttributedString?
  public let hidesReadOnlyHint: Swift.Bool
  public let isCharCountEnabled: Swift.Bool
  public let allowsBeyondLimit: Swift.Bool
  public let charCountReachLimitMessage: Swift.String?
  public let charCountBeyondLimitMsg: Swift.String?
  public let mandatoryFieldIndicator: FioriSwiftUICore.TextFieldFormViewConfiguration.MandatoryFieldIndicator
  public let isRequired: Swift.Bool
  public let actionIcon: SwiftUI.Image?
  public let action: (() -> Swift.Void)?
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias MandatoryFieldIndicator = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TextFieldFormViewFioriStyle : FioriSwiftUICore.TextFieldFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextFieldFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore017TextFieldFormViewA5StyleV8makeBodyyQrAA0defG13ConfigurationVF", 0) __
}
public struct TextInput {
  public init(model: any FioriSwiftUICore.TextInputModel)
  public init(textInputValue: SwiftUI.Binding<Swift.String>? = nil, onCommit: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.TextInput : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9TextInputV4bodyQrvp", 0) __
}
public struct TextInputField {
  public init(text: SwiftUI.Binding<Swift.String>)
}
extension FioriSwiftUICore.TextInputField {
  public init(_ configuration: FioriSwiftUICore.TextInputFieldConfiguration)
}
extension FioriSwiftUICore.TextInputField : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14TextInputFieldV4bodyQrvp", 0) __
}
public struct TextInputFieldBaseStyle : FioriSwiftUICore.TextInputFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextInputFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23TextInputFieldBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct TextInputFieldFioriStyle : FioriSwiftUICore.TextInputFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextInputFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014TextInputFieldA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct TextInputFieldNumberStyle : FioriSwiftUICore.TextInputFieldStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextInputFieldConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore25TextInputFieldNumberStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
extension FioriSwiftUICore.TextInputFieldStyle where Self == FioriSwiftUICore.TextInputFieldNumberStyle {
  public static var number: FioriSwiftUICore.TextInputFieldNumberStyle {
    get
  }
}
public protocol TextInputFieldStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TextInputFieldConfiguration) -> Self.Body
}
public struct TextInputFieldConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
}

public enum TextOrIcon {
  case text(Swift.String)
  case icon(SwiftUI.Image)
}
public struct TextOrIconView : SwiftUI.View {
  public init(_ content: FioriSwiftUICore.TextOrIcon?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14TextOrIconViewV4bodyQrvp", 0) __
}
extension FioriSwiftUICore.TextOrIconView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct TextView {
  public init(text: SwiftUI.Binding<Swift.String>)
}
extension FioriSwiftUICore.TextView {
  public init(_ configuration: FioriSwiftUICore.TextViewConfiguration)
}
extension FioriSwiftUICore.TextView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8TextViewV4bodyQrvp", 0) __
}
public struct TextViewBaseStyle : FioriSwiftUICore.TextViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17TextViewBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct TextViewFioriStyle : FioriSwiftUICore.TextViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TextViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08TextViewA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol TextViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TextViewConfiguration) -> Self.Body
}
public struct TextViewConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
}
public struct Timeline {
  public init(@SwiftUI.ViewBuilder timestamp: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder secondaryTimestamp: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder timelineNode: () -> any SwiftUI.View, @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, @SwiftUI.ViewBuilder subtitle: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder attribute: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder status: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder substatus: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder subAttribute: () -> any SwiftUI.View = { EmptyView() }, isPast: Swift.Bool = false, isPresent: Swift.Bool = false)
}
extension FioriSwiftUICore.Timeline {
  public init(timestamp: Foundation.AttributedString? = nil, secondaryTimestamp: FioriSwiftUICore.TextOrIcon? = nil, timelineNode: FioriSwiftUICore.TimelineNodeType, icon: SwiftUI.Image? = nil, title: Foundation.AttributedString, subtitle: Foundation.AttributedString? = nil, attribute: Foundation.AttributedString? = nil, status: FioriSwiftUICore.TextOrIcon? = nil, substatus: FioriSwiftUICore.TextOrIcon? = nil, subAttribute: Foundation.AttributedString? = nil, isPast: Swift.Bool = false, isPresent: Swift.Bool = false)
}
extension FioriSwiftUICore.Timeline {
  public init(_ configuration: FioriSwiftUICore.TimelineConfiguration)
}
extension FioriSwiftUICore.Timeline : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8TimelineV4bodyQrvp", 0) __
}
public struct TimelineMarker {
  public init(@SwiftUI.ViewBuilder timestamp: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder secondaryTimestamp: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder timelineNode: () -> any SwiftUI.View, @SwiftUI.ViewBuilder icon: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder title: () -> any SwiftUI.View, isPast: Swift.Bool = false, isPresent: Swift.Bool = false, showUpperVerticalLine: Swift.Bool = true, showLowerVerticalLine: Swift.Bool = true)
}
extension FioriSwiftUICore.TimelineMarker {
  public init(timestamp: Foundation.AttributedString? = nil, secondaryTimestamp: FioriSwiftUICore.TextOrIcon? = nil, timelineNode: FioriSwiftUICore.TimelineNodeType, icon: SwiftUI.Image? = nil, title: Foundation.AttributedString, isPast: Swift.Bool = false, isPresent: Swift.Bool = false, showUpperVerticalLine: Swift.Bool = true, showLowerVerticalLine: Swift.Bool = true)
}
extension FioriSwiftUICore.TimelineMarker {
  public init(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration)
}
extension FioriSwiftUICore.TimelineMarker : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14TimelineMarkerV4bodyQrvp", 0) __
}
public struct TimelineMarkerBaseStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore23TimelineMarkerBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol TimelineMarkerStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> Self.Body
}
public struct TimelineMarkerConfiguration {
  public let timestamp: FioriSwiftUICore.TimelineMarkerConfiguration.Timestamp
  public let secondaryTimestamp: FioriSwiftUICore.TimelineMarkerConfiguration.SecondaryTimestamp
  public let timelineNode: FioriSwiftUICore.TimelineMarkerConfiguration.TimelineNode
  public let icon: FioriSwiftUICore.TimelineMarkerConfiguration.Icon
  public let title: FioriSwiftUICore.TimelineMarkerConfiguration.Title
  public let isPast: Swift.Bool
  public let isPresent: Swift.Bool
  public let showUpperVerticalLine: Swift.Bool
  public let showLowerVerticalLine: Swift.Bool
  public typealias Timestamp = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias SecondaryTimestamp = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias TimelineNode = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TimelineMarkerFioriStyle : FioriSwiftUICore.TimelineMarkerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineMarkerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore014TimelineMarkerA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct TimelineNode {
  public init(@SwiftUI.ViewBuilder timelineNode: () -> any SwiftUI.View)
}
extension FioriSwiftUICore.TimelineNode {
  public init(timelineNode: FioriSwiftUICore.TimelineNodeType)
}
extension FioriSwiftUICore.TimelineNode {
  public init(_ configuration: FioriSwiftUICore.TimelineNodeConfiguration)
}
extension FioriSwiftUICore.TimelineNode : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12TimelineNodeV4bodyQrvp", 0) __
}
public struct TimelineNodeBaseStyle : FioriSwiftUICore.TimelineNodeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNodeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore21TimelineNodeBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct TimelineNodeFioriStyle : FioriSwiftUICore.TimelineNodeStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNodeConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore012TimelineNodeA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol TimelineNodeStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TimelineNodeConfiguration) -> Self.Body
}
public struct TimelineNodeConfiguration {
  public let timelineNode: FioriSwiftUICore.TimelineNodeConfiguration.TimelineNode
  public typealias TimelineNode = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TimelineNodeView : SwiftUI.View {
  public var nodeType: FioriSwiftUICore.TimelineNodeType
  public init(_ nodeType: FioriSwiftUICore.TimelineNodeType)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16TimelineNodeViewV4bodyQrvp", 0) __
}
public enum TimelineNodeType {
  case beforeStart
  case start
  case open
  case inProgress
  case complete
  case beforeEnd
  case end
  public static func == (a: FioriSwiftUICore.TimelineNodeType, b: FioriSwiftUICore.TimelineNodeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TimelineNowIndicator {
  public init(@SwiftUI.ViewBuilder nowIndicatorNode: () -> any SwiftUI.View = { Image(systemName: "circle.fill") })
}
extension FioriSwiftUICore.TimelineNowIndicator {
  public init(_ configuration: FioriSwiftUICore.TimelineNowIndicatorConfiguration)
}
extension FioriSwiftUICore.TimelineNowIndicator : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore20TimelineNowIndicatorV4bodyQrvp", 0) __
}
public struct TimelineNowIndicatorBaseStyle : FioriSwiftUICore.TimelineNowIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNowIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore29TimelineNowIndicatorBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol TimelineNowIndicatorStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TimelineNowIndicatorConfiguration) -> Self.Body
}
public struct TimelineNowIndicatorConfiguration {
  public let nowIndicatorNode: FioriSwiftUICore.TimelineNowIndicatorConfiguration.NowIndicatorNode
  public typealias NowIndicatorNode = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TimelineNowIndicatorFioriStyle : FioriSwiftUICore.TimelineNowIndicatorStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineNowIndicatorConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore020TimelineNowIndicatorA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct TimelineBaseStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore17TimelineBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol TimelineStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> Self.Body
}
public struct TimelineConfiguration {
  public let timestamp: FioriSwiftUICore.TimelineConfiguration.Timestamp
  public let secondaryTimestamp: FioriSwiftUICore.TimelineConfiguration.SecondaryTimestamp
  public let timelineNode: FioriSwiftUICore.TimelineConfiguration.TimelineNode
  public let icon: FioriSwiftUICore.TimelineConfiguration.Icon
  public let title: FioriSwiftUICore.TimelineConfiguration.Title
  public let subtitle: FioriSwiftUICore.TimelineConfiguration.Subtitle
  public let attribute: FioriSwiftUICore.TimelineConfiguration.Attribute
  public let status: FioriSwiftUICore.TimelineConfiguration.Status
  public let substatus: FioriSwiftUICore.TimelineConfiguration.Substatus
  public let subAttribute: FioriSwiftUICore.TimelineConfiguration.SubAttribute
  public let isPast: Swift.Bool
  public let isPresent: Swift.Bool
  public typealias Timestamp = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias SecondaryTimestamp = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias TimelineNode = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Icon = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Subtitle = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Attribute = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Status = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias Substatus = FioriSwiftUICore.ConfigurationViewWrapper
  public typealias SubAttribute = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TimelineFioriStyle : FioriSwiftUICore.TimelineStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimelineConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore08TimelineA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct Timestamp {
  public init(@SwiftUI.ViewBuilder timestamp: () -> any SwiftUI.View = { EmptyView() })
}
extension FioriSwiftUICore.Timestamp {
  public init(timestamp: Foundation.AttributedString? = nil)
}
extension FioriSwiftUICore.Timestamp {
  public init(_ configuration: FioriSwiftUICore.TimestampConfiguration)
}
extension FioriSwiftUICore.Timestamp : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore9TimestampV4bodyQrvp", 0) __
}
public struct TimestampBaseStyle : FioriSwiftUICore.TimestampStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimestampConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore18TimestampBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct TimestampFioriStyle : FioriSwiftUICore.TimestampStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TimestampConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore09TimestampA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol TimestampStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TimestampConfiguration) -> Self.Body
}
public struct TimestampConfiguration {
  public let timestamp: FioriSwiftUICore.TimestampConfiguration.Timestamp
  public typealias Timestamp = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct Title {
  public init(@SwiftUI.ViewBuilder title: () -> any SwiftUI.View)
}
extension FioriSwiftUICore.Title {
  public init(title: Foundation.AttributedString)
}
extension FioriSwiftUICore.Title {
  public init(_ configuration: FioriSwiftUICore.TitleConfiguration)
}
extension FioriSwiftUICore.Title : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore5TitleV4bodyQrvp", 0) __
}
public struct TitleFormView {
  public init(text: SwiftUI.Binding<Swift.String>, @SwiftUI.ViewBuilder placeholder: () -> any SwiftUI.View = { EmptyView() }, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil)
}
extension FioriSwiftUICore.TitleFormView {
  public init(text: SwiftUI.Binding<Swift.String>, placeholder: Foundation.AttributedString? = nil, controlState: FioriSwiftUICore.ControlState = .normal, errorMessage: Foundation.AttributedString? = nil, maxTextLength: Swift.Int? = nil, hintText: Foundation.AttributedString? = nil, hidesReadOnlyHint: Swift.Bool = false, isCharCountEnabled: Swift.Bool = false, allowsBeyondLimit: Swift.Bool = false, charCountReachLimitMessage: Swift.String? = nil, charCountBeyondLimitMsg: Swift.String? = nil)
}
extension FioriSwiftUICore.TitleFormView {
  public init(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration)
}
extension FioriSwiftUICore.TitleFormView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13TitleFormViewV4bodyQrvp", 0) __
}
public struct TitleFormViewBaseStyle : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore22TitleFormViewBaseStyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public protocol TitleFormViewStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> Self.Body
}
public struct TitleFormViewConfiguration {
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  public let placeholder: FioriSwiftUICore.TitleFormViewConfiguration.Placeholder
  public let controlState: FioriSwiftUICore.ControlState
  public let errorMessage: Foundation.AttributedString?
  public let maxTextLength: Swift.Int?
  public let hintText: Foundation.AttributedString?
  public let hidesReadOnlyHint: Swift.Bool
  public let isCharCountEnabled: Swift.Bool
  public let allowsBeyondLimit: Swift.Bool
  public let charCountReachLimitMessage: Swift.String?
  public let charCountBeyondLimitMsg: Swift.String?
  public typealias Placeholder = FioriSwiftUICore.ConfigurationViewWrapper
}
public struct TitleFormViewFioriStyle : FioriSwiftUICore.TitleFormViewStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleFormViewConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore013TitleFormViewA5StyleV8makeBodyyQrAA0deF13ConfigurationVF", 0) __
}
public struct TitleBaseStyle : FioriSwiftUICore.TitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14TitleBaseStyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public struct TitleFioriStyle : FioriSwiftUICore.TitleStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TitleConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore05TitleA5StyleV8makeBodyyQrAA0D13ConfigurationVF", 0) __
}
public protocol TitleStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TitleConfiguration) -> Self.Body
}
public struct TitleConfiguration {
  public let title: FioriSwiftUICore.TitleConfiguration.Title
  public typealias Title = FioriSwiftUICore.ConfigurationViewWrapper
}



extension SwiftUI.View {
  public func fioriToolbar<Items>(@FioriSwiftUICore.IndexedViewBuilder items: () -> Items) -> some SwiftUI.View where Items : FioriSwiftUICore.IndexedViewContainer
  
  public func fioriToolbar<Items>(helperText: Swift.String? = nil, @FioriSwiftUICore.IndexedViewBuilder items: () -> Items) -> some SwiftUI.View where Items : FioriSwiftUICore.IndexedViewContainer
  
  public func fioriToolbar<Items>(helperText: Swift.String? = nil, @SwiftUI.ViewBuilder moreActionOverflow: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.IndexedViewBuilder items: () -> Items) -> some SwiftUI.View where Items : FioriSwiftUICore.IndexedViewContainer
  
  public func fioriToolbar<Items>(@SwiftUI.ViewBuilder helperText: () -> any SwiftUI.View = { EmptyView() }, @SwiftUI.ViewBuilder moreActionOverflow: () -> any SwiftUI.View = { EmptyView() }, @FioriSwiftUICore.IndexedViewBuilder items: () -> Items) -> some SwiftUI.View where Items : FioriSwiftUICore.IndexedViewContainer
  
}
public struct TopDivider {
  public init(@SwiftUI.ViewBuilder topDivider: () -> any SwiftUI.View = { Rectangle().fill(Color.clear) })
}
extension FioriSwiftUICore.TopDivider {
  public init(_ configuration: FioriSwiftUICore.TopDividerConfiguration)
}
extension FioriSwiftUICore.TopDivider : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore10TopDividerV4bodyQrvp", 0) __
}
public struct TopDividerBaseStyle : FioriSwiftUICore.TopDividerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TopDividerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19TopDividerBaseStyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public struct TopDividerFioriStyle : FioriSwiftUICore.TopDividerStyle {
  public func makeBody(_ configuration: FioriSwiftUICore.TopDividerConfiguration) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore010TopDividerA5StyleV8makeBodyyQrAA0dE13ConfigurationVF", 0) __
}
public protocol TopDividerStyle : SwiftUI.DynamicProperty {
  associatedtype Body : SwiftUI.View
  func makeBody(_ configuration: FioriSwiftUICore.TopDividerConfiguration) -> Self.Body
}
public struct TopDividerConfiguration {
  public let topDivider: FioriSwiftUICore.TopDividerConfiguration.TopDivider
  public typealias TopDivider = FioriSwiftUICore.ConfigurationViewWrapper
}
extension SwiftUI.View {
  public var typeErased: SwiftUI.AnyView {
    get
  }
}
public struct UserConsentForm<NextActionView, CancelActionView, AllowActionView, DenyActionView, NotNowActionView, UserConsentPages> where NextActionView : SwiftUI.View, CancelActionView : SwiftUI.View, AllowActionView : SwiftUI.View, DenyActionView : SwiftUI.View, NotNowActionView : SwiftUI.View, UserConsentPages : FioriSwiftUICore.IndexedViewContainer {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, CancelActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, AllowActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, DenyActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, NotNowActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, UserConsentPages == FioriSwiftUICore._UserConsentPagesContainer {
  public init(model: any FioriSwiftUICore.UserConsentFormModel)
  public init(nextAction: FioriSwiftUICore._Action? = _Action(model: _NextActionDefault()), cancelAction: FioriSwiftUICore._Action? = _Action(model: _CancelActionDefault()), allowAction: FioriSwiftUICore._Action? = _Action(model: _AllowActionDefault()), denyAction: FioriSwiftUICore._Action? = _Action(model: _DenyActionDefault()), notNowAction: FioriSwiftUICore._Action? = _Action(model: _NotNowActionDefault()), userConsentPages: [any FioriSwiftUICore.UserConsentPageModel] = [], isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where AllowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where AllowActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder notNowAction: () -> NotNowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder denyAction: () -> DenyActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder allowAction: () -> AllowActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder cancelAction: () -> CancelActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@SwiftUI.ViewBuilder nextAction: () -> NextActionView, @FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm where NextActionView == FioriSwiftUICore._Action, CancelActionView == FioriSwiftUICore._Action, AllowActionView == FioriSwiftUICore._Action, DenyActionView == FioriSwiftUICore._Action, NotNowActionView == FioriSwiftUICore._Action {
  public init(@FioriSwiftUICore.IndexedViewBuilder userConsentPages: () -> UserConsentPages, isRequired: Swift.Bool = true, alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? = _UserConsentFormAlertConfigurationDefault, didAllow: (() -> Swift.Void)? = nil, didDeny: ((Swift.Bool) -> Swift.Void)? = nil, didCancel: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentForm : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15UserConsentFormV4bodyQrvp", 0) __<NextActionView, CancelActionView, AllowActionView, DenyActionView, NotNowActionView, UserConsentPages>
}
public enum UserConsentAlertType {
  case cancel
  case deny
  public static func == (a: FioriSwiftUICore.UserConsentAlertType, b: FioriSwiftUICore.UserConsentAlertType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FioriSwiftUICore.UserConsentFormModel {
  public var nextAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var cancelAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var allowAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var denyAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var notNowAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var isRequired: Swift.Bool {
    get
  }
  public var alertConfiguration: ((FioriSwiftUICore.UserConsentAlertType) -> FioriSwiftUICore.AlertConfiguration?)? {
    get
  }
  public var didAllow: (() -> Swift.Void)? {
    get
  }
  public var didDeny: ((Swift.Bool) -> Swift.Void)? {
    get
  }
  public var didCancel: (() -> Swift.Void)? {
    get
  }
}
public struct UserConsentPage<Title, BodyAttributedText, ActionView> where Title : SwiftUI.View, BodyAttributedText : SwiftUI.View, ActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.UserConsentPage where Title == SwiftUI.Text, BodyAttributedText == SwiftUI._ConditionalContent<FioriSwiftUICore.AttributedText, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.UserConsentPageModel)
  public init(title: Swift.String, bodyAttributedText: Foundation.NSAttributedString? = nil, action: FioriSwiftUICore._Action? = nil)
}
extension FioriSwiftUICore.UserConsentPage where BodyAttributedText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.UserConsentPage where ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder bodyAttributedText: () -> BodyAttributedText)
}
extension FioriSwiftUICore.UserConsentPage where BodyAttributedText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.UserConsentPage : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15UserConsentPageV4bodyQrvp", 0) __<Title, BodyAttributedText, ActionView>
}
extension FioriSwiftUICore.UserConsentPageModel {
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
}
public struct UserConsentView<UserConsentForms> where UserConsentForms : FioriSwiftUICore.IndexedViewContainer {
  public init(@FioriSwiftUICore.IndexedViewBuilder userConsentForms: () -> UserConsentForms, didAllow: ((Swift.Int) -> Swift.Void)? = nil, didDeny: ((Swift.Int, Swift.Bool) -> Swift.Void)? = nil, didCancel: ((Swift.Int) -> Swift.Void)? = nil, didFinish: (([Swift.Int]) -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentView where UserConsentForms == FioriSwiftUICore._UserConsentFormsContainer {
  public init(model: any FioriSwiftUICore.UserConsentViewModel)
  public init(userConsentForms: [any FioriSwiftUICore.UserConsentFormModel] = [], didAllow: ((Swift.Int) -> Swift.Void)? = nil, didDeny: ((Swift.Int, Swift.Bool) -> Swift.Void)? = nil, didCancel: ((Swift.Int) -> Swift.Void)? = nil, didFinish: (([Swift.Int]) -> Swift.Void)? = nil)
}
extension FioriSwiftUICore.UserConsentView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15UserConsentViewV4bodyQrvp", 0) __<UserConsentForms>
}
extension FioriSwiftUICore.UserConsentViewModel {
  public var didAllow: ((Swift.Int) -> Swift.Void)? {
    get
  }
  public var didDeny: ((Swift.Int, Swift.Bool) -> Swift.Void)? {
    get
  }
  public var didCancel: ((Swift.Int) -> Swift.Void)? {
    get
  }
  public var didFinish: (([Swift.Int]) -> Swift.Void)? {
    get
  }
}
extension SwiftUI.View {
  public func accessoryIconStyle(_ style: some AccessoryIconStyle) -> some SwiftUI.View
  
  public func accessoryIconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.AccessoryIconConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func actionStyle(_ style: some ActionStyle) -> some SwiftUI.View
  
  public func actionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func attributeStyle(_ style: some AttributeStyle) -> some SwiftUI.View
  
  public func attributeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.AttributeConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func avatarsStyle(_ style: some AvatarsStyle) -> some SwiftUI.View
  
  public func avatarsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.AvatarsConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func bannerMessageStyle(_ style: some BannerMessageStyle) -> some SwiftUI.View
  
  public func bannerMessageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.BannerMessageConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardBodyStyle(_ style: some CardBodyStyle) -> some SwiftUI.View
  
  public func cardBodyStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardBodyConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardStyle(_ style: some CardStyle) -> some SwiftUI.View
  
  public func cardStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardExtHeaderStyle(_ style: some CardExtHeaderStyle) -> some SwiftUI.View
  
  public func cardExtHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardExtHeaderConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardFooterStyle(_ style: some CardFooterStyle) -> some SwiftUI.View
  
  public func cardFooterStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardFooterConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardHeaderStyle(_ style: some CardHeaderStyle) -> some SwiftUI.View
  
  public func cardHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardHeaderConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardMainHeaderStyle(_ style: some CardMainHeaderStyle) -> some SwiftUI.View
  
  public func cardMainHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardMainHeaderConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func cardMediaStyle(_ style: some CardMediaStyle) -> some SwiftUI.View
  
  public func cardMediaStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CardMediaConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func closeActionStyle(_ style: some CloseActionStyle) -> some SwiftUI.View
  
  public func closeActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CloseActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func counterStyle(_ style: some CounterStyle) -> some SwiftUI.View
  
  public func counterStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.CounterConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func decrementActionStyle(_ style: some DecrementActionStyle) -> some SwiftUI.View
  
  public func decrementActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DecrementActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func descriptionStyle(_ style: some DescriptionStyle) -> some SwiftUI.View
  
  public func descriptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DescriptionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func detailImageStyle(_ style: some DetailImageStyle) -> some SwiftUI.View
  
  public func detailImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.DetailImageConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func filledIconStyle(_ style: some FilledIconStyle) -> some SwiftUI.View
  
  public func filledIconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FilledIconConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func footnoteStyle(_ style: some FootnoteStyle) -> some SwiftUI.View
  
  public func footnoteStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FootnoteConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func footnoteIconsStyle(_ style: some FootnoteIconsStyle) -> some SwiftUI.View
  
  public func footnoteIconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FootnoteIconsConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func formViewStyle(_ style: some FormViewStyle) -> some SwiftUI.View
  
  public func formViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.FormViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func greetingTextStyle(_ style: some GreetingTextStyle) -> some SwiftUI.View
  
  public func greetingTextStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.GreetingTextConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func headerActionStyle(_ style: some HeaderActionStyle) -> some SwiftUI.View
  
  public func headerActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.HeaderActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func helperTextStyle(_ style: some HelperTextStyle) -> some SwiftUI.View
  
  public func helperTextStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.HelperTextConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func iconStyle(_ style: some IconStyle) -> some SwiftUI.View
  
  public func iconStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func iconsStyle(_ style: some IconsStyle) -> some SwiftUI.View
  
  public func iconsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IconsConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func illustratedMessageStyle(_ style: some IllustratedMessageStyle) -> some SwiftUI.View
  
  public func illustratedMessageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IllustratedMessageConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func incrementActionStyle(_ style: some IncrementActionStyle) -> some SwiftUI.View
  
  public func incrementActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.IncrementActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func informationViewStyle(_ style: some InformationViewStyle) -> some SwiftUI.View
  
  public func informationViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.InformationViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func jouleWelcomeScreenStyle(_ style: some JouleWelcomeScreenStyle) -> some SwiftUI.View
  
  public func jouleWelcomeScreenStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.JouleWelcomeScreenConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func keyValueFormViewStyle(_ style: some KeyValueFormViewStyle) -> some SwiftUI.View
  
  public func keyValueFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KeyValueFormViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func kpiCaptionStyle(_ style: some KpiCaptionStyle) -> some SwiftUI.View
  
  public func kpiCaptionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiCaptionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func kpiStyle(_ style: some KpiStyle) -> some SwiftUI.View
  
  public func kpiStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.KpiConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func labelItemStyle(_ style: some LabelItemStyle) -> some SwiftUI.View
  
  public func labelItemStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.LabelItemConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func linearProgressIndicatorStyle(_ style: some LinearProgressIndicatorStyle) -> some SwiftUI.View
  
  public func linearProgressIndicatorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.LinearProgressIndicatorConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func linearProgressIndicatorViewStyle(_ style: some LinearProgressIndicatorViewStyle) -> some SwiftUI.View
  
  public func linearProgressIndicatorViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.LinearProgressIndicatorViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func mandatoryFieldIndicatorStyle(_ style: some MandatoryFieldIndicatorStyle) -> some SwiftUI.View
  
  public func mandatoryFieldIndicatorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MandatoryFieldIndicatorConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func mediaImageStyle(_ style: some MediaImageStyle) -> some SwiftUI.View
  
  public func mediaImageStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MediaImageConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func menuSelectionStyle(_ style: some MenuSelectionStyle) -> some SwiftUI.View
  
  public func menuSelectionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MenuSelectionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func menuSelectionItemStyle(_ style: some MenuSelectionItemStyle) -> some SwiftUI.View
  
  public func menuSelectionItemStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MenuSelectionItemConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func messageContentStyle(_ style: some MessageContentStyle) -> some SwiftUI.View
  
  public func messageContentStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MessageContentConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func moreActionOverflowStyle(_ style: some MoreActionOverflowStyle) -> some SwiftUI.View
  
  public func moreActionOverflowStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.MoreActionOverflowConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func noteFormViewStyle(_ style: some NoteFormViewStyle) -> some SwiftUI.View
  
  public func noteFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.NoteFormViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func nowIndicatorNodeStyle(_ style: some NowIndicatorNodeStyle) -> some SwiftUI.View
  
  public func nowIndicatorNodeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.NowIndicatorNodeConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func objectItemStyle(_ style: some ObjectItemStyle) -> some SwiftUI.View
  
  public func objectItemStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ObjectItemConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func optionsStyle(_ style: some OptionsStyle) -> some SwiftUI.View
  
  public func optionsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.OptionsConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func overflowActionStyle(_ style: some OverflowActionStyle) -> some SwiftUI.View
  
  public func overflowActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.OverflowActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func placeholderStyle(_ style: some PlaceholderStyle) -> some SwiftUI.View
  
  public func placeholderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func placeholderTextEditorStyle(_ style: some PlaceholderTextEditorStyle) -> some SwiftUI.View
  
  public func placeholderTextEditorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderTextEditorConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func placeholderTextFieldStyle(_ style: some PlaceholderTextFieldStyle) -> some SwiftUI.View
  
  public func placeholderTextFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.PlaceholderTextFieldConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func profileHeaderStyle(_ style: some ProfileHeaderStyle) -> some SwiftUI.View
  
  public func profileHeaderStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.ProfileHeaderConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func ratingControlStyle(_ style: some RatingControlStyle) -> some SwiftUI.View
  
  public func ratingControlStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.RatingControlConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func ratingControlFormViewStyle(_ style: some RatingControlFormViewStyle) -> some SwiftUI.View
  
  public func ratingControlFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.RatingControlFormViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func row1Style(_ style: some Row1Style) -> some SwiftUI.View
  
  public func row1Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row1Configuration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func row2Style(_ style: some Row2Style) -> some SwiftUI.View
  
  public func row2Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row2Configuration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func row3Style(_ style: some Row3Style) -> some SwiftUI.View
  
  public func row3Style(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.Row3Configuration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func secondaryActionStyle(_ style: some SecondaryActionStyle) -> some SwiftUI.View
  
  public func secondaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func secondaryTimestampStyle(_ style: some SecondaryTimestampStyle) -> some SwiftUI.View
  
  public func secondaryTimestampStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SecondaryTimestampConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func segmentedControlPickerStyle(_ style: some SegmentedControlPickerStyle) -> some SwiftUI.View
  
  public func segmentedControlPickerStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SegmentedControlPickerConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func sideBarStyle(_ style: some SideBarStyle) -> some SwiftUI.View
  
  public func sideBarStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SideBarConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func sideBarListItemStyle(_ style: some SideBarListItemStyle) -> some SwiftUI.View
  
  public func sideBarListItemStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SideBarListItemConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func statusStyle(_ style: some StatusStyle) -> some SwiftUI.View
  
  public func statusStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.StatusConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func stepperFieldStyle(_ style: some StepperFieldStyle) -> some SwiftUI.View
  
  public func stepperFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.StepperFieldConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func stepperViewStyle(_ style: some StepperViewStyle) -> some SwiftUI.View
  
  public func stepperViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.StepperViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func subAttributeStyle(_ style: some SubAttributeStyle) -> some SwiftUI.View
  
  public func subAttributeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubAttributeConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func substatusStyle(_ style: some SubstatusStyle) -> some SwiftUI.View
  
  public func substatusStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubstatusConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func subtitleStyle(_ style: some SubtitleStyle) -> some SwiftUI.View
  
  public func subtitleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SubtitleConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func switchStyle(_ style: some SwitchStyle) -> some SwiftUI.View
  
  public func switchStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.SwitchConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func tagsStyle(_ style: some TagsStyle) -> some SwiftUI.View
  
  public func tagsStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TagsConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func tertiaryActionStyle(_ style: some TertiaryActionStyle) -> some SwiftUI.View
  
  public func tertiaryActionStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TertiaryActionConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func textFieldFormViewStyle(_ style: some TextFieldFormViewStyle) -> some SwiftUI.View
  
  public func textFieldFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextFieldFormViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func textInputFieldStyle(_ style: some TextInputFieldStyle) -> some SwiftUI.View
  
  public func textInputFieldStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextInputFieldConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func textViewStyle(_ style: some TextViewStyle) -> some SwiftUI.View
  
  public func textViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TextViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func timelineStyle(_ style: some TimelineStyle) -> some SwiftUI.View
  
  public func timelineStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimelineConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func timelineMarkerStyle(_ style: some TimelineMarkerStyle) -> some SwiftUI.View
  
  public func timelineMarkerStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimelineMarkerConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func timelineNodeStyle(_ style: some TimelineNodeStyle) -> some SwiftUI.View
  
  public func timelineNodeStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimelineNodeConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func timelineNowIndicatorStyle(_ style: some TimelineNowIndicatorStyle) -> some SwiftUI.View
  
  public func timelineNowIndicatorStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimelineNowIndicatorConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func timestampStyle(_ style: some TimestampStyle) -> some SwiftUI.View
  
  public func timestampStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TimestampConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func titleStyle(_ style: some TitleStyle) -> some SwiftUI.View
  
  public func titleStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func titleFormViewStyle(_ style: some TitleFormViewStyle) -> some SwiftUI.View
  
  public func titleFormViewStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TitleFormViewConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func topDividerStyle(_ style: some TopDividerStyle) -> some SwiftUI.View
  
  public func topDividerStyle(@SwiftUI.ViewBuilder content: @escaping (FioriSwiftUICore.TopDividerConfiguration) -> some View) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  public func maxNumberOfItems(_ num: Swift.Int) -> some SwiftUI.View
  
}
public protocol _ViewEmptyChecking {
  var isEmpty: Swift.Bool { get }
}
extension FioriSwiftUICore.AccessoryIcon : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Action : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Attribute : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Avatars : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.BannerMessage : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CardBody : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Card : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CardExtHeader : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CardFooter : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CardHeader : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CardMainHeader : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CardMedia : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.CloseAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Counter : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.DecrementAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Description : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.DetailImage : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.FilledIcon : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Footnote : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.FootnoteIcons : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.FormView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.GreetingText : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.HeaderAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.HelperText : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Icon : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Icons : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.IllustratedMessage : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.IncrementAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.InformationView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.JouleWelcomeScreen : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.KeyValueFormView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.KpiCaption : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Kpi : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.LabelItem : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicator : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.LinearProgressIndicatorView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.MandatoryFieldIndicator : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.MediaImage : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.MenuSelection : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.MenuSelectionItem : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.MessageContent : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.MoreActionOverflow : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.NoteFormView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.NowIndicatorNode : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.ObjectItem : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Options : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.OverflowAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Placeholder : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.PlaceholderTextEditor : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.PlaceholderTextField : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.ProfileHeader : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.RatingControl : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.RatingControlFormView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Row1 : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Row2 : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Row3 : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.SecondaryAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.SecondaryTimestamp : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.SegmentedControlPicker : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.SideBar : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.SideBarListItem : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Status : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.StepperField : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.StepperView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.SubAttribute : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Substatus : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Subtitle : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Switch : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Tags : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TertiaryAction : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TextFieldFormView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TextInputField : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TextView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Timeline : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TimelineMarker : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TimelineNode : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TimelineNowIndicator : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Timestamp : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.Title : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TitleFormView : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension FioriSwiftUICore.TopDivider : FioriSwiftUICore._ViewEmptyChecking {
  public var isEmpty: Swift.Bool {
    get
  }
}
public struct WelcomeScreen<Title, DescriptionText, Subtitle, Footnote, Icon, TextInputView, ActionView, SecondaryActionView> where Title : SwiftUI.View, DescriptionText : SwiftUI.View, Subtitle : SwiftUI.View, Footnote : SwiftUI.View, Icon : SwiftUI.View, TextInputView : SwiftUI.View, ActionView : SwiftUI.View, SecondaryActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Title == SwiftUI.Text, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Icon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, TextInputView == SwiftUI._ConditionalContent<FioriSwiftUICore.TextInput, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView>, SecondaryActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore.WelcomeScreenModel)
  public init(title: Swift.String, descriptionText: Swift.String? = nil, subtitle: Swift.String? = nil, footnote: Swift.String? = nil, icon: SwiftUI.Image? = nil, textInput: FioriSwiftUICore.TextInput? = nil, action: FioriSwiftUICore._Action? = nil, secondaryAction: FioriSwiftUICore._Action? = nil)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder textInput: () -> TextInputView, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.WelcomeScreen where Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder secondaryAction: () -> SecondaryActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder textInput: () -> TextInputView)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder icon: () -> Icon)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore.WelcomeScreen where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore.WelcomeScreen where DescriptionText == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icon == SwiftUI.EmptyView, TextInputView == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView, SecondaryActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore.WelcomeScreen : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13WelcomeScreenV4bodyQrvp", 0) __<Title, DescriptionText, Subtitle, Footnote, Icon, TextInputView, ActionView, SecondaryActionView>
}
extension FioriSwiftUICore.WelcomeScreenModel {
  public var textInput: (any FioriSwiftUICore.TextInputModel)? {
    get
  }
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
  public var secondaryAction: (any FioriSwiftUICore._ActionModel)? {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct WindowReader<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public let view: (UIKit.UIWindow?) -> Content
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder view: @escaping (UIKit.UIWindow?) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore12WindowReaderV4bodyQrvp", 0) __<Content>
}
public struct _Action {
  public init(model: any FioriSwiftUICore._ActionModel)
  public init(actionText: Swift.String? = nil, didSelectAction: (() -> Swift.Void)? = nil)
}
extension FioriSwiftUICore._Action : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore7_ActionV4bodyQrvp", 0) __
}
public struct _DefaultSteps : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore13_DefaultStepsV4view2atQrSi_tF", 0) __
}
public struct _ObjectItem<Title, Subtitle, Footnote, DescriptionText, Status, Substatus, DetailImage, Icons, Avatars, FootnoteIcons, Tags, ActionView> where Title : SwiftUI.View, Subtitle : SwiftUI.View, Footnote : SwiftUI.View, DescriptionText : SwiftUI.View, Status : SwiftUI.View, Substatus : SwiftUI.View, DetailImage : SwiftUI.View, Icons : SwiftUI.View, Avatars : SwiftUI.View, FootnoteIcons : SwiftUI.View, Tags : SwiftUI.View, ActionView : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Title == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footnote == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, DescriptionText == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Status == SwiftUI._ConditionalContent<FioriSwiftUICore.TextOrIconView, SwiftUI.EmptyView>, Substatus == SwiftUI._ConditionalContent<FioriSwiftUICore.TextOrIconView, SwiftUI.EmptyView>, DetailImage == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, Icons == SwiftUI._ConditionalContent<FioriSwiftUICore.IconStack, SwiftUI.EmptyView>, Avatars == SwiftUI._ConditionalContent<FioriSwiftUICore.AvatarStack, SwiftUI.EmptyView>, FootnoteIcons == SwiftUI._ConditionalContent<FioriSwiftUICore.FootnoteIconStack, SwiftUI.EmptyView>, Tags == SwiftUI._ConditionalContent<FioriSwiftUICore.TagStack, SwiftUI.EmptyView>, ActionView == SwiftUI._ConditionalContent<FioriSwiftUICore._Action, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore._ObjectItemModel)
  public init(title: Swift.String, subtitle: Swift.String? = nil, footnote: Swift.String? = nil, descriptionText: Swift.String? = nil, status: FioriSwiftUICore.TextOrIcon? = nil, substatus: FioriSwiftUICore.TextOrIcon? = nil, detailImage: SwiftUI.Image? = nil, icons: [FioriSwiftUICore.TextOrIcon]? = nil, avatars: [FioriSwiftUICore.TextOrIcon]? = nil, footnoteIcons: [FioriSwiftUICore.TextOrIcon]? = nil, tags: [Swift.String]? = nil, action: FioriSwiftUICore._Action? = nil)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore._ObjectItem where DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder action: () -> ActionView)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.TagBuilder tags: () -> Tags)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.FootnoteIconsBuilder footnoteIcons: () -> FootnoteIcons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.AvatarsBuilder avatars: () -> Avatars)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @FioriSwiftUICore.IconBuilder icons: () -> Icons)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder detailImage: () -> DetailImage)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder substatus: () -> Substatus)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder status: () -> Status)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder descriptionText: () -> DescriptionText)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder footnote: () -> Footnote)
}
extension FioriSwiftUICore._ObjectItem where Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore._ObjectItem where Subtitle == SwiftUI.EmptyView, Footnote == SwiftUI.EmptyView, DescriptionText == SwiftUI.EmptyView, Status == SwiftUI.EmptyView, Substatus == SwiftUI.EmptyView, DetailImage == SwiftUI.EmptyView, Icons == SwiftUI.EmptyView, Avatars == SwiftUI.EmptyView, FootnoteIcons == SwiftUI.EmptyView, Tags == SwiftUI.EmptyView, ActionView == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore._ObjectItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore11_ObjectItemV4bodyQrvp", 0) __<Title, Subtitle, Footnote, DescriptionText, Status, Substatus, DetailImage, Icons, Avatars, FootnoteIcons, Tags, ActionView>
}
extension SwiftUI.EnvironmentValues {
  public var numberOfLines: Swift.Int {
    get
    set
  }
}
extension FioriSwiftUICore._ObjectItemModel {
  public var action: (any FioriSwiftUICore._ActionModel)? {
    get
  }
}
@available(iOS 14, *)
public struct _SideBar<Subtitle, Footer, Detail> where Subtitle : SwiftUI.View, Footer : SwiftUI.View, Detail : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footer: () -> Footer, @SwiftUI.ViewBuilder detail: () -> Detail)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore._SideBarModel, @SwiftUI.ViewBuilder footer: () -> Footer, @SwiftUI.ViewBuilder detail: () -> Detail)
  public init(subtitle: Swift.String? = nil, @SwiftUI.ViewBuilder footer: () -> Footer, @SwiftUI.ViewBuilder detail: () -> Detail)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder footer: () -> Footer, @SwiftUI.ViewBuilder detail: () -> Detail)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Footer == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder detail: () -> Detail)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Detail == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder footer: () -> Footer)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI.EmptyView, Footer == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder detail: () -> Detail)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI.EmptyView, Detail == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder footer: () -> Footer)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Footer == SwiftUI.EmptyView, Detail == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI.EmptyView, Footer == SwiftUI.EmptyView, Detail == SwiftUI.EmptyView {
  public init()
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore8_SideBarV4bodyQrvp", 0) __<Subtitle, Footer, Detail>
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Detail == SwiftUI.AnyView {
  public init<Data>(@SwiftUI.ViewBuilder subtitle: @escaping () -> Subtitle, @SwiftUI.ViewBuilder footer: @escaping () -> Footer, list: FioriSwiftUICore.ExpandableList<Data, some View, some View>) where Data : Swift.RandomAccessCollection, Data.Element : Swift.Hashable, Data.Element : Swift.Identifiable
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Detail == SwiftUI.AnyView {
  public init<Data>(subtitle: Swift.String? = nil, @SwiftUI.ViewBuilder footer: @escaping () -> Footer, list: FioriSwiftUICore.ExpandableList<Data, some View, some View>) where Data : Swift.RandomAccessCollection, Data.Element : Swift.Hashable, Data.Element : Swift.Identifiable
}
@available(iOS 14, *)
extension FioriSwiftUICore._SideBar where Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, Footer == SwiftUI._ConditionalContent<SwiftUI.AnyView, SwiftUI.EmptyView>, Detail == SwiftUI._ConditionalContent<SwiftUI.AnyView, SwiftUI.EmptyView> {
  public init<Data>(subtitle: Swift.String? = nil, footerModel: (any FioriSwiftUICore._ObjectItemModel)? = nil, list: FioriSwiftUICore.ExpandableList<Data, some View, some View>? = nil) where Data : Swift.RandomAccessCollection, Data.Element : Swift.Hashable, Data.Element : Swift.Identifiable
}
@available(iOS 14, *)
public struct ExpandableList<Data, Row, Destination> : SwiftUI.View where Data : Swift.RandomAccessCollection, Row : SwiftUI.View, Destination : SwiftUI.View, Data.Element : Swift.Hashable, Data.Element : Swift.Identifiable {
  public init(data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Data.Element?>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> Row, @SwiftUI.ViewBuilder destination: @escaping (Data.Element) -> Destination? = { _ in nil })
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore14ExpandableListV4bodyQrvp", 0) __<Data, Row, Destination>
}
@available(iOS 14, *)
extension FioriSwiftUICore.ExpandableList where Row == FioriSwiftUICore._SideBarListItem<SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, SwiftUI.Text, SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>> {
  public init(data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Data.Element?>, rowModel: @escaping (Data.Element) -> any FioriSwiftUICore._SideBarListItemModel, destination: @escaping (Data.Element) -> Destination)
}
@available(iOS 14, *)
extension FioriSwiftUICore.ExpandableList where Destination == SwiftUI.EmptyView {
  public init(data: Data, children: Swift.KeyPath<Data.Element, Data?>, selection: SwiftUI.Binding<Data.Element?>, @SwiftUI.ViewBuilder rowContent: @escaping (Data.Element) -> Row)
}
public struct _SideBarListItem<Icon, Title, Subtitle, AccessoryIcon> where Icon : SwiftUI.View, Title : SwiftUI.View, Subtitle : SwiftUI.View, AccessoryIcon : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder accessoryIcon: () -> AccessoryIcon)
}
extension FioriSwiftUICore._SideBarListItem where Icon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView>, Title == SwiftUI.Text, Subtitle == SwiftUI._ConditionalContent<SwiftUI.Text, SwiftUI.EmptyView>, AccessoryIcon == SwiftUI._ConditionalContent<SwiftUI.Image, SwiftUI.EmptyView> {
  public init(model: any FioriSwiftUICore._SideBarListItemModel)
  public init(icon: SwiftUI.Image? = nil, title: Swift.String, subtitle: Swift.String? = nil, accessoryIcon: SwiftUI.Image? = nil)
}
extension FioriSwiftUICore._SideBarListItem where Icon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle, @SwiftUI.ViewBuilder accessoryIcon: () -> AccessoryIcon)
}
extension FioriSwiftUICore._SideBarListItem where Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder accessoryIcon: () -> AccessoryIcon)
}
extension FioriSwiftUICore._SideBarListItem where AccessoryIcon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore._SideBarListItem where Icon == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder accessoryIcon: () -> AccessoryIcon)
}
extension FioriSwiftUICore._SideBarListItem where Icon == SwiftUI.EmptyView, AccessoryIcon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title, @SwiftUI.ViewBuilder subtitle: () -> Subtitle)
}
extension FioriSwiftUICore._SideBarListItem where Subtitle == SwiftUI.EmptyView, AccessoryIcon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder icon: () -> Icon, @SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore._SideBarListItem where Icon == SwiftUI.EmptyView, Subtitle == SwiftUI.EmptyView, AccessoryIcon == SwiftUI.EmptyView {
  public init(@SwiftUI.ViewBuilder title: () -> Title)
}
extension FioriSwiftUICore._SideBarListItem : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore16_SideBarListItemV4bodyQrvp", 0) __<Icon, Title, Subtitle, AccessoryIcon>
}
@_Concurrency.MainActor(unsafe) public struct _SortFilterCFGItemContainer {
  @_Concurrency.MainActor(unsafe) public init(items: SwiftUI.Binding<[[FioriSwiftUICore.SortFilterItem]]>)
}
extension FioriSwiftUICore._SortFilterCFGItemContainer : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore27_SortFilterCFGItemContainerV4bodyQrvp", 0) __
}
public struct _SortFilterMenuItemContainer {
  public init(items: SwiftUI.Binding<[[FioriSwiftUICore.SortFilterItem]]>)
}
extension FioriSwiftUICore._SortFilterMenuItemContainer : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16FioriSwiftUICore28_SortFilterMenuItemContainerV4bodyQrvp", 0) __
}
public struct SortFilterMenuItemFullConfigurationButton {
  public let name: Swift.String?
  public let icon: Swift.String?
  public let positon: FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton.Position
  public enum Position {
    case leading
    case trailing
    case none
    public static func == (a: FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton.Position, b: FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton.Position) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func leading(name: Swift.String) -> FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton
  public static func leading(icon: Swift.String) -> FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton
  public static func leading(name: Swift.String, icon: Swift.String) -> FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton
  public static func trailing(name: Swift.String) -> FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton
  public static func trailing(icon: Swift.String) -> FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton
  public static func trailing(name: Swift.String, icon: Swift.String) -> FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton
}
extension SwiftUI.View {
  public func leadingFullConfigurationMenuItem(name: Swift.String) -> some SwiftUI.View
  
  public func leadingFullConfigurationMenuItem(icon: Swift.String) -> some SwiftUI.View
  
  public func leadingFullConfigurationMenuItem(name: Swift.String, icon: Swift.String) -> some SwiftUI.View
  
  public func trailingFullConfigurationMenuItem(name: Swift.String) -> some SwiftUI.View
  
  public func trailingFullConfigurationMenuItem(icon: Swift.String) -> some SwiftUI.View
  
  public func trailingFullConfigurationMenuItem(name: Swift.String, icon: Swift.String) -> some SwiftUI.View
  
}
public struct _StepsContainer {
  public init(steps: [any FioriSwiftUICore.SingleStepModel])
  public init(substeps: [any FioriSwiftUICore.SingleStepModel])
}
extension FioriSwiftUICore._StepsContainer : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore15_StepsContainerV4view2atQrSi_tF", 0) __
}
public struct _StepItemsContainer {
  public init(_ steps: [any FioriSwiftUICore.StepItem])
}
extension FioriSwiftUICore._StepItemsContainer : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore19_StepItemsContainerV4view2atQrSi_tF", 0) __
}
public struct _UserConsentFormsContainer {
  public init(userConsentForms: [any FioriSwiftUICore.UserConsentFormModel] = [])
}
extension FioriSwiftUICore._UserConsentFormsContainer : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26_UserConsentFormsContainerV4view2atQrSi_tF", 0) __
}
public struct _UserConsentPagesContainer {
  public init(userConsentPages: [any FioriSwiftUICore.UserConsentPageModel] = [])
}
extension FioriSwiftUICore._UserConsentPagesContainer : FioriSwiftUICore.IndexedViewContainer {
  public var count: Swift.Int {
    get
  }
  public func view(at index: Swift.Int) -> some SwiftUI.View
  
  public typealias V = @_opaqueReturnTypeOf("$s16FioriSwiftUICore26_UserConsentPagesContainerV4view2atQrSi_tF", 0) __
}
extension FioriSwiftUICore.AccessoryType : Swift.Equatable {}
extension FioriSwiftUICore.AccessoryType : Swift.Hashable {}
extension FioriSwiftUICore.AccessoryType : Swift.RawRepresentable {}
extension FioriSwiftUICore.DataDateItem : FioriSwiftUICore.DataItem {}
extension FioriSwiftUICore.DataDurationItem : FioriSwiftUICore.DataItem {}
extension FioriSwiftUICore.DataImageItem : FioriSwiftUICore.DataItem {}
extension FioriSwiftUICore.DataItemType : Swift.Equatable {}
extension FioriSwiftUICore.DataItemType : Swift.Hashable {}
extension FioriSwiftUICore.DataItemType : Swift.RawRepresentable {}
extension FioriSwiftUICore.ObjectViewProperty.Text : Swift.Equatable {}
extension FioriSwiftUICore.ObjectViewProperty.Text : Swift.Hashable {}
extension FioriSwiftUICore.ObjectViewProperty.Image : Swift.Equatable {}
extension FioriSwiftUICore.ObjectViewProperty.Image : Swift.Hashable {}
extension FioriSwiftUICore.DataListItem : FioriSwiftUICore.DataItem {}
extension FioriSwiftUICore.DataTextItem : FioriSwiftUICore.DataItem {}
extension FioriSwiftUICore.DataTimeItem : FioriSwiftUICore.DataItem {}
extension FioriSwiftUICore.FioriButtonImagePosition : Swift.Equatable {}
extension FioriSwiftUICore.FioriButtonImagePosition : Swift.Hashable {}
extension FioriSwiftUICore.FioriButtonColorStyle : Swift.Equatable {}
extension FioriSwiftUICore.FioriButtonColorStyle : Swift.Hashable {}
extension FioriSwiftUICore.FioriButtonLoadingState : Swift.Equatable {}
extension FioriSwiftUICore.FioriButtonLoadingState : Swift.Hashable {}
extension FioriSwiftUICore.IllustratedMessage.DetailImageSize : Swift.Equatable {}
extension FioriSwiftUICore.IllustratedMessage.DetailImageSize : Swift.Hashable {}
extension FioriSwiftUICore.MasonryLayout.ViewOrder : Swift.Equatable {}
extension FioriSwiftUICore.MasonryLayout.ViewOrder : Swift.Hashable {}
extension FioriSwiftUICore.MasonryLayout.ViewOrder : Swift.RawRepresentable {}
extension FioriSwiftUICore.RatingControl.Style : Swift.Equatable {}
extension FioriSwiftUICore.RatingControl.Style : Swift.Hashable {}
extension FioriSwiftUICore.RowAlignment : Swift.Equatable {}
extension FioriSwiftUICore.RowAlignment : Swift.Hashable {}
extension FioriSwiftUICore.SegmentWidthMode : Swift.Sendable {}
extension FioriSwiftUICore.TableModel.EditMode : Swift.Equatable {}
extension FioriSwiftUICore.TableModel.EditMode : Swift.Hashable {}
extension FioriSwiftUICore.TableModel.EditMode : Swift.RawRepresentable {}
extension FioriSwiftUICore.TimelineNodeType : Swift.Equatable {}
extension FioriSwiftUICore.TimelineNodeType : Swift.Hashable {}
extension FioriSwiftUICore.UserConsentAlertType : Swift.Equatable {}
extension FioriSwiftUICore.UserConsentAlertType : Swift.Hashable {}
extension FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton.Position : Swift.Equatable {}
extension FioriSwiftUICore.SortFilterMenuItemFullConfigurationButton.Position : Swift.Hashable {}
